const { createClient } = require('@supabase/supabase-js');

// C·∫•u h√¨nh Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'your-service-role-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testBotLogging() {
  console.log('üß™ Testing BotExecutor logging system...\n');

  try {
    // 1. Ki·ªÉm tra c·∫•u tr√∫c logging
    console.log('1Ô∏è‚É£ Ki·ªÉm tra c·∫•u tr√∫c logging system...');
    
    const loggingFeatures = [
      'üîç Strategy execution logging',
      'üìä Signal calculation logging', 
      'üí∞ Trade execution logging',
      '‚öñÔ∏è Position management logging',
      'üåê API call logging',
      '‚è±Ô∏è Performance timing logging',
      'üìà Data analysis logging',
      '‚ö†Ô∏è Error and warning logging'
    ];
    
    loggingFeatures.forEach((feature, index) => {
      console.log(`   ${index + 1}. ${feature}`);
    });

    // 2. Ki·ªÉm tra bot hi·ªán t·∫°i
    console.log('\n2Ô∏è‚É£ Ki·ªÉm tra bot hi·ªán t·∫°i...');
    const { data: bots, error: botsError } = await supabase
      .from('trading_bots')
      .select('*')
      .limit(5);

    if (botsError) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch bot:', botsError.message);
      return;
    }

    if (!bots || bots.length === 0) {
      console.log('üì≠ Kh√¥ng c√≥ bot n√†o ƒë·ªÉ test');
      return;
    }

    console.log(`‚úÖ T√¨m th·∫•y ${bots.length} bot(s) ƒë·ªÉ test logging:`);
    bots.forEach((bot, index) => {
      console.log(`   ${index + 1}. ${bot.name} (${bot.id})`);
      console.log(`      Status: ${bot.status}`);
      console.log(`      Strategy: ${bot.config?.strategy?.type || 'N/A'}`);
      console.log(`      Symbol: ${bot.config?.trading?.symbol || 'N/A'}`);
      console.log(`      Timeframe: ${bot.config?.trading?.timeframe || 'N/A'}`);
    });

    // 3. Ki·ªÉm tra logging configuration
    console.log('\n3Ô∏è‚É£ Ki·ªÉm tra logging configuration...');
    
    const loggingConfig = {
      logLevel: 'DEBUG',
      enableConsole: true,
      enableFile: false,
      maxBufferSize: 1000,
      timestampFormat: 'ISO',
      includePerformanceMetrics: true,
      includeDataAnalysis: true,
      includeAPIDetails: true
    };
    
    console.log('üìã Logging configuration:');
    Object.entries(loggingConfig).forEach(([key, value]) => {
      console.log(`   ${key}: ${value}`);
    });

    // 4. Ki·ªÉm tra c√°c lo·∫°i log s·∫Ω ƒë∆∞·ª£c t·∫°o
    console.log('\n4Ô∏è‚É£ C√°c lo·∫°i log s·∫Ω ƒë∆∞·ª£c t·∫°o:');
    
    const logTypes = [
      {
        type: 'Strategy Execution',
        description: 'Chi ti·∫øt v·ªÅ qu√° tr√¨nh th·ª±c thi chi·∫øn l∆∞·ª£c',
        includes: ['Input data', 'Strategy parameters', 'Execution time', 'Results']
      },
      {
        type: 'Signal Calculation',
        description: 'Chi ti·∫øt v·ªÅ t√≠nh to√°n signal',
        includes: ['Candles data', 'Technical indicators', 'Calculation time', 'Signal result']
      },
      {
        type: 'Trade Execution',
        description: 'Chi ti·∫øt v·ªÅ th·ª±c hi·ªán giao d·ªãch',
        includes: ['Price data', 'Balance check', 'Position size', 'Order details']
      },
      {
        type: 'Position Management',
        description: 'Chi ti·∫øt v·ªÅ qu·∫£n l√Ω v·ªã th·∫ø',
        includes: ['Current position', 'Real position check', 'Position updates', 'Risk management']
      },
      {
        type: 'API Calls',
        description: 'Chi ti·∫øt v·ªÅ c√°c API calls',
        includes: ['Endpoint', 'Parameters', 'Response time', 'Response data']
      },
      {
        type: 'Performance Metrics',
        description: 'C√°c ch·ªâ s·ªë hi·ªáu su·∫•t',
        includes: ['Execution time', 'API latency', 'Data processing time', 'Memory usage']
      },
      {
        type: 'Data Analysis',
        description: 'Ph√¢n t√≠ch d·ªØ li·ªáu chi ti·∫øt',
        includes: ['Price ranges', 'Volatility', 'Volume analysis', 'Trend analysis']
      },
      {
        type: 'Error Handling',
        description: 'X·ª≠ l√Ω l·ªói chi ti·∫øt',
        includes: ['Error context', 'Stack traces', 'Recovery actions', 'Fallback strategies']
      }
    ];
    
    logTypes.forEach((logType, index) => {
      console.log(`   ${index + 1}. ${logType.type}`);
      console.log(`      ${logType.description}`);
      console.log(`      Includes: ${logType.includes.join(', ')}`);
      console.log('');
    });

    // 5. H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    console.log('5Ô∏è‚É£ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng logging system:');
    
    console.log('\nüöÄ ƒê·ªÉ b·∫≠t logging chi ti·∫øt:');
    console.log('   1. Ch·∫°y: node enable-bot-debug.js');
    console.log('   2. Kh·ªüi ƒë·ªông bot');
    console.log('   3. Xem log real-time: node monitor-bot-logs.js');
    
    console.log('\nüìä ƒê·ªÉ xem log chi ti·∫øt:');
    console.log('   1. Xem t·∫•t c·∫£ log: node show-bot-logs.js');
    console.log('   2. Theo d√µi real-time: node monitor-bot-logs.js');
    console.log('   3. Ki·ªÉm tra tr·∫°ng th√°i: node check_bot_db.js');
    
    console.log('\nüîç C√°c lo·∫°i log c√≥ s·∫µn:');
    console.log('   - DEBUG: Th√¥ng tin chi ti·∫øt nh·∫•t');
    console.log('   - INFO: Th√¥ng tin quan tr·ªçng');
    console.log('   - WARN: C·∫£nh b√°o');
    console.log('   - ERROR: L·ªói');
    
    console.log('\nüìà Metrics ƒë∆∞·ª£c theo d√µi:');
    console.log('   - Execution time cho m·ªói b∆∞·ªõc');
    console.log('   - API response time');
    console.log('   - Data processing time');
    console.log('   - Memory usage');
    console.log('   - Error frequency');

    // 6. Test logging v·ªõi bot c·ª• th·ªÉ
    if (bots.length > 0) {
      const testBot = bots[0];
      console.log(`\n6Ô∏è‚É£ Test logging v·ªõi bot: ${testBot.name}`);
      
      console.log('üìã Bot details:');
      console.log(`   ID: ${testBot.id}`);
      console.log(`   Name: ${testBot.name}`);
      console.log(`   Status: ${testBot.status}`);
      console.log(`   Strategy: ${testBot.config?.strategy?.type || 'N/A'}`);
      console.log(`   Symbol: ${testBot.config?.trading?.symbol || 'N/A'}`);
      console.log(`   Timeframe: ${testBot.config?.trading?.timeframe || 'N/A'}`);
      
      console.log('\nüîç Logging s·∫Ω hi·ªÉn th·ªã:');
      console.log(`   - M·ªçi thay ƒë·ªïi tr·∫°ng th√°i c·ªßa bot ${testBot.name}`);
      console.log(`   - Chi ti·∫øt v·ªÅ chi·∫øn l∆∞·ª£c ${testBot.config?.strategy?.type || 'N/A'}`);
      console.log(`   - Th√¥ng tin v·ªÅ symbol ${testBot.config?.trading?.symbol || 'N/A'}`);
      console.log(`   - Performance metrics cho m·ªói operation`);
      console.log(`   - API calls v√† response times`);
      console.log(`   - Data analysis v√† signal calculations`);
    }

  } catch (error) {
    console.error('‚ùå L·ªói khi test logging system:', error.message);
  }
}

// Ch·∫°y script
if (require.main === module) {
  testBotLogging().catch(console.error);
}

module.exports = { testBotLogging };
