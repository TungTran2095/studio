const { createClient } = require('@supabase/supabase-js');

// C·∫•u h√¨nh Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Thi·∫øu c·∫•u h√¨nh Supabase');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkBotStatus() {
  try {
    console.log('üîç ƒêang ki·ªÉm tra tr·∫°ng th√°i bot...');
    
    // L·∫•y t·∫•t c·∫£ bot
    const { data: allBots, error } = await supabase
      .from('trading_bots')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch bot:', error);
      return;
    }

    if (!allBots || allBots.length === 0) {
      console.log('üìù Kh√¥ng c√≥ bot n√†o trong h·ªá th·ªëng');
      return;
    }

    console.log(`üìä T·ªïng s·ªë bot: ${allBots.length}`);
    console.log('\nüìã Chi ti·∫øt t·ª´ng bot:');
    console.log('‚îÄ'.repeat(80));

    const statusCounts = {
      idle: 0,
      running: 0,
      stopped: 0,
      error: 0
    };

    allBots.forEach((bot, index) => {
      statusCounts[bot.status]++;
      
      console.log(`${index + 1}. ${bot.name}`);
      console.log(`   ID: ${bot.id}`);
      console.log(`   Status: ${bot.status}`);
      console.log(`   T·ªïng giao d·ªãch: ${bot.total_trades || 0}`);
      console.log(`   L·ª£i nhu·∫≠n: ${bot.total_profit || 0}%`);
      console.log(`   T·ª∑ l·ªá th·∫Øng: ${bot.win_rate || 0}%`);
      console.log(`   L·∫ßn ch·∫°y cu·ªëi: ${bot.last_run_at || 'Ch∆∞a ch·∫°y'}`);
      console.log(`   C·∫≠p nh·∫≠t cu·ªëi: ${bot.updated_at}`);
      console.log(`   T·∫°o l√∫c: ${bot.created_at}`);
      console.log('');
    });

    console.log('üìà Th·ªëng k√™ theo tr·∫°ng th√°i:');
    console.log(`   Idle: ${statusCounts.idle}`);
    console.log(`   Running: ${statusCounts.running}`);
    console.log(`   Stopped: ${statusCounts.stopped}`);
    console.log(`   Error: ${statusCounts.error}`);

    // Ki·ªÉm tra bot ƒëang ch·∫°y
    const runningBots = allBots.filter(bot => bot.status === 'running');
    if (runningBots.length > 0) {
      console.log('\n‚ö†Ô∏è C·∫¢NH B√ÅO: C√≥ bot ƒëang ch·∫°y!');
      console.log('C√°c bot ƒëang ch·∫°y:');
      runningBots.forEach(bot => {
        console.log(`   - ${bot.name} (ID: ${bot.id})`);
      });
      console.log('\nüí° G·ª£i √Ω: Ch·∫°y script stop-all-bots.js ƒë·ªÉ d·ª´ng t·∫•t c·∫£ bot');
    } else {
      console.log('\n‚úÖ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y');
    }

    // Ki·ªÉm tra bot c√≥ l·ªói
    const errorBots = allBots.filter(bot => bot.status === 'error');
    if (errorBots.length > 0) {
      console.log('\n‚ùå C√≥ bot g·∫∑p l·ªói:');
      errorBots.forEach(bot => {
        console.log(`   - ${bot.name} (ID: ${bot.id})`);
        if (bot.last_error) {
          console.log(`     L·ªói: ${bot.last_error}`);
        }
      });
    }

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

// Ch·∫°y script
checkBotStatus().then(() => {
  console.log('\nüèÅ Ho√†n th√†nh ki·ªÉm tra');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå L·ªói:', error);
  process.exit(1);
}); 