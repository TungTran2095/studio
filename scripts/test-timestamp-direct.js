#!/usr/bin/env node

/**
 * Script ƒë·ªÉ test timestamp tr·ª±c ti·∫øp v·ªõi Binance API
 * S·ª≠ d·ª•ng: node scripts/test-timestamp-direct.js
 */

const https = require('https');
const crypto = require('crypto');

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const req = https.request(url, {
      method: 'GET',
      timeout: 5000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        ...options.headers
      }
    }, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const json = JSON.parse(data);
          resolve(json);
        } catch (e) {
          reject(new Error('Invalid JSON response'));
        }
      });
    });
    
    req.on('error', reject);
    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });
    
    req.end();
  });
}

async function testTimestampDirect() {
  log('cyan', 'üß™ Testing timestamp tr·ª±c ti·∫øp v·ªõi Binance API...\n');
  
  try {
    // Test 1: L·∫•y server time
    log('blue', 'üì° Test 1: L·∫•y server time t·ª´ Binance...');
    const serverTimeResponse = await makeRequest('https://api.binance.com/api/v3/time');
    const serverTime = serverTimeResponse.serverTime;
    const localTime = Date.now();
    const timeDiff = localTime - serverTime;
    
    log('green', `‚úÖ Server time: ${new Date(serverTime).toISOString()}`);
    log('blue', `üì± Local time: ${new Date(localTime).toISOString()}`);
    log('yellow', `‚è∞ Time difference: ${timeDiff}ms (${timeDiff > 0 ? 'local ahead' : 'local behind'})`);
    
    // Test 2: T√≠nh timestamp an to√†n
    log('blue', '\nüõ°Ô∏è Test 2: T√≠nh timestamp an to√†n...');
    
    const safeOffsets = [10000, 30000, 60000, 120000]; // 10s, 30s, 1m, 2m
    
    for (const offset of safeOffsets) {
      const safeTimestamp = serverTime - offset;
      const safeTimeDiff = safeTimestamp - serverTime;
      
      log('cyan', `üìä Offset ${offset}ms: ${new Date(safeTimestamp).toISOString()}`);
      log('yellow', `   Difference vs server: ${safeTimeDiff}ms`);
      
      // Ki·ªÉm tra xem c√≥ trong recvWindow kh√¥ng
      const recvWindow = 60000; // 60 gi√¢y
      const isWithinRecvWindow = Math.abs(safeTimeDiff) <= recvWindow;
      log(isWithinRecvWindow ? 'green' : 'red', `   ${isWithinRecvWindow ? '‚úÖ' : '‚ùå'} Within recvWindow (${recvWindow}ms)`);
    }
    
    // Test 3: Test v·ªõi timestamp th·ª±c t·∫ø
    log('blue', '\nüî¨ Test 3: Test timestamp v·ªõi API call th·ª±c t·∫ø...');
    
    // S·ª≠ d·ª•ng timestamp an to√†n nh·∫•t
    const testTimestamp = serverTime - 30000; // 30 gi√¢y tr∆∞·ªõc server time
    const testUrl = `https://api.binance.com/api/v3/time?timestamp=${testTimestamp}`;
    
    log('yellow', `üïê Test timestamp: ${new Date(testTimestamp).toISOString()}`);
    log('yellow', `üìä Difference vs server: ${testTimestamp - serverTime}ms`);
    
    try {
      const testResponse = await makeRequest(testUrl);
      log('green', '‚úÖ API call v·ªõi timestamp an to√†n th√†nh c√¥ng!');
      log('blue', `üìÑ Response: ${JSON.stringify(testResponse)}`);
    } catch (error) {
      log('red', `‚ùå API call th·∫•t b·∫°i: ${error.message}`);
    }
    
    // Test 4: Test v·ªõi timestamp kh√¥ng an to√†n
    log('blue', '\n‚ö†Ô∏è Test 4: Test v·ªõi timestamp kh√¥ng an to√†n...');
    
    const unsafeTimestamp = serverTime + 1000; // 1 gi√¢y sau server time
    const unsafeUrl = `https://api.binance.com/api/v3/time?timestamp=${unsafeTimestamp}`;
    
    log('yellow', `üïê Unsafe timestamp: ${new Date(unsafeTimestamp).toISOString()}`);
    log('yellow', `üìä Difference vs server: ${unsafeTimestamp - serverTime}ms`);
    
    try {
      const unsafeResponse = await makeRequest(unsafeUrl);
      log('green', '‚úÖ API call v·ªõi timestamp kh√¥ng an to√†n c≈©ng th√†nh c√¥ng!');
    } catch (error) {
      log('red', `‚ùå API call th·∫•t b·∫°i (nh∆∞ mong ƒë·ª£i): ${error.message}`);
    }
    
    // K·∫øt lu·∫≠n
    log('cyan', '\nüí° K·∫øt lu·∫≠n v√† khuy·∫øn ngh·ªã:');
    log('blue', '‚úÖ S·ª≠ d·ª•ng timestamp = serverTime - 30000ms (30 gi√¢y tr∆∞·ªõc)');
    log('blue', '‚úÖ RecvWindow 60000ms (60 gi√¢y) l√† ƒë·ªß an to√†n');
    log('blue', '‚úÖ Lu√¥n sync server time tr∆∞·ªõc khi t·∫°o timestamp');
    log('blue', '‚úÖ Implement retry logic v·ªõi timestamp error handling');
    
    // Test 5: Test TimeSync logic
    log('blue', '\nüîß Test 5: Test TimeSync logic...');
    
    // Mock TimeSync logic
    const mockTimeSync = {
      lastServerTime: serverTime,
      isSynced: true,
      getSafeTimestampForTrading: function() {
        const now = Date.now();
        if (this.isSynced && this.lastServerTime > 0) {
          const safeOffset = 30000; // 30 gi√¢y tr∆∞·ªõc server time
          const safeTimestamp = this.lastServerTime - safeOffset;
          const minTimestamp = now - 300000; // 5 ph√∫t tr∆∞·ªõc
          return Math.max(safeTimestamp, minTimestamp);
        }
        return now - 60000; // 1 ph√∫t tr∆∞·ªõc ƒë·ªÉ an to√†n
      }
    };
    
    const timeSyncTimestamp = mockTimeSync.getSafeTimestampForTrading();
    const timeSyncDiff = timeSyncTimestamp - serverTime;
    
    log('green', `‚úÖ TimeSync timestamp: ${new Date(timeSyncTimestamp).toISOString()}`);
    log('yellow', `üìä Difference vs server: ${timeSyncDiff}ms`);
    log('green', `‚úÖ TimeSync logic ho·∫°t ƒë·ªông t·ªët!`);
    
  } catch (error) {
    log('red', '‚ùå Error testing timestamp:', error.message);
  }
}

// Ch·∫°y test
testTimestampDirect().catch(console.error);

