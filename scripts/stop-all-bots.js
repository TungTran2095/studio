const { createClient } = require('@supabase/supabase-js');

// C·∫•u h√¨nh Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Thi·∫øu c·∫•u h√¨nh Supabase');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function stopAllRunningBots() {
  try {
    console.log('üîÑ ƒêang t√¨m t·∫•t c·∫£ bot ƒëang ch·∫°y...');
    
    // L·∫•y t·∫•t c·∫£ bot c√≥ status 'running'
    const { data: runningBots, error } = await supabase
      .from('trading_bots')
      .select('*')
      .eq('status', 'running');

    if (error) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch bot:', error);
      return;
    }

    if (!runningBots || runningBots.length === 0) {
      console.log('‚úÖ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y');
      return;
    }

    console.log(`üìä T√¨m th·∫•y ${runningBots.length} bot ƒëang ch·∫°y:`);
    runningBots.forEach(bot => {
      console.log(`  - ${bot.name} (ID: ${bot.id})`);
    });

    // C·∫≠p nh·∫≠t t·∫•t c·∫£ bot v·ªÅ status 'stopped'
    const { error: updateError } = await supabase
      .from('trading_bots')
      .update({ 
        status: 'stopped',
        updated_at: new Date().toISOString()
      })
      .eq('status', 'running');

    if (updateError) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t status bot:', updateError);
      return;
    }

    console.log('‚úÖ ƒê√£ d·ª´ng t·∫•t c·∫£ bot ƒëang ch·∫°y');

    // Ki·ªÉm tra l·∫°i
    const { data: remainingRunningBots } = await supabase
      .from('trading_bots')
      .select('*')
      .eq('status', 'running');

    if (remainingRunningBots && remainingRunningBots.length > 0) {
      console.log(`‚ö†Ô∏è V·∫´n c√≤n ${remainingRunningBots.length} bot ƒëang ch·∫°y`);
    } else {
      console.log('‚úÖ T·∫•t c·∫£ bot ƒë√£ ƒë∆∞·ª£c d·ª´ng th√†nh c√¥ng');
    }

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

// Ch·∫°y script
stopAllRunningBots().then(() => {
  console.log('üèÅ Ho√†n th√†nh');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå L·ªói:', error);
  process.exit(1);
}); 