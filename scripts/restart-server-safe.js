const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

async function restartServerSafe() {
  try {
    console.log('üîÑ RESTARTING SERVER SAFELY...');
    
    // B∆∞·ªõc 1: Kill t·∫•t c·∫£ process tr√™n port 9002
    console.log('üî™ Killing processes tr√™n port 9002...');
    try {
      const { stdout: netstatOutput } = await execAsync('netstat -ano | findstr :9002');
      const lines = netstatOutput.split('\n').filter(line => line.trim());
      
      for (const line of lines) {
        const parts = line.trim().split(/\s+/);
        if (parts.length >= 5) {
          const pid = parts[4];
          if (pid && pid !== '0') {
            console.log(`üî™ Killing process PID: ${pid}`);
            try {
              await execAsync(`taskkill /PID ${pid} /F`);
              console.log(`‚úÖ ƒê√£ kill process ${pid}`);
            } catch (killError) {
              console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ kill process ${pid}:`, killError.message);
            }
          }
        }
      }
    } catch (netstatError) {
      console.log('‚ÑπÔ∏è Kh√¥ng c√≥ process n√†o tr√™n port 9002');
    }

    // B∆∞·ªõc 2: ƒê·ª£i ƒë·ªÉ ƒë·∫£m b·∫£o port ƒë∆∞·ª£c gi·∫£i ph√≥ng
    console.log('‚è≥ ƒê·ª£i 5 gi√¢y ƒë·ªÉ port ƒë∆∞·ª£c gi·∫£i ph√≥ng...');
    await new Promise(resolve => setTimeout(resolve, 5000));

    // B∆∞·ªõc 3: Ki·ªÉm tra port ƒë√£ ƒë∆∞·ª£c gi·∫£i ph√≥ng ch∆∞a
    try {
      await execAsync('netstat -ano | findstr :9002');
      console.log('‚ö†Ô∏è Port 9002 v·∫´n c√≤n process, ƒë·ª£i th√™m...');
      await new Promise(resolve => setTimeout(resolve, 3000));
    } catch (error) {
      console.log('‚úÖ Port 9002 ƒë√£ ƒë∆∞·ª£c gi·∫£i ph√≥ng');
    }

    // B∆∞·ªõc 4: Start server
    console.log('üöÄ Starting server...');
    console.log('üí° S·ª≠ d·ª•ng l·ªánh: npm run dev');
    console.log('üí° Ho·∫∑c: npm run dev-clean');
    
    // Kh√¥ng t·ª± ƒë·ªông start ƒë·ªÉ tr√°nh conflict
    console.log('\n‚úÖ READY TO START SERVER!');
    console.log('üìù H√£y ch·∫°y: npm run dev');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

// Ch·∫°y script
restartServerSafe().then(() => {
  console.log('\nüèÅ Ho√†n th√†nh');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå L·ªói:', error);
  process.exit(1);
}); 