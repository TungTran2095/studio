#!/usr/bin/env node

/**
 * Script debug kh·ªüi ƒë·ªông bot t·ª´ng b∆∞·ªõc
 * Gi√∫p x√°c ƒë·ªãnh ch√≠nh x√°c v·∫•n ƒë·ªÅ ·ªü ƒë√¢u
 */

require('dotenv').config();

const BOT_ID = 'f9e5f7b4-4160-4dae-8163-03e1f08276d1';

console.log('üêõ Debug kh·ªüi ƒë·ªông bot...\n');

async function debugBotStart() {
  try {
    console.log('1Ô∏è‚É£ Ki·ªÉm tra server health...');
    
    // Ki·ªÉm tra server c√≥ ch·∫°y kh√¥ng
    try {
      const healthResponse = await fetch('http://localhost:3000/api/health');
      if (healthResponse.ok) {
        console.log('‚úÖ Server ƒëang ch·∫°y');
      } else {
        console.log('‚ö†Ô∏è Server response kh√¥ng ·ªïn:', healthResponse.status);
      }
    } catch (error) {
      console.log('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi server:', error.message);
      console.log('üí° H√£y ch·∫°y: npm run dev');
      return;
    }

    console.log('\n2Ô∏è‚É£ Ki·ªÉm tra bot status hi·ªán t·∫°i...');
    
    try {
      const statusResponse = await fetch(`http://localhost:3000/api/trading/bot/status?botId=${BOT_ID}`);
      if (statusResponse.ok) {
        const statusResult = await statusResponse.json();
        console.log('üìä Bot status:', statusResult);
      } else {
        console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y bot status:', statusResponse.status);
      }
    } catch (error) {
      console.log('‚ùå L·ªói khi l·∫•y bot status:', error.message);
    }

    console.log('\n3Ô∏è‚É£ Test API endpoint account...');
    
    try {
      // Test endpoint account v·ªõi d·ªØ li·ªáu gi·∫£
      const accountResponse = await fetch('http://localhost:3000/api/trading/binance/account', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          apiKey: 'test_key',
          apiSecret: 'test_secret',
          testnet: true
        })
      });
      
      if (accountResponse.ok) {
        console.log('‚úÖ API account endpoint ho·∫°t ƒë·ªông');
      } else {
        const errorText = await accountResponse.text();
        console.log('‚ùå API account endpoint l·ªói:', accountResponse.status, errorText);
      }
    } catch (error) {
      console.log('‚ùå L·ªói khi test API account:', error.message);
    }

    console.log('\n4Ô∏è‚É£ Kh·ªüi ƒë·ªông bot...');
    
    try {
      const startResponse = await fetch(`http://localhost:3000/api/trading/bot/start`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          botId: BOT_ID
        })
      });

      if (!startResponse.ok) {
        const errorText = await startResponse.text();
        console.log('‚ùå Kh·ªüi ƒë·ªông bot th·∫•t b·∫°i:', startResponse.status, errorText);
        return;
      }

      const startResult = await startResponse.json();
      console.log('‚úÖ Bot kh·ªüi ƒë·ªông th√†nh c√¥ng:', startResult);

      // ƒê·ª£i v√† ki·ªÉm tra tr·∫°ng th√°i
      console.log('\n5Ô∏è‚É£ Theo d√µi tr·∫°ng th√°i bot...');
      
      for (let i = 1; i <= 5; i++) {
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        try {
          const statusResponse = await fetch(`http://localhost:3000/api/trading/bot/status?botId=${BOT_ID}`);
          if (statusResponse.ok) {
            const statusResult = await statusResponse.json();
            console.log(`‚è±Ô∏è L·∫ßn ${i}: Status = ${statusResult.status}`);
            
            if (statusResult.status === 'stopped') {
              console.log('üö® Bot ƒë√£ b·ªã d·ª´ng!');
              break;
            }
          }
        } catch (error) {
          console.log(`‚ùå L·ªói l·∫ßn ${i}:`, error.message);
        }
      }

    } catch (error) {
      console.log('‚ùå L·ªói khi kh·ªüi ƒë·ªông bot:', error.message);
    }

  } catch (error) {
    console.error('‚ùå L·ªói t·ªïng qu√°t:', error.message);
  }
}

console.log('üí° H∆∞·ªõng d·∫´n:');
console.log('1. ƒê·∫£m b·∫£o server ƒëang ch·∫°y: npm run dev');
console.log('2. Ch·∫°y script n√†y ƒë·ªÉ debug');
console.log('3. Ki·ªÉm tra logs trong terminal server\n');

debugBotStart().then(() => {
  console.log('\nüèÅ Debug ho√†n th√†nh!');
}).catch(console.error);
