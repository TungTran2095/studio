#!/usr/bin/env node

/**
 * Script test kh·ªüi ƒë·ªông bot v√† theo d√µi qu√° tr√¨nh
 * Gi√∫p debug v·∫•n ƒë·ªÅ bot b·ªã d·ª´ng ngay l·∫≠p t·ª©c
 */

require('dotenv').config();

const BOT_ID = 'f9e5f7b4-4160-4dae-8163-03e1f08276d1'; // Bot ID t·ª´ log tr∆∞·ªõc ƒë√≥

console.log('üöÄ Test kh·ªüi ƒë·ªông bot...\n');

async function testBotStart() {
  try {
    console.log('1Ô∏è‚É£ Kh·ªüi ƒë·ªông bot...');
    
    const startResponse = await fetch(`http://localhost:3000/api/trading/bot/start`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        botId: BOT_ID
      })
    });

    if (!startResponse.ok) {
      const errorText = await startResponse.text();
      throw new Error(`Start bot failed: ${startResponse.status} - ${errorText}`);
    }

    const startResult = await startResponse.json();
    console.log('‚úÖ Bot kh·ªüi ƒë·ªông th√†nh c√¥ng:', startResult);

    // ƒê·ª£i 2 gi√¢y ƒë·ªÉ bot c√≥ th·ªùi gian ch·∫°y
    console.log('‚è≥ ƒê·ª£i 2 gi√¢y ƒë·ªÉ bot ch·∫°y...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Ki·ªÉm tra tr·∫°ng th√°i bot
    console.log('2Ô∏è‚É£ Ki·ªÉm tra tr·∫°ng th√°i bot...');
    
    const statusResponse = await fetch(`http://localhost:3000/api/trading/bot/status?botId=${BOT_ID}`);
    
    if (!statusResponse.ok) {
      const errorText = await statusResponse.text();
      throw new Error(`Check status failed: ${statusResponse.status} - ${errorText}`);
    }

    const statusResult = await statusResponse.json();
    console.log('üìä Tr·∫°ng th√°i bot:', statusResult);

    // Ki·ªÉm tra logs g·∫ßn ƒë√¢y
    console.log('3Ô∏è‚É£ Ki·ªÉm tra logs g·∫ßn ƒë√¢y...');
    
    const logsResponse = await fetch(`http://localhost:3000/api/trading/bot/logs?botId=${BOT_ID}&limit=10`);
    
    if (logsResponse.ok) {
      const logsResult = await logsResponse.json();
      console.log('üìù Logs g·∫ßn ƒë√¢y:', logsResult);
    } else {
      console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y logs');
    }

    // ƒê·ª£i th√™m 5 gi√¢y ƒë·ªÉ xem bot c√≥ b·ªã d·ª´ng kh√¥ng
    console.log('‚è≥ ƒê·ª£i 5 gi√¢y ƒë·ªÉ theo d√µi...');
    await new Promise(resolve => setTimeout(resolve, 5000));

    // Ki·ªÉm tra tr·∫°ng th√°i l·∫ßn n·ªØa
    console.log('4Ô∏è‚É£ Ki·ªÉm tra tr·∫°ng th√°i bot l·∫ßn n·ªØa...');
    
    const finalStatusResponse = await fetch(`http://localhost:3000/api/trading/bot/status?botId=${BOT_ID}`);
    
    if (finalStatusResponse.ok) {
      const finalStatusResult = await finalStatusResponse.json();
      console.log('üìä Tr·∫°ng th√°i cu·ªëi c√πng:', finalStatusResult);
      
      if (finalStatusResult.status === 'stopped') {
        console.log('üö® Bot ƒë√£ b·ªã d·ª´ng! C√≥ th·ªÉ do:');
        console.log('  - L·ªói trong qu√° tr√¨nh kh·ªüi t·∫°o');
        console.log('  - L·ªói k·∫øt n·ªëi API');
        console.log('  - L·ªói trong strategy execution');
        console.log('  - Race condition v·ªõi database');
      }
    }

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error.message);
  }
}

// Ki·ªÉm tra xem server c√≥ ch·∫°y kh√¥ng
async function checkServerHealth() {
  try {
    const response = await fetch('http://localhost:3000/api/health');
    if (response.ok) {
      console.log('‚úÖ Server ƒëang ch·∫°y');
      return true;
    }
  } catch (error) {
    console.log('‚ùå Server kh√¥ng ch·∫°y ho·∫∑c kh√¥ng th·ªÉ k·∫øt n·ªëi');
    console.log('üí° H√£y ch·∫°y: npm run dev');
    return false;
  }
}

async function main() {
  const serverRunning = await checkServerHealth();
  if (!serverRunning) {
    process.exit(1);
  }

  await testBotStart();
  
  console.log('\nüèÅ Test ho√†n th√†nh!');
}

main().catch(console.error);

