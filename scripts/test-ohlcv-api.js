#!/usr/bin/env node

/**
 * Script test API OHLCV ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u
 * Ki·ªÉm tra xem v·∫•n ƒë·ªÅ database timeout ƒë√£ ƒë∆∞·ª£c kh·∫Øc ph·ª•c ch∆∞a
 */

require('dotenv').config();

console.log('üß™ Test API OHLCV ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u...\n');

async function testOHLCVAPI() {
  try {
    console.log('1Ô∏è‚É£ Test API OHLCV v·ªõi time range nh·ªè (1 ng√†y)...');
    
    const smallRangeResponse = await fetch('http://localhost:3000/api/research/ohlcv', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        symbol: 'BTCUSDT',
        timeframe: '5m',
        startTime: Date.now() - (24 * 60 * 60 * 1000), // 1 ng√†y tr∆∞·ªõc
        endTime: Date.now()
      })
    });
    
    if (smallRangeResponse.ok) {
      const data = await smallRangeResponse.json();
      console.log('‚úÖ API OHLCV v·ªõi time range nh·ªè ho·∫°t ƒë·ªông');
      console.log(`üìä S·ªë l∆∞·ª£ng data points: ${data.ohlcv?.length || 0}`);
    } else {
      const errorData = await smallRangeResponse.text();
      console.log('‚ùå API OHLCV v·ªõi time range nh·ªè l·ªói:', smallRangeResponse.status, errorData);
    }

    console.log('\n2Ô∏è‚É£ Test API OHLCV v·ªõi time range l·ªõn (1 th√°ng)...');
    
    const largeRangeResponse = await fetch('http://localhost:3000/api/research/ohlcv', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        symbol: 'BTCUSDT',
        timeframe: '5m',
        startTime: Date.now() - (30 * 24 * 60 * 60 * 1000), // 30 ng√†y tr∆∞·ªõc
        endTime: Date.now()
      })
    });
    
    if (largeRangeResponse.ok) {
      const data = await largeRangeResponse.json();
      console.log('‚úÖ API OHLCV v·ªõi time range l·ªõn ho·∫°t ƒë·ªông');
      console.log(`üìä S·ªë l∆∞·ª£ng data points: ${data.ohlcv?.length || 0}`);
    } else {
      const errorData = await largeRangeResponse.text();
      console.log('‚ùå API OHLCV v·ªõi time range l·ªõn l·ªói:', largeRangeResponse.status, errorData);
    }

    console.log('\n3Ô∏è‚É£ Test API OHLCV v·ªõi time range r·∫•t l·ªõn (1 nƒÉm - s·∫Ω b·ªã gi·ªõi h·∫°n)...');
    
    const veryLargeRangeResponse = await fetch('http://localhost:3000/api/research/ohlcv', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        symbol: 'BTCUSDT',
        timeframe: '5m',
        startTime: Date.now() - (365 * 24 * 60 * 60 * 1000), // 1 nƒÉm tr∆∞·ªõc
        endTime: Date.now()
      })
    });
    
    if (veryLargeRangeResponse.ok) {
      const data = await veryLargeRangeResponse.json();
      console.log('‚úÖ API OHLCV v·ªõi time range r·∫•t l·ªõn ho·∫°t ƒë·ªông (ƒë√£ ƒë∆∞·ª£c gi·ªõi h·∫°n)');
      console.log(`üìä S·ªë l∆∞·ª£ng data points: ${data.ohlcv?.length || 0}`);
      console.log('üí° Time range ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông gi·ªõi h·∫°n xu·ªëng 30 ng√†y');
    } else {
      const errorData = await veryLargeRangeResponse.text();
      console.log('‚ùå API OHLCV v·ªõi time range r·∫•t l·ªõn l·ªói:', veryLargeRangeResponse.status, errorData);
    }

    console.log('\n4Ô∏è‚É£ Test API OHLCV v·ªõi c√°c timeframe kh√°c nhau...');
    
    const timeframes = ['1m', '5m', '15m', '1h', '1d'];
    
    for (const tf of timeframes) {
      try {
        const response = await fetch('http://localhost:3000/api/research/ohlcv', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            symbol: 'BTCUSDT',
            timeframe: tf,
            startTime: Date.now() - (7 * 24 * 60 * 60 * 1000), // 7 ng√†y tr∆∞·ªõc
            endTime: Date.now()
          })
        });
        
        if (response.ok) {
          const data = await response.json();
          console.log(`‚úÖ Timeframe ${tf}: ${data.ohlcv?.length || 0} data points`);
        } else {
          console.log(`‚ùå Timeframe ${tf}: L·ªói ${response.status}`);
        }
      } catch (error) {
        console.log(`‚ùå Timeframe ${tf}: ${error.message}`);
      }
    }

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error.message);
  }
}

// Ki·ªÉm tra xem server c√≥ ch·∫°y kh√¥ng
async function checkServerHealth() {
  try {
    const response = await fetch('http://localhost:3000/api/health');
    if (response.ok) {
      console.log('‚úÖ Server ƒëang ch·∫°y');
      return true;
    }
  } catch (error) {
    console.log('‚ùå Server kh√¥ng ch·∫°y ho·∫∑c kh√¥ng th·ªÉ k·∫øt n·ªëi');
    console.log('üí° H√£y ch·∫°y: npm run dev');
    return false;
  }
}

async function main() {
  const serverRunning = await checkServerHealth();
  if (!serverRunning) {
    process.exit(1);
  }

  await testOHLCVAPI();
  
  console.log('\nüèÅ Test ho√†n th√†nh!');
  console.log('\nüìù T√≥m t·∫Øt c√°c v·∫•n ƒë·ªÅ ƒë√£ s·ª≠a:');
  console.log('1. ‚úÖ Database timeout: Th√™m limit 10000 records');
  console.log('2. ‚úÖ Time range validation: Gi·ªõi h·∫°n t·ªëi ƒëa 30 ng√†y');
  console.log('3. ‚úÖ Fallback query: Th·ª≠ v·ªõi limit nh·ªè h∆°n n·∫øu timeout');
  console.log('4. ‚úÖ Error handling: Th√¥ng b√°o l·ªói r√µ r√†ng h∆°n');
}

main().catch(console.error);
