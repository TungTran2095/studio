#!/usr/bin/env python3
"""
Test script ƒë·ªÉ ki·ªÉm tra c√°c chi·∫øn l∆∞·ª£c backtest m·ªõi
"""

import pandas as pd
import numpy as np
import sys
import os
from datetime import datetime, timedelta

# Add parent directory to Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import c√°c chi·∫øn l∆∞·ª£c
from backtest_strategies import (
    StochasticStrategy, WilliamsRStrategy, ADXStrategy, 
    IchimokuStrategy, ParabolicSARStrategy, KeltnerChannelStrategy, VWAPStrategy
)

def create_sample_data(n_days=100):
    """T·∫°o d·ªØ li·ªáu m·∫´u ƒë·ªÉ test"""
    np.random.seed(42)
    
    # T·∫°o d·ªØ li·ªáu OHLCV m·∫´u
    dates = pd.date_range(start='2023-01-01', periods=n_days, freq='D')
    
    # T·∫°o gi√° m·∫´u v·ªõi xu h∆∞·ªõng tƒÉng
    base_price = 100
    returns = np.random.normal(0.001, 0.02, n_days)
    prices = [base_price]
    
    for ret in returns[1:]:
        prices.append(prices[-1] * (1 + ret))
    
    # T·∫°o OHLCV
    data = []
    for i, (date, close) in enumerate(zip(dates, prices)):
        # T·∫°o high, low, open t·ª´ close
        volatility = abs(returns[i]) * 2
        high = close * (1 + volatility)
        low = close * (1 - volatility)
        open_price = prices[i-1] if i > 0 else close
        
        # T·∫°o volume
        volume = np.random.randint(1000, 10000)
        
        data.append({
            'open': open_price,
            'high': high,
            'low': low,
            'close': close,
            'volume': volume
        })
    
    df = pd.DataFrame(data, index=dates)
    return df

def test_strategy(strategy_class, strategy_name, config):
    """Test m·ªôt chi·∫øn l∆∞·ª£c c·ª• th·ªÉ"""
    print(f"\n{'='*50}")
    print(f"Testing {strategy_name}")
    print(f"{'='*50}")
    
    try:
        # T·∫°o d·ªØ li·ªáu m·∫´u
        data = create_sample_data(50)
        print(f"Created sample data: {len(data)} records")
        
        # Kh·ªüi t·∫°o chi·∫øn l∆∞·ª£c
        strategy = strategy_class(config)
        print(f"Strategy initialized: {strategy.__class__.__name__}")
        
        # Generate signals
        signals = strategy.generate_signals(data)
        print(f"Signals generated: {len(signals)} records")
        
        # Ki·ªÉm tra signals
        buy_signals = (signals['signal'] == 1).sum()
        sell_signals = (signals['signal'] == -1).sum()
        print(f"Buy signals: {buy_signals}, Sell signals: {sell_signals}")
        
        # Ch·∫°y backtest
        results = strategy.run_backtest(data)
        print(f"Backtest completed")
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        performance = results['performance']
        print(f"Total return: {performance['total_return']:.2f}%")
        print(f"Sharpe ratio: {performance['sharpe_ratio']:.2f}")
        print(f"Max drawdown: {performance['max_drawdown']:.2f}%")
        print(f"Total trades: {performance['total_trades']}")
        print(f"Win rate: {performance['win_rate']:.2f}%")
        
        return True
        
    except Exception as e:
        print(f"Error testing {strategy_name}: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Test t·∫•t c·∫£ c√°c chi·∫øn l∆∞·ª£c m·ªõi"""
    print("Testing New Backtest Strategies")
    print("="*50)
    
    # C·∫•u h√¨nh c∆° b·∫£n
    base_config = {
        'trading': {
            'symbol': 'BTCUSDT',
            'timeframe': '1d',
            'initialCapital': 10000,
            'positionSize': 0.1
        },
        'riskManagement': {
            'stopLoss': 2.0,
            'takeProfit': 4.0,
            'maxPositions': 1,
            'maxDrawdown': 10.0,
            'trailingStop': True,
            'trailingStopDistance': 1.0,
            'prioritizeStoploss': True,
            'useTakeProfit': True
        },
        'strategy': {}
    }
    
    # Danh s√°ch c√°c chi·∫øn l∆∞·ª£c ƒë·ªÉ test
    strategies_to_test = [
        (StochasticStrategy, 'Stochastic Strategy', {
            **base_config,
            'strategy': {
                'k_period': 14,
                'd_period': 3,
                'overbought': 80,
                'oversold': 20,
                'smooth_k': 3,
                'smooth_d': 3
            }
        }),
        (WilliamsRStrategy, 'Williams %R Strategy', {
            **base_config,
            'strategy': {
                'period': 14,
                'overbought': -20,
                'oversold': -80,
                'confirmation_periods': 2
            }
        }),
        (ADXStrategy, 'ADX Strategy', {
            **base_config,
            'strategy': {
                'adx_period': 14,
                'di_period': 14,
                'adx_threshold': 25,
                'trend_strength': 30
            }
        }),
        (IchimokuStrategy, 'Ichimoku Strategy', {
            **base_config,
            'strategy': {
                'tenkan_period': 9,
                'kijun_period': 26,
                'senkou_span_b_period': 52,
                'displacement': 26,
                'confirmation_periods': 2
            }
        }),
        (ParabolicSARStrategy, 'Parabolic SAR Strategy', {
            **base_config,
            'strategy': {
                'acceleration': 0.02,
                'maximum': 0.2,
                'confirmation_periods': 1
            }
        }),
        (KeltnerChannelStrategy, 'Keltner Channel Strategy', {
            **base_config,
            'strategy': {
                'ema_period': 20,
                'atr_period': 10,
                'multiplier': 2.0,
                'confirmation_periods': 2
            }
        }),
        (VWAPStrategy, 'VWAP Strategy', {
            **base_config,
            'strategy': {
                'vwap_period': 20,
                'std_dev_multiplier': 2.0,
                'volume_threshold': 1.5,
                'confirmation_periods': 2
            }
        })
    ]
    
    # Test t·ª´ng chi·∫øn l∆∞·ª£c
    results = []
    for strategy_class, strategy_name, config in strategies_to_test:
        success = test_strategy(strategy_class, strategy_name, config)
        results.append((strategy_name, success))
    
    # T√≥m t·∫Øt k·∫øt qu·∫£
    print(f"\n{'='*50}")
    print("TEST SUMMARY")
    print(f"{'='*50}")
    
    successful = sum(1 for _, success in results if success)
    total = len(results)
    
    for strategy_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{strategy_name}: {status}")
    
    print(f"\nOverall: {successful}/{total} strategies passed")
    
    if successful == total:
        print("üéâ All strategies are working correctly!")
    else:
        print("‚ö†Ô∏è  Some strategies have issues. Check the logs above.")

if __name__ == "__main__":
    main()

