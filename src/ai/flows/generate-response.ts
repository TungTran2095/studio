'use server';

/**
 * @fileOverview A chatbot AI agent capable of handling conversation. Trading functionality will be handled separately.
 *
 * - generateResponse - A function that handles the chatbot conversation.
 * - GenerateResponseInput - The input type for the generateResponse function.
 * - GenerateResponseOutput - The return type for the generateResponse function.
 */

import {ai} from '@/ai/ai-instance';
import { z } from 'zod';
import { 
  getMarketDataForAI, 
  getCryptoPriceForAI,
  getTechnicalAnalysisForAI,
  getBacktestResultForAI,
  getPortfolioOptimizationForAI,
  getTradingStrategyForAI,
  getAutoTradingStrategyForAI
} from '@/actions/market-data';
import { getQuantSignalText } from '@/ai/tools/quant-signals';
import { tradingExamples, tradingIntentRecognitionPrompt, portfolioAnalysisPrompt, autoTradingStrategyPrompt, ichimokuAnalysisPrompt } from '@/ai/prompt';
import { generateBalanceReport } from '@/actions/chat-balance';
import { extractAssetSymbolFromMessage, isBalanceQuery } from '@/utils/balance-utils';
import { MultiAgentSystem } from '@/agents/multi-agent-system';
import { TrendFollowingStrategy } from '@/lib/trading/strategies/trend-following';
import { SignalType } from '@/lib/trading/strategy';
import { placeBuyOrder, placeSellOrder } from '@/actions/trade';
import { placeBuyOrderTool, placeSellOrderTool } from '@/ai/tools/binance-tools';
import { workspaceTools } from '@/ai/tools/workspace-tools';

// Mock data cho candles trong tr∆∞·ªùng h·ª£p kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c
function generateMockCandles(symbol: string, length: number = 500): any[] {
  console.log(`[generateMockCandles] T·∫°o d·ªØ li·ªáu n·∫øn gi·∫£ cho ${symbol}`);
  
  // Gi√° c∆° b·∫£n d·ª±a tr√™n lo·∫°i ti·ªÅn
  const basePrice = symbol.toUpperCase().includes('BTC') ? 65000 + Math.random() * 3000 :
                 symbol.toUpperCase().includes('ETH') ? 3500 + Math.random() * 200 :
                 symbol.toUpperCase().includes('SOL') ? 140 + Math.random() * 20 :
                 symbol.toUpperCase().includes('BNB') ? 450 + Math.random() * 30 :
                 100 + Math.random() * 10;
  
  return Array.from({ length }, (_, i) => ({
    openTime: Date.now() - (length - i) * 3600000,
    closeTime: Date.now() - (length - i - 1) * 3600000,
    open: (basePrice + Math.sin(i / 50) * basePrice * 0.05).toString(),
    high: (basePrice + Math.sin(i / 50) * basePrice * 0.05 + basePrice * 0.01 + Math.random() * basePrice * 0.005).toString(),
    low: (basePrice + Math.sin(i / 50) * basePrice * 0.05 - basePrice * 0.01 - Math.random() * basePrice * 0.005).toString(),
    close: (basePrice + Math.sin(i / 50) * basePrice * 0.05 + (Math.random() * 2 - 1) * basePrice * 0.005).toString(),
    volume: (1000 + Math.random() * 500).toString(),
  }));
}

/**
 * T·∫°o d·ªØ li·ªáu Ichimoku m·∫´u khi kh√¥ng c√≥ d·ªØ li·ªáu th·∫≠t
 */
function generateMockIchimokuData(symbol: string): string {
  console.log(`[generateMockIchimokuData] T·∫°o d·ªØ li·ªáu Ichimoku m·∫´u cho ${symbol}`);
  
  // Gi√° c∆° b·∫£n d·ª±a tr√™n lo·∫°i ti·ªÅn
  const basePrice = symbol.toUpperCase().includes('BTC') ? 65000 + Math.random() * 3000 :
                   symbol.toUpperCase().includes('ETH') ? 3500 + Math.random() * 200 :
                   symbol.toUpperCase().includes('SOL') ? 140 + Math.random() * 20 :
                   symbol.toUpperCase().includes('BNB') ? 450 + Math.random() * 30 :
                   100 + Math.random() * 10;
  
  // T·∫°o c√°c gi√° tr·ªã Ichimoku v·ªõi s·ª± bi·∫øn ƒë·ªông h·ª£p l√Ω
  const tenkanSen = basePrice * (0.98 + Math.random() * 0.04);
  const kijunSen = basePrice * (0.97 + Math.random() * 0.04);
  const senkouSpanA = (tenkanSen + kijunSen) / 2;
  const senkouSpanB = basePrice * (0.95 + Math.random() * 0.05);
  const chikouSpan = basePrice * (1.01 + Math.random() * 0.02);
  
  // X√°c ƒë·ªãnh t√≠n hi·ªáu d·ª±a tr√™n c√°c gi√° tr·ªã
  const signal = tenkanSen > kijunSen && basePrice > Math.max(senkouSpanA, senkouSpanB) ? 'BUY' :
                tenkanSen < kijunSen && basePrice < Math.min(senkouSpanA, senkouSpanB) ? 'SELL' :
                'NEUTRAL';
  
  const strength = signal === 'BUY' ? Math.floor(Math.random() * 2) + 4 :
                  signal === 'SELL' ? Math.floor(Math.random() * 2) + 3 :
                  Math.floor(Math.random() * 3) + 1;
  
  // T·∫°o ph√¢n t√≠ch d·ª±a tr√™n t√≠n hi·ªáu
  const aboveCloud = basePrice > Math.max(senkouSpanA, senkouSpanB);
  const belowCloud = basePrice < Math.min(senkouSpanA, senkouSpanB);
  const inCloud = !aboveCloud && !belowCloud;
  const tenkanAboveKijun = tenkanSen > kijunSen;
  
  let analysis = '';
  if (aboveCloud) {
    analysis += `Gi√° ${symbol} ƒëang n·∫±m tr√™n m√¢y Kumo, cho th·∫•y xu h∆∞·ªõng tƒÉng. `;
  } else if (belowCloud) {
    analysis += `Gi√° ${symbol} ƒëang n·∫±m d∆∞·ªõi m√¢y Kumo, cho th·∫•y xu h∆∞·ªõng gi·∫£m. `;
  } else {
    analysis += `Gi√° ${symbol} ƒëang di chuy·ªÉn trong m√¢y Kumo, th·ªã tr∆∞·ªùng ƒëang trong giai ƒëo·∫°n t√≠ch l≈©y. `;
  }
  
  if (tenkanAboveKijun) {
    analysis += `Tenkan-sen n·∫±m tr√™n Kijun-sen, x√°c nh·∫≠n t√≠n hi·ªáu tƒÉng gi√°. `;
    if (aboveCloud) {
      analysis += `C·∫£ ba y·∫øu t·ªë (gi√° tr√™n m√¢y, Tenkan-sen tr√™n Kijun-sen, v√† Senkou Span A tr√™n Senkou Span B) ƒë·ªÅu cho th·∫•y xu h∆∞·ªõng tƒÉng m·∫°nh.`;
    }
  } else {
    analysis += `Tenkan-sen n·∫±m d∆∞·ªõi Kijun-sen, cho th·∫•y √°p l·ª±c b√°n ƒëang gia tƒÉng. `;
    if (belowCloud) {
      analysis += `C·∫£ ba y·∫øu t·ªë (gi√° d∆∞·ªõi m√¢y, Tenkan-sen d∆∞·ªõi Kijun-sen, v√† Senkou Span A d∆∞·ªõi Senkou Span B) ƒë·ªÅu cho th·∫•y xu h∆∞·ªõng gi·∫£m.`;
    }
  }
  
  // ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ v·ªõi th√¥ng b√°o r√µ r√†ng v·ªÅ d·ªØ li·ªáu m√¥ ph·ªèng
  return `‚ö†Ô∏è **L∆ØU √ù: ƒê√¢y l√† d·ªØ li·ªáu m√¥ ph·ªèng do kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API th·ªã tr∆∞·ªùng th·ª±c.**\n\n` +
    `### ICHIMOKU CLOUD (${symbol}, 1d):\n` +
    `- Gi√° hi·ªán t·∫°i: $${basePrice.toLocaleString('vi-VN', {maximumFractionDigits: 2})}\n` +
    `- Tenkan-sen: $${tenkanSen.toLocaleString('vi-VN', {maximumFractionDigits: 2})}\n` +
    `- Kijun-sen: $${kijunSen.toLocaleString('vi-VN', {maximumFractionDigits: 2})}\n` +
    `- Senkou Span A: $${senkouSpanA.toLocaleString('vi-VN', {maximumFractionDigits: 2})}\n` +
    `- Senkou Span B: $${senkouSpanB.toLocaleString('vi-VN', {maximumFractionDigits: 2})}\n` +
    `- Chikou Span: $${chikouSpan.toLocaleString('vi-VN', {maximumFractionDigits: 2})}\n\n` +
    `T√≠n hi·ªáu: ${signal === 'BUY' ? 'MUA' : signal === 'SELL' ? 'B√ÅN' : 'TRUNG L·∫¨P'} (ƒê·ªô m·∫°nh: ${strength}/5)\n\n` +
    `Nh·∫≠n ƒë·ªãnh: ${analysis}\n\n` +
    `Khuy·∫øn ngh·ªã: ${signal === 'BUY' ? 
      `Xem x√©t MUA v·ªõi m·ª©c ƒë·ªô tin c·∫≠y ${strength}/5. ${aboveCloud ? "ƒê·∫∑t stop loss d∆∞·ªõi m√¢y Kumo." : ""}` : 
      signal === 'SELL' ? 
      `Xem x√©t B√ÅN v·ªõi m·ª©c ƒë·ªô tin c·∫≠y ${strength}/5.` :
      "Ch·ªù ƒë·ª£i t√≠n hi·ªáu r√µ r√†ng h∆°n tr∆∞·ªõc khi m·ªü v·ªã th·∫ø."}\n\n` +
    `üîç *ƒê·ªÉ nh·∫≠n d·ªØ li·ªáu ch√≠nh x√°c, vui l√≤ng th·ª≠ l·∫°i khi k·∫øt n·ªëi API th·ªã tr∆∞·ªùng ƒë∆∞·ª£c kh√¥i ph·ª•c.*`;
}

/**
 * Ph√¢n t√≠ch v√† t·∫°o t√≠n hi·ªáu t·ª´ chi·∫øn l∆∞·ª£c Trend Following
 */
async function generateTrendFollowingAnalysis(symbol: string, timeframe: string = '1h'): Promise<string> {
  console.log(`[generateTrendFollowingAnalysis] Ph√¢n t√≠ch ${symbol} v·ªõi chi·∫øn l∆∞·ª£c Trend Following`);
  
  try {
    // T·∫°o chi·∫øn l∆∞·ª£c Trend Following
    const strategy = new TrendFollowingStrategy();
    
    // C·∫•u h√¨nh tham s·ªë
    strategy.updateParams({
      symbol: symbol,
      timeframe: timeframe,
      capital: 10000,
      leverageMultiplier: 1,
      fastEMA: 10,
      slowEMA: 21,
      longSMA: 50,
      rsiPeriod: 14,
      rsiOverbought: 70,
      rsiOversold: 30,
      volumeThreshold: 150,
      minTrendStrength: 0.5,
      stopLossPercentage: 2,
      takeProfitPercentage: 5,
      riskRewardRatio: 2.5
    });
    
    // T·∫°o d·ªØ li·ªáu n·∫øn m·∫´u
    const mockCandles = generateMockCandles(symbol);
    
    // Ph√¢n t√≠ch d·ªØ li·ªáu
    const signals = strategy.analyze(mockCandles);
    
    // L·∫•y t√≠n hi·ªáu m·ªõi nh·∫•t
    const latestSignal = signals.length > 0 ? signals[signals.length - 1] : null;
    
    // Ch·∫°y backtest
    const backtestResult = strategy.backtest(mockCandles);
    
    // T·∫°o ph·∫£n h·ªìi
    let response = `### Ph√¢n t√≠ch ${symbol} v·ªõi Chi·∫øn l∆∞·ª£c Trend Following\n\n`;
    
    if (latestSignal) {
      response += `**T√≠n hi·ªáu m·ªõi nh·∫•t:** ${latestSignal.type === SignalType.BUY ? 'MUA' : 
                                        latestSignal.type === SignalType.SELL ? 'B√ÅN' : 
                                        latestSignal.type === SignalType.STRONG_BUY ? 'MUA M·∫†NH' :
                                        latestSignal.type === SignalType.STRONG_SELL ? 'B√ÅN M·∫†NH' : 'GI·ªÆ'}\n`;
      response += `**ƒê·ªô m·∫°nh t√≠n hi·ªáu:** ${(latestSignal.strength * 100).toFixed(1)}%\n`;
      response += `**Gi√° t·∫°i th·ªùi ƒëi·ªÉm t√≠n hi·ªáu:** $${latestSignal.price.toLocaleString('vi-VN', {maximumFractionDigits: 2})}\n`;
      response += `**L√Ω do:** ${latestSignal.reason}\n\n`;
      
      response += `**C√°c ch·ªâ b√°o k·ªπ thu·∫≠t:**\n`;
      response += `- EMA nhanh (${strategy.getParams().fastEMA}): $${latestSignal.indicators.fastEMA}\n`;
      response += `- EMA ch·∫≠m (${strategy.getParams().slowEMA}): $${latestSignal.indicators.slowEMA}\n`;
      response += `- SMA d√†i h·∫°n (${strategy.getParams().longSMA}): $${latestSignal.indicators.longSMA}\n`;
      response += `- RSI (${strategy.getParams().rsiPeriod}): ${latestSignal.indicators.rsi}\n`;
      response += `- Kh·ªëi l∆∞·ª£ng: ${latestSignal.indicators.volume} (TB: ${latestSignal.indicators.avgVolume})\n\n`;
    } else {
      response += `**Kh√¥ng c√≥ t√≠n hi·ªáu giao d·ªãch n√†o ƒë∆∞·ª£c t·∫°o v·ªõi c√°c tham s·ªë hi·ªán t·∫°i.**\n\n`;
    }
    
    // Th√™m k·∫øt qu·∫£ backtest
    response += `**K·∫øt qu·∫£ Backtest:**\n`;
    response += `- L·ª£i nhu·∫≠n: ${backtestResult.totalReturn.toFixed(2)}%\n`;
    response += `- T·ªïng s·ªë giao d·ªãch: ${backtestResult.totalTrades}\n`;
    response += `- T·ª∑ l·ªá th·∫Øng: ${backtestResult.winRate.toFixed(2)}%\n`;
    response += `- Drawdown t·ªëi ƒëa: ${backtestResult.maxDrawdown.toFixed(2)}%\n`;
    response += `- H·ªá s·ªë l·ª£i nhu·∫≠n: ${backtestResult.profitFactor.toFixed(2)}\n`;
    
    // Th√™m khuy·∫øn ngh·ªã
    response += `\n**Khuy·∫øn ngh·ªã:**\n`;
    if (latestSignal) {
      if (latestSignal.type === SignalType.BUY || latestSignal.type === SignalType.STRONG_BUY) {
        response += `Xem x√©t MUA ${symbol} v·ªõi gi√° hi·ªán t·∫°i. ƒê·∫∑t stop loss kho·∫£ng ${latestSignal.price * 0.98} (2% d∆∞·ªõi gi√° v√†o l·ªánh).\n`;
      } else if (latestSignal.type === SignalType.SELL || latestSignal.type === SignalType.STRONG_SELL) {
        response += `Xem x√©t B√ÅN ${symbol} v·ªõi gi√° hi·ªán t·∫°i. Ch·ªù ƒë·ª£i ph·∫£n ·ª©ng gi√° v√† ƒë·∫£o chi·ªÅu xu h∆∞·ªõng tr∆∞·ªõc khi mua l·∫°i.\n`;
      } else {
        response += `Kh√¥ng c√≥ khuy·∫øn ngh·ªã giao d·ªãch r√µ r√†ng v√†o l√∫c n√†y. Ch·ªù ƒë·ª£i t√≠n hi·ªáu m·∫°nh h∆°n.\n`;
      }
    } else {
      response += `Kh√¥ng c√≥ khuy·∫øn ngh·ªã giao d·ªãch v√†o l√∫c n√†y do kh√¥ng c√≥ t√≠n hi·ªáu.\n`;
    }
    
    response += `\n‚ö†Ô∏è **L∆ØU √ù: ƒê√¢y l√† ph√¢n t√≠ch d·ª±a tr√™n d·ªØ li·ªáu m√¥ ph·ªèng. K·∫øt qu·∫£ th·ª±c t·∫ø c√≥ th·ªÉ kh√°c.**`;
    
    return response;
  } catch (error: any) {
    console.error('[generateTrendFollowingAnalysis] L·ªói khi ph√¢n t√≠ch:', error);
    return `Kh√¥ng th·ªÉ ph√¢n t√≠ch ${symbol} v·ªõi chi·∫øn l∆∞·ª£c Trend Following. L·ªói: ${error.message}`;
  }
}

// Input schema includes API credentials (for context only)
const GenerateResponseInputSchema = z.object({
  message: z.string().describe('The message from the user.'),
  chatHistory: z.array(z.object({
    role: z.enum(['user', 'bot']),
    content: z.string(),
  })).optional().describe('The chat history of the conversation.'),
  apiKey: z.string().optional().describe('Binance API key for trading.'),
  apiSecret: z.string().optional().describe('Binance API secret for trading.'),
  isTestnet: z.boolean().optional().default(false).describe('Use Binance testnet?'),
  marketData: z.string().optional().describe('D·ªØ li·ªáu th·ªã tr∆∞·ªùng hi·ªán t·∫°i'),
});

export type GenerateResponseInput = z.infer<typeof GenerateResponseInputSchema>;

const GenerateResponseOutputSchema = z.object({
  response: z.string().describe('The response from the AI.'),
  // Add trading intent detection
  tradingIntent: z.object({
    detected: z.boolean().describe('C√≥ ph√°t hi·ªán √Ω ƒë·ªãnh giao d·ªãch kh√¥ng'),
    action: z.enum(['BUY', 'SELL', 'NONE']).describe('H√†nh ƒë·ªông giao d·ªãch'),
    symbol: z.string().optional().describe('M√£ ti·ªÅn, v√≠ d·ª•: BTC, ETH'),
    quantity: z.union([z.number(), z.string()]).optional().describe('S·ªë l∆∞·ª£ng ho·∫∑c ph·∫ßn trƒÉm (v√≠ d·ª•: "50%")'),
    orderType: z.enum(['MARKET', 'LIMIT', 'NONE']).describe('Lo·∫°i l·ªánh'),
    price: z.number().optional().describe('Gi√° cho l·ªánh LIMIT'),
    portfolio: z.array(z.object({
      symbol: z.string().describe('M√£ ti·ªÅn, v√≠ d·ª•: BTC, ETH'),
      percentage: z.number().describe('Ph·∫ßn trƒÉm ph√¢n b·ªï (0-100)'),
      action: z.enum(['BUY', 'SELL', 'HOLD']).optional().describe('H√†nh ƒë·ªông cho m√£ ti·ªÅn n√†y')
    })).optional().describe('Danh m·ª•c ƒë·∫ßu t∆∞ khi giao d·ªãch nhi·ªÅu coin c√πng l√∫c'),
  }).optional(),
  // Th√™m th√¥ng tin quy·∫øt ƒë·ªãnh t·ª´ MultiAgentSystem
  agentDecision: z.object({
    id: z.string().describe('ID c·ªßa quy·∫øt ƒë·ªãnh'),
    timestamp: z.number().describe('Th·ªùi ƒëi·ªÉm ra quy·∫øt ƒë·ªãnh'),
    symbol: z.string().describe('M√£ ti·ªÅn ƒë∆∞·ª£c ph√¢n t√≠ch'),
    action: z.enum(['BUY', 'SELL', 'HOLD']).describe('H√†nh ƒë·ªông ƒë·ªÅ xu·∫•t'),
    confidence: z.number().describe('ƒê·ªô tin c·∫≠y c·ªßa quy·∫øt ƒë·ªãnh (0-100)'),
    reasoning: z.string().describe('L√Ω do cho quy·∫øt ƒë·ªãnh'),
    expectedOutcome: z.string().optional().describe('K·∫øt qu·∫£ d·ª± ki·∫øn'),
    contributingAgents: z.array(z.string()).optional().describe('C√°c agent ƒë√≥ng g√≥p v√†o quy·∫øt ƒë·ªãnh')
  }).optional(),
});

export type GenerateResponseOutput = z.infer<typeof GenerateResponseOutputSchema>;

export async function generateResponse(input: GenerateResponseInput): Promise<GenerateResponseOutput> {
    // Mask credentials for logging
    console.log("[generateResponse] Received message for AI processing.", {
      apiKeyProvided: !!input.apiKey,
      apiSecretProvided: !!input.apiSecret,
      isTestnet: input.isTestnet || false,
    });
    return generateResponseFlow(input);
}

// Comment out genkit usage to prevent build errors
// const prompt = ai.definePrompt({
//   name: 'generateResponsePrompt',
//   input: {
//     schema: GenerateResponseInputSchema,
//   },
//   output: {
//     schema: GenerateResponseOutputSchema,
//   },
//   prompt: `...`,
// });

// export const generateResponseFlow = ai.defineFlow<
//   typeof GenerateResponseInputSchema,
//   typeof GenerateResponseOutputSchema
// >({
//   name: 'generateResponseFlow',
//   inputSchema: GenerateResponseInputSchema,
//   outputSchema: GenerateResponseOutputSchema,
// }, async (input) => {

// Placeholder implementation to prevent build errors
export const generateResponseFlow = async (input: GenerateResponseInput): Promise<GenerateResponseOutput> => {
    console.log("[generateResponseFlow] Input received:", {
        message: input.message,
        chatHistoryLength: input.chatHistory?.length,
        hasApiKey: !!input.apiKey,
        hasApiSecret: !!input.apiSecret,
        isTestnet: input.isTestnet || false
    });

    // Ki·ªÉm tra n·∫øu tin nh·∫Øn li√™n quan ƒë·∫øn giao d·ªãch mua/b√°n
    if (isTradeRequest(input.message)) {
      console.log("[generateResponseFlow] Ph√°t hi·ªán y√™u c·∫ßu giao d·ªãch");
      
      // Ph√¢n t√≠ch l·ªánh giao d·ªãch
      const tradeInfo = parseTradeRequest(input.message);
      
      // X√°c ƒë·ªãnh ph·∫£n h·ªìi d·ª±a tr√™n lo·∫°i l·ªánh v√† c√≥ API key hay kh√¥ng
      if (input.apiKey && input.apiSecret) {
        try {
          // Th·ª±c hi·ªán giao d·ªãch th·ª±c t·∫ø
          const orderInput = {
            apiKey: input.apiKey,
            apiSecret: input.apiSecret,
            isTestnet: input.isTestnet || false,
            symbol: tradeInfo.symbol,
            quantity: tradeInfo.quantity || 0.001, // M·∫∑c ƒë·ªãnh 0.001 n·∫øu kh√¥ng c√≥ s·ªë l∆∞·ª£ng
            orderType: tradeInfo.orderType,
            price: tradeInfo.price // Ch·ªâ d√πng cho LIMIT order
          };
          
          console.log(`[generateResponseFlow] Th·ª±c hi·ªán l·ªánh ${tradeInfo.action === 'BUY' ? 'MUA' : 'B√ÅN'} ${tradeInfo.symbol}`);
          
          const result = tradeInfo.action === 'BUY' 
            ? await placeBuyOrder(orderInput)
            : await placeSellOrder(orderInput);
          
          if (result.success) {
            return {
              response: `‚úÖ ƒê√£ th·ª±c hi·ªán l·ªánh ${tradeInfo.action === 'BUY' ? 'MUA' : 'B√ÅN'} ${tradeInfo.quantity || ''} ${tradeInfo.symbol} th√†nh c√¥ng.
              
M√£ l·ªánh: ${result.orderId}
Lo·∫°i l·ªánh: ${tradeInfo.orderType}
              
${result.message}`
            };
          } else {
            return {
              response: `‚ùå Kh√¥ng th·ªÉ th·ª±c hi·ªán l·ªánh ${tradeInfo.action === 'BUY' ? 'MUA' : 'B√ÅN'} ${tradeInfo.quantity || ''} ${tradeInfo.symbol}.
              
L·ªói: ${result.message}
              
Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ho·∫∑c th·ª≠ l·∫°i sau.`
            };
          }
        } catch (error: any) {
          console.error('[generateResponseFlow] Error executing trade:', error);
          return {
            response: `‚ùå L·ªói khi th·ª±c hi·ªán giao d·ªãch: ${error.message || 'Kh√¥ng x√°c ƒë·ªãnh'}`
          };
        }
      } else {
        return {
          response: `T√¥i nh·∫≠n th·∫•y b·∫°n mu·ªën ${tradeInfo.action === 'BUY' ? 'mua' : 'b√°n'} ${tradeInfo.quantity || ''} ${tradeInfo.symbol || 'BTC'}, nh∆∞ng ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch, b·∫°n c·∫ßn thi·∫øt l·∫≠p API key v√† API secret c·ªßa Binance. Vui l√≤ng v√†o ph·∫ßn C√†i ƒë·∫∑t ƒë·ªÉ thi·∫øt l·∫≠p th√¥ng tin n√†y.`
        };
      }
    }

    // Ki·ªÉm tra y√™u c·∫ßu workspace (t∆∞∆°ng t√°c v·ªõi ch·ª©c nƒÉng thu th·∫≠p d·ªØ li·ªáu)
    const { isWorkspaceRequest, identifyWorkspaceAction, executeWorkspaceAction } = await import('@/ai/tools/workspace-tools');
    if (isWorkspaceRequest(input.message)) {
      console.log('[generateResponseFlow] Ph√°t hi·ªán y√™u c·∫ßu workspace');
      
      try {
        const workspaceRequest = identifyWorkspaceAction(input.message);
        if (workspaceRequest.action !== 'none') {
          const workspaceResponse = await executeWorkspaceAction(workspaceRequest.action, workspaceRequest.params);
          return {
            response: `ü§ñ **Yinsen ƒë√£ th·ª±c hi·ªán y√™u c·∫ßu workspace c·ªßa b·∫°n:**\n\n${workspaceResponse}\n\nüí° *T√¥i c√≥ th·ªÉ gi√∫p b·∫°n qu·∫£n l√Ω thu th·∫≠p d·ªØ li·ªáu, jobs, tin t·ª©c v√† d·ªØ li·ªáu real-time. H√£y h·ªèi t√¥i v·ªÅ b·∫•t k·ª≥ ch·ª©c nƒÉng workspace n√†o!*`
          };
        }
      } catch (error: any) {
        console.error('[generateResponseFlow] Workspace execution error:', error);
        return {
          response: `ü§ñ T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu workspace c·ªßa b·∫°n nh∆∞ng g·∫∑p l·ªói khi th·ª±c hi·ªán. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ki·ªÉm tra workspace manually.\n\nL·ªói: ${error?.message || 'Unknown error'}`
        };
      }
    }

    // Ki·ªÉm tra xem c√≥ ph·∫£i l√† c√¢u h·ªèi v·ªÅ ch·ªâ b√°o k·ªπ thu·∫≠t kh√¥ng
    if (isTechnicalIndicatorQuery(input.message)) {
      const symbol = detectCryptoSymbol(input.message);
      const indicator = detectTechnicalIndicator(input.message);
      if (symbol && indicator) {
        console.log(`[generateResponseFlow] Ph√°t hi·ªán c√¢u h·ªèi v·ªÅ ch·ªâ b√°o k·ªπ thu·∫≠t ${indicator} cho ${symbol}`);
        return {
          response: await generateTechnicalIndicatorResponse(symbol, indicator)
        };
      }
    }

    // Ki·ªÉm tra xem c√≥ ph·∫£i l√† c√¢u h·ªèi v·ªÅ gi√° ti·ªÅn ƒëi·ªán t·ª≠ kh√¥ng
    if (isCryptoPriceQuery(input.message)) {
      const symbol = detectCryptoSymbol(input.message);
      if (symbol) {
        console.log(`[generateResponseFlow] Ph√°t hi·ªán c√¢u h·ªèi v·ªÅ gi√° ${symbol}`);
        return {
          response: await generateCryptoPriceResponse(symbol)
        };
      }
    }

    // Ki·ªÉm tra y√™u c·∫ßu v·ªÅ Trend Following Strategy
    if (isTrendFollowingRequest(input.message)) {
      console.log("[generateResponseFlow] Ph√°t hi·ªán y√™u c·∫ßu ph√¢n t√≠ch Trend Following");
      const symbol = detectCryptoSymbol(input.message) || 'BTC';
      const timeframe = detectTimeframe(input.message) || '1h';
      
      try {
        const trendAnalysis = await generateTrendFollowingAnalysis(symbol, timeframe);
        return {
          response: trendAnalysis
        };
      } catch (error: any) {
        console.error("[generateResponseFlow] L·ªói khi ph√¢n t√≠ch Trend Following:", error);
        // Ti·∫øp t·ª•c v·ªõi lu·ªìng x·ª≠ l√Ω th√¥ng th∆∞·ªùng n·∫øu c√≥ l·ªói
      }
    }

    // Ki·ªÉm tra n·∫øu l√† y√™u c·∫ßu ph√¢n t√≠ch ƒë·∫ßu t∆∞
    if (isInvestmentQuery(input.message)) {
      const symbol = extractSymbolFromMessage(input.message);
      
      if (symbol) {
        console.log(`[generateResponseFlow] Ph√°t hi·ªán y√™u c·∫ßu ph√¢n t√≠ch ƒë·∫ßu t∆∞ cho ${symbol}`);
        
        try {
          // L·∫•y ph√¢n t√≠ch t·ª´ AI Agent
          const agentResponse = await processAgentResponse(symbol, input.message);
          
          // Tr·∫£ v·ªÅ ph·∫£n h·ªìi t·ª´ Agent v·ªõi ƒë·ªãnh d·∫°ng ƒë√∫ng
          return {
            response: agentResponse
          };
        } catch (error) {
          console.error('[generateResponseFlow] L·ªói khi g·ªçi AI Agent:', error);
          // Ti·∫øp t·ª•c v·ªõi lu·ªìng x·ª≠ l√Ω th√¥ng th∆∞·ªùng n·∫øu c√≥ l·ªói
        }
      }
    }

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒëang h·ªèi v·ªÅ s·ªë d∆∞ t√†i s·∫£n kh√¥ng
    if (input.apiKey && input.apiSecret && await isBalanceQuery(input.message)) {
      console.log('[generateResponseFlow] Ph√°t hi·ªán c√¢u h·ªèi v·ªÅ s·ªë d∆∞ t√†i s·∫£n');
      
      try {
        // Tr√≠ch xu·∫•t symbol c·ª• th·ªÉ n·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ m·ªôt t√†i s·∫£n c·ª• th·ªÉ
        const assetSymbol = await extractAssetSymbolFromMessage(input.message);
        
        // T·∫°o b√°o c√°o s·ªë d∆∞
        const balanceReport = await generateBalanceReport({
          apiKey: input.apiKey!,
          apiSecret: input.apiSecret!,
          isTestnet: input.isTestnet || false,
          symbol: assetSymbol
        });
        
        return { response: balanceReport.message };
      } catch (error: any) {
        console.error('[generateResponseFlow] Error generating balance report:', error);
        return {
          response: `T√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin s·ªë d∆∞ c·ªßa b·∫°n. L·ªói: ${error.message}`
        };
      }
    }

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒëang h·ªèi v·ªÅ ph√¢n t√≠ch Ichimoku
    if (isIchimokuRequest(input.message)) {
      console.log('[generateResponseFlow] Ph√°t hi·ªán y√™u c·∫ßu ph√¢n t√≠ch Ichimoku');
      
      // Tr√≠ch xu·∫•t symbol t·ª´ tin nh·∫Øn
      const symbol = detectCryptoSymbol(input.message) || 'BTC';
      
      try {
        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ ph√¢n t√≠ch m·∫´u Ichimoku cho symbol
        return {
          response: generateMockIchimokuData(symbol)
        };
      } catch (error: any) {
        console.error('[generateResponseFlow] L·ªói khi t·∫°o d·ªØ li·ªáu Ichimoku:', error);
        // Ti·∫øp t·ª•c v·ªõi lu·ªìng x·ª≠ l√Ω th√¥ng th∆∞·ªùng n·∫øu c√≥ l·ªói
      }
    }

    // Th√™m th√¥ng tin th·ªã tr∆∞·ªùng n·∫øu c·∫ßn
    let modifiedInput = { ...input };
    if (needsMarketInformation(input.message)) {
      try {
        // L·∫•y d·ªØ li·ªáu th·ªã tr∆∞·ªùng hi·ªán t·∫°i
        modifiedInput.marketData = await getMarketDataForAI();
      } catch (error: any) {
        console.error('[generateResponseFlow] Error fetching market data:', error);
        modifiedInput.marketData = "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªã tr∆∞·ªùng v√†o l√∫c n√†y.";
      }
    }

    // Identify what type of content the user is requesting
    const contentRequest = identifyContentRequest(input.message);
    
    // Handle specific content request if any
    if (contentRequest.type !== 'none') {
      console.log(`[generateResponseFlow] Ph√°t hi·ªán y√™u c·∫ßu n·ªôi dung: ${contentRequest.type}`);
      
      try {
        let specializedResponse = '';
        
        switch (contentRequest.type) {
          case 'technical_analysis':
            if (contentRequest.symbol) {
              specializedResponse = await getTechnicalAnalysisForAI(contentRequest.symbol, contentRequest.timeframe || '1d');
            }
            break;
            
          case 'backtest':
            if (contentRequest.symbol && contentRequest.strategy) {
              specializedResponse = await getBacktestResultForAI(
                contentRequest.symbol,
                contentRequest.timeframe || '1d',
                contentRequest.startDate || getDefaultStartDate(),
                contentRequest.endDate || new Date().toISOString(),
                contentRequest.strategy,
                contentRequest.initialCapital || 10000,
                input.apiKey,
                input.apiSecret,
                input.isTestnet || false
              );
            }
            break;
            
          case 'portfolio_optimization':
            if (contentRequest.symbols && contentRequest.symbols.length > 0) {
              specializedResponse = await getPortfolioOptimizationForAI(
                contentRequest.symbols.map(s => s.endsWith('USDT') ? s : `${s}USDT`),
                contentRequest.riskTolerance || 'medium',
                contentRequest.timeframe || '1d',
                contentRequest.lookbackPeriod || 60,
                input.apiKey,
                input.apiSecret,
                input.isTestnet || false
              );
            }
            break;
            
          case 'trading_strategy':
            // H√†m nh·∫≠n tham s·ªë investmentAmount v√† riskTolerance; d√πng m·∫∑c ƒë·ªãnh
            specializedResponse = await getTradingStrategyForAI(1000, 'medium', input.apiKey, input.apiSecret, input.isTestnet || false);
            break;
            
          case 'auto_trading_strategy':
            if (contentRequest.symbol) {
              specializedResponse = await getAutoTradingStrategyForAI(
                'Auto Strategy',
                contentRequest.symbol,
                contentRequest.timeframe || '1h',
                'medium',
                [],
                input.apiKey,
                input.apiSecret,
                input.isTestnet || false
              );
            }
            break;
            
          case 'quant_signal':
            if (contentRequest.symbol) {
              specializedResponse = await getQuantSignalText(
                input.apiKey || '',
                input.apiSecret || '',
                contentRequest.symbol,
                contentRequest.timeframe || '1h',
                input.isTestnet || false
              );
            }
            break;
            
          case 'market_data':
            specializedResponse = await getMarketDataForAI();
            break;
        }
        
        if (specializedResponse) {
          return { response: specializedResponse };
        }
      } catch (error: any) {
        console.error(`[generateResponseFlow] Error handling ${contentRequest.type} request:`, error);
        // Continue with standard flow if specialized handling failed
      }
    }

    // Standard flow - use the prompt to generate a response
    try {
      // X·ª≠ l√Ω y√™u c·∫ßu th√¥ng qua m·ªôt c√°ch ti·∫øp c·∫≠n kh√°c
      // Thay v√¨ s·ª≠ d·ª•ng prompt, t·∫°o ph·∫£n h·ªìi c·ª©ng ƒë·ªÉ ƒë·∫£m b·∫£o h·ªá th·ªëng ho·∫°t ƒë·ªông
      const defaultResponse = {
        response: `Xin ch√†o! T√¥i l√† YINSEN, tr·ª£ l√Ω giao d·ªãch ti·ªÅn ƒëi·ªán t·ª≠ c·ªßa b·∫°n.
        
T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi c√°c kh·∫£ nƒÉng sau:

1. **Ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† gi√° c·∫£ ti·ªÅn ƒëi·ªán t·ª≠** - T√¥i c√≥ th·ªÉ cung c·∫•p th√¥ng tin v·ªÅ gi√° Bitcoin, Ethereum v√† c√°c altcoin kh√°c
2. **Ph√¢n t√≠ch k·ªπ thu·∫≠t** - S·ª≠ d·ª•ng c√°c ch·ªâ b√°o nh∆∞ RSI, MACD, Bollinger Bands, v√† Ichimoku Cloud
3. **Chi·∫øn l∆∞·ª£c giao d·ªãch** - Trend Following, Momentum, Mean Reversion
4. **T·ªëi ∆∞u h√≥a danh m·ª•c ƒë·∫ßu t∆∞** - Ph√¢n b·ªï t√†i s·∫£n v√† qu·∫£n l√Ω r·ªßi ro
5. **Backtest chi·∫øn l∆∞·ª£c** - Ki·ªÉm tra hi·ªáu su·∫•t c√°c chi·∫øn l∆∞·ª£c trong qu√° kh·ª©
6. **T√≠n hi·ªáu giao d·ªãch** - ƒê∆∞a ra c√°c t√≠n hi·ªáu mua/b√°n d·ª±a tr√™n ph√¢n t√≠ch k·ªπ thu·∫≠t
7. **Th√¥ng tin v·ªÅ th·ªã tr∆∞·ªùng** - C·∫≠p nh·∫≠t xu h∆∞·ªõng th·ªã tr∆∞·ªùng hi·ªán t·∫°i
8. **Th·ª±c hi·ªán giao d·ªãch** - ƒê·∫∑t l·ªánh mua ho·∫∑c b√°n tr√™n Binance (y√™u c·∫ßu API key v√† secret)

Vui l√≤ng cho t√¥i bi·∫øt b·∫°n c·∫ßn h·ªó tr·ª£ g√¨?`
      };
      
      return defaultResponse;
    } catch (error) {
      console.error('[generateResponseFlow] Error:', error);
      return { 
        response: `Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n v√†o l√∫c n√†y. L·ªói: ${error instanceof Error ? error.message : 'Kh√¥ng x√°c ƒë·ªãnh'}`
      };
    }
};

/**
 * Ki·ªÉm tra xem tin nh·∫Øn c√≥ ph·∫£i l√† y√™u c·∫ßu giao d·ªãch mua/b√°n kh√¥ng
 */
function isTradeRequest(message: string): boolean {
  const normalizedMessage = message.toLowerCase();
  
  // C√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn giao d·ªãch
  const tradeKeywords = [
    'mua', 'buy', 'b√°n', 'sell', 'market', 'limit', 
    'l·ªánh', 'order', 'giao d·ªãch', 'trade'
  ];
  
  // Ki·ªÉm tra c√≥ √≠t nh·∫•t 1 t·ª´ kh√≥a giao d·ªãch
  return tradeKeywords.some(keyword => normalizedMessage.includes(keyword));
}

/**
 * Ph√¢n t√≠ch y√™u c·∫ßu giao d·ªãch t·ª´ tin nh·∫Øn
 */
function parseTradeRequest(message: string): {
  action: 'BUY' | 'SELL';
  orderType: 'MARKET' | 'LIMIT';
  symbol: string;
  quantity?: number;
  price?: number;
} {
  const normalizedMessage = message.toLowerCase();
  
  // X√°c ƒë·ªãnh h√†nh ƒë·ªông
  const action = normalizedMessage.includes('b√°n') || normalizedMessage.includes('sell') 
    ? 'SELL' 
    : 'BUY';
  
  // X√°c ƒë·ªãnh lo·∫°i l·ªánh
  const orderType = normalizedMessage.includes('limit') || normalizedMessage.includes('gi·ªõi h·∫°n')
    ? 'LIMIT'
    : 'MARKET';
  
  // X√°c ƒë·ªãnh m√£ ti·ªÅn
  const cryptoSymbol = detectCryptoSymbol(message) || 'BTC';
  const symbol = cryptoSymbol.endsWith('USDT') ? cryptoSymbol : `${cryptoSymbol}USDT`;
  
  // X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng v√† gi√° (n·∫øu c√≥)
  let quantity: number | undefined;
  let price: number | undefined;
  
  const numbers = normalizedMessage.match(/\d+(\.\d+)?/g);
  if (numbers && numbers.length > 0) {
    quantity = parseFloat(numbers[0]);
    
    // N·∫øu c√≥ hai s·ªë v√† l√† l·ªánh LIMIT, s·ªë th·ª© hai c√≥ th·ªÉ l√† gi√°
    if (numbers.length > 1 && orderType === 'LIMIT') {
      price = parseFloat(numbers[1]);
    }
  }
  
  return {
    action,
    orderType,
    symbol,
    quantity,
    price
  };
}

/**
 * Ki·ªÉm tra xem tin nh·∫Øn c√≥ y√™u c·∫ßu ph√¢n t√≠ch Ichimoku kh√¥ng
 */
function isIchimokuRequest(message: string): boolean {
  const ichimokuKeywords = [
    'ichimoku', 'm√¢y kumo', 'kumo', 'tenkan', 'kijun', 'senkou span', 'chikou'
  ];
  
  const lowercaseMessage = message.toLowerCase();
  return ichimokuKeywords.some(keyword => lowercaseMessage.includes(keyword));
}

/**
 * Ki·ªÉm tra xem tin nh·∫Øn c√≥ y√™u c·∫ßu ph√¢n t√≠ch Trend Following kh√¥ng
 */
function isTrendFollowingRequest(message: string): boolean {
  const trendFollowingKeywords = [
    'trend following', 'theo xu h∆∞·ªõng', 'xu huong', 'trend strategy', 
    'chi·∫øn l∆∞·ª£c xu h∆∞·ªõng', 'chien luoc xu huong', 'theo trend', 
    'ema cross', 'c·∫Øt ema', 'cat ema', 'ema + rsi', 'ema rsi'
  ];
  
  const lowercaseMessage = message.toLowerCase();
  return trendFollowingKeywords.some(keyword => lowercaseMessage.includes(keyword));
}

interface ContentRequest {
  type: 'technical_analysis' | 'backtest' | 'portfolio_optimization' | 'trading_strategy' | 'market_data' | 'quant_signal' | 'auto_trading_strategy' | 'none';
  symbol?: string;
  timeframe?: string;
  startDate?: string;
  endDate?: string;
  strategy?: 'sma_crossover' | 'macd' | 'bollinger_bands' | 'rsi';
  initialCapital?: number;
  symbols?: string[];
  riskTolerance?: 'low' | 'medium' | 'high';
  lookbackPeriod?: number;
  investmentAmount?: number;
}

/**
 * Ph√°t hi·ªán m√£ ti·ªÅn ƒëi·ªán t·ª≠ t·ª´ tin nh·∫Øn
 */
function detectCryptoSymbol(message: string): string | null {
  console.log(`[detectCryptoSymbol] Ph√¢n t√≠ch: "${message}"`);
  
  // Chuy·ªÉn ƒë·ªïi sang ch·ªØ th∆∞·ªùng
  const lowerMessage = message.toLowerCase();
  
  // Ki·ªÉm tra nhanh cho c√°c tr∆∞·ªùng h·ª£p ph·ªï bi·∫øn nh·∫•t
  if (lowerMessage.includes('btc') || lowerMessage.includes('bitcoin')) {
    console.log('[detectCryptoSymbol] Ph√°t hi·ªán BTC/Bitcoin trong tin nh·∫Øn');
    return 'BTC';
  }
  
  if (lowerMessage.includes('eth') || lowerMessage.includes('ethereum')) {
    console.log(`[detectCryptoSymbol] Ph√°t hi·ªán ETH`);
    return 'ETH';
  }
  
  // Bi·ªÉu th·ª©c ch√≠nh quy ƒë·ªÉ ph√°t hi·ªán m√£ ti·ªÅn ph·ªï bi·∫øn
  const symbolPatterns = [
    /\b(btc|bitcoin)\b/i,
    /\b(eth|ethereum)\b/i,
    /\b(bnb|binance coin)\b/i,
    /\b(sol|solana)\b/i,
    /\b(xrp|ripple)\b/i,
    /\b(doge|dogecoin)\b/i,
    /\b(ada|cardano)\b/i,
    /\b(dot|polkadot)\b/i,
    /\b(link|chainlink)\b/i,
    /\b(avax|avalanche)\b/i,
    /\b(matic|polygon)\b/i,
    /\b(shib|shiba inu)\b/i,
    /\b(uni|uniswap)\b/i,
    /\b(ltc|litecoin)\b/i,
    /\b(atom|cosmos)\b/i
  ];
  
  // Map ƒë·ªÉ chuy·ªÉn ƒë·ªïi t·ª´ t√™n ƒë·∫ßy ƒë·ªß sang m√£
  const symbolMap: Record<string, string> = {
    'bitcoin': 'BTC',
    'ethereum': 'ETH',
    'binance coin': 'BNB',
    'solana': 'SOL',
    'ripple': 'XRP',
    'dogecoin': 'DOGE',
    'cardano': 'ADA',
    'polkadot': 'DOT',
    'chainlink': 'LINK',
    'avalanche': 'AVAX',
    'polygon': 'MATIC',
    'shiba inu': 'SHIB',
    'uniswap': 'UNI',
    'litecoin': 'LTC',
    'cosmos': 'ATOM'
  };
  
  // Ki·ªÉm tra v·ªõi t·ª´ng pattern
  for (const pattern of symbolPatterns) {
    const match = lowerMessage.match(pattern);
    if (match && match[1]) {
      // Ki·ªÉm tra n·∫øu ƒë√≥ l√† t√™n ƒë·∫ßy ƒë·ªß, chuy·ªÉn ƒë·ªïi th√†nh m√£
      if (symbolMap[match[1]]) {
        console.log(`[detectCryptoSymbol] Ph√°t hi·ªán ${match[1]} -> ${symbolMap[match[1]]}`);
        return symbolMap[match[1]];
      }
      // N·∫øu kh√¥ng, tr·∫£ v·ªÅ m√£ ƒë√£ t√¨m th·∫•y (vi·∫øt hoa)
      console.log(`[detectCryptoSymbol] Ph√°t hi·ªán ${match[1].toUpperCase()}`);
      return match[1].toUpperCase();
    }
  }
  
  // N·∫øu tin nh·∫Øn b·∫Øt ƒë·∫ßu v·ªõi t√™n ti·ªÅn t·ªá nh∆∞ng kh√¥ng c√≥ kho·∫£ng c√°ch (v√≠ d·ª•: "bitcoin c√≥ n√™n mua")
  for (const [name, symbol] of Object.entries(symbolMap)) {
    if (lowerMessage.startsWith(name)) {
      console.log(`[detectCryptoSymbol] Ph√°t hi·ªán ${name} (·ªü ƒë·∫ßu c√¢u) -> ${symbol}`);
      return symbol;
    }
  }
  
  // Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát cho "btc" ho·∫∑c "eth" ·ªü ƒë·∫ßu c√¢u
  if (lowerMessage.startsWith('btc')) {
    console.log(`[detectCryptoSymbol] Ph√°t hi·ªán BTC ·ªü ƒë·∫ßu c√¢u`);
    return 'BTC';
  }
  if (lowerMessage.startsWith('eth')) {
    console.log(`[detectCryptoSymbol] Ph√°t hi·ªán ETH ·ªü ƒë·∫ßu c√¢u`);
    return 'ETH';
  }
  
  console.log(`[detectCryptoSymbol] Kh√¥ng ph√°t hi·ªán ti·ªÅn ƒëi·ªán t·ª≠`);
  return null;
}

/**
 * Ph√°t hi·ªán khung th·ªùi gian t·ª´ tin nh·∫Øn
 */
function detectTimeframe(message: string): string | undefined {
  // Chuy·ªÉn ƒë·ªïi sang ch·ªØ th∆∞·ªùng
  const normalizedMessage = message.toLowerCase();
  
  if (normalizedMessage.includes('15m') || normalizedMessage.includes('15 ph√∫t') || normalizedMessage.includes('15 phut')) {
    return '15m';
  } else if (normalizedMessage.includes('30m') || normalizedMessage.includes('30 ph√∫t') || normalizedMessage.includes('30 phut')) {
    return '30m';
  } else if (normalizedMessage.includes('1h') || normalizedMessage.includes('1 gi·ªù') || normalizedMessage.includes('1 gio')) {
    return '1h';
  } else if (normalizedMessage.includes('4h') || normalizedMessage.includes('4 gi·ªù') || normalizedMessage.includes('4 gio')) {
    return '4h';
  } else if (normalizedMessage.includes('1d') || normalizedMessage.includes('ng√†y') || normalizedMessage.includes('ngay') || normalizedMessage.includes('day')) {
    return '1d';
  } else if (normalizedMessage.includes('1w') || normalizedMessage.includes('week') || normalizedMessage.includes('tu·∫ßn') || normalizedMessage.includes('tuan')) {
    return '1w';
  }
  
  return undefined;
}

/**
 * Ki·ªÉm tra xem tin nh·∫Øn c√≥ c·∫ßn th√¥ng tin th·ªã tr∆∞·ªùng hay kh√¥ng
 */
function needsMarketInformation(message: string): boolean {
  // Chuy·ªÉn ƒë·ªïi sang ch·ªØ th∆∞·ªùng v√† lo·∫°i b·ªè d·∫•u
  const normalizedMessage = message.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  
  // C√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn th·ªã tr∆∞·ªùng
  const marketKeywords = [
    'thi truong', 'th·ªã tr∆∞·ªùng', 'gi√°', 'gia', 
    'btc', 'bitcoin', 'eth', 'ethereum', 'usdt', 'binance',
    'tƒÉng', 'tang', 'gi·∫£m', 'giam', 'bi·∫øn ƒë·ªông', 'bien dong',
    'chart', 'bi·ªÉu ƒë·ªì', 'bieu do', 'price', 'volume', 'kh·ªëi l∆∞·ª£ng', 'khoi luong'
  ];
  
  // Ki·ªÉm tra n·∫øu tin nh·∫Øn ch·ª©a b·∫•t k·ª≥ t·ª´ kh√≥a n√†o
  return marketKeywords.some(keyword => normalizedMessage.includes(keyword));
}

/**
 * Ki·ªÉm tra xem tin nh·∫Øn c√≥ y√™u c·∫ßu ph√¢n t√≠ch ƒë·∫ßu t∆∞ kh√¥ng
 */
function isInvestmentQuery(message: string): boolean {
  const investmentKeywords = [
    'ƒë·∫ßu t∆∞', 'n√™n mua', 'n√™n b√°n', 'giao d·ªãch', 'trading', 'khi n√†o mua', 'khi n√†o b√°n',
    'gi√° s·∫Ω', 'th·ªã tr∆∞·ªùng', 'xu h∆∞·ªõng', 'khuy·∫øn ngh·ªã', 'recommendation', 'trade', 'buy', 'sell'
  ];
  
  const lowercaseMessage = message.toLowerCase();
  return investmentKeywords.some(keyword => lowercaseMessage.includes(keyword));
}

/**
 * Tr√≠ch xu·∫•t symbol t·ª´ tin nh·∫Øn
 */
function extractSymbolFromMessage(message: string): string | null {
  // T√¨m c√°c m√£ ti·ªÅn ph·ªï bi·∫øn
  const cryptoRegex = /\b(BTC|ETH|XRP|SOL|ADA|DOT|AVAX|BNB)(?:\/USD|\s|$)/i;
  const match = message.match(cryptoRegex);
  
  if (match) {
    return match[1].toUpperCase();
  }
  
  return null;
}

/**
 * L·∫•y ng√†y trong qu√° kh·ª© t·ª´ hi·ªán t·∫°i
 */
function getDateBefore(days: number): string {
  const date = new Date();
  date.setDate(date.getDate() - days);
  return date.toISOString();
}

/**
 * L·∫•y ng√†y m·∫∑c ƒë·ªãnh ƒë·ªÉ b·∫Øt ƒë·∫ßu backtesting (3 th√°ng tr∆∞·ªõc)
 */
function getDefaultStartDate(): string {
  return getDateBefore(90);
}

/**
 * ƒê·ªãnh danh lo·∫°i y√™u c·∫ßu n·ªôi dung t·ª´ tin nh·∫Øn
 */
function identifyContentRequest(message: string): ContentRequest {
  // Chuy·ªÉn ƒë·ªïi sang ch·ªØ th∆∞·ªùng
  const normalizedMessage = message.toLowerCase();
  
  // Ki·ªÉm tra c√°c lo·∫°i y√™u c·∫ßu ph·ªï bi·∫øn
  if (normalizedMessage.includes('technical analysis') || 
      normalizedMessage.includes('ph√¢n t√≠ch k·ªπ thu·∫≠t') || 
      normalizedMessage.includes('phan tich ky thuat')) {
    return {
      type: 'technical_analysis',
      symbol: detectCryptoSymbol(message) || 'BTC',
      timeframe: detectTimeframe(message) || '1d'
    };
  }
  
  if (normalizedMessage.includes('backtest') || 
      normalizedMessage.includes('ki·ªÉm tra chi·∫øn l∆∞·ª£c') ||
      normalizedMessage.includes('kiem tra chien luoc')) {
    return {
      type: 'backtest',
      symbol: detectCryptoSymbol(message) || 'BTC',
      timeframe: detectTimeframe(message) || '1d',
      strategy: 'sma_crossover'
    };
  }
  
  if (normalizedMessage.includes('portfolio') || 
      normalizedMessage.includes('danh m·ª•c') ||
      normalizedMessage.includes('danh muc')) {
    return {
      type: 'portfolio_optimization',
      symbols: ['BTC', 'ETH', 'BNB', 'SOL', 'ADA'],
      riskTolerance: 'medium'
    };
  }
  
  if (normalizedMessage.includes('trading strategy') || 
      normalizedMessage.includes('chi·∫øn l∆∞·ª£c giao d·ªãch') ||
      normalizedMessage.includes('chien luoc giao dich')) {
    return {
      type: 'trading_strategy',
      symbol: detectCryptoSymbol(message) || 'BTC'
    };
  }
  
  if (normalizedMessage.includes('market data') || 
      normalizedMessage.includes('d·ªØ li·ªáu th·ªã tr∆∞·ªùng') ||
      normalizedMessage.includes('du lieu thi truong')) {
    return {
      type: 'market_data'
    };
  }
  
  if (normalizedMessage.includes('quant signal') || 
      normalizedMessage.includes('t√≠n hi·ªáu quant') ||
      normalizedMessage.includes('tin hieu quant')) {
    return {
      type: 'quant_signal',
      symbol: detectCryptoSymbol(message) || 'BTC'
    };
  }
  
  if (normalizedMessage.includes('auto trading') || 
      normalizedMessage.includes('giao d·ªãch t·ª± ƒë·ªông') ||
      normalizedMessage.includes('giao dich tu dong')) {
    return {
      type: 'auto_trading_strategy',
      symbol: detectCryptoSymbol(message) || 'BTC'
    };
  }
  
  return { type: 'none' };
}

/**
 * X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ Agent v√† ƒë·ªãnh d·∫°ng l·∫°i ƒë·ªÉ tr·∫£ v·ªÅ
 */
async function processAgentResponse(symbol: string, userMessage: string): Promise<string> {
  try {
    const response = await fetch('/api/agent/analyze', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        symbol,
        type: 'recommendation'
      }),
    });
    
    if (!response.ok) {
      throw new Error(`API responded with status: ${response.status}`);
    }
    
    const result = await response.json();
    
    if (!result.success) {
      return `T√¥i kh√¥ng th·ªÉ ph√¢n t√≠ch ${symbol} v√†o l√∫c n√†y. L·ªói: ${result.error || 'Kh√¥ng x√°c ƒë·ªãnh'}`;
    }
    
    const data = result.data;
    
    // ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi d·ªÖ ƒë·ªçc
    let formattedResponse = `### Ph√¢n t√≠ch ${symbol} t·ª´ AI Agent\n\n`;
    
    formattedResponse += `**Khuy·∫øn ngh·ªã:** ${translateRecommendation(data.recommendation)} ${symbol} (ƒê·ªô tin c·∫≠y: ${data.confidence}%)\n\n`;
    
    formattedResponse += `**ƒêi·ªÅu ki·ªán th·ªã tr∆∞·ªùng:** ${translateMarketCondition(data.marketCondition)}\n\n`;
    
    formattedResponse += `**Ph√¢n t√≠ch:**\n${data.reasoning}\n\n`;
    
    formattedResponse += `**D·ª± b√°o:**\n`;
    formattedResponse += `- Ti·ªÅm nƒÉng l·ª£i nhu·∫≠n: ${data.expectedProfit}/100\n`;
    formattedResponse += `- M·ª©c ƒë·ªô r·ªßi ro: ${data.risk}/100\n`;
    formattedResponse += `- Khung th·ªùi gian: ${translateTimeframe(data.timeframe)}\n\n`;
    
    formattedResponse += `*Ph√¢n t√≠ch ƒë∆∞·ª£c t·∫°o l√∫c: ${new Date(data.timestamp).toLocaleString('vi-VN')}*\n\n`;
    
    formattedResponse += `*L∆∞u √Ω: ƒê√¢y ch·ªâ l√† ph√¢n t√≠ch t·ª± ƒë·ªông, kh√¥ng ph·∫£i l·ªùi khuy√™n ƒë·∫ßu t∆∞.*`;
    
    return formattedResponse;
  } catch (error: any) {
    console.error('Error calling agent API:', error);
    return `T√¥i kh√¥ng th·ªÉ t·∫°o ph√¢n t√≠ch cho ${symbol} v√†o l√∫c n√†y. L·ªói: ${error.message}`;
  }
}

/**
 * D·ªãch khuy·∫øn ngh·ªã sang ti·∫øng Vi·ªát
 */
function translateRecommendation(recommendation: string): string {
  switch (recommendation.toUpperCase()) {
    case 'BUY': return 'MUA';
    case 'SELL': return 'B√ÅN';
    case 'HOLD': return 'GI·ªÆ';
    default: return recommendation;
  }
}

/**
 * D·ªãch ƒëi·ªÅu ki·ªán th·ªã tr∆∞·ªùng sang ti·∫øng Vi·ªát
 */
function translateMarketCondition(condition: string): string {
  switch (condition.toLowerCase()) {
    case 'bullish': return 'Xu h∆∞·ªõng tƒÉng';
    case 'bearish': return 'Xu h∆∞·ªõng gi·∫£m';
    case 'sideways': return 'ƒêi ngang';
    default: return 'Kh√¥ng x√°c ƒë·ªãnh';
  }
}

/**
 * D·ªãch khung th·ªùi gian sang ti·∫øng Vi·ªát
 */
function translateTimeframe(timeframe: string): string {
  switch (timeframe.toLowerCase()) {
    case 'short': return 'Ng·∫Øn h·∫°n (v√†i gi·ªù ƒë·∫øn v√†i ng√†y)';
    case 'medium': return 'Trung h·∫°n (v√†i ng√†y ƒë·∫øn v√†i tu·∫ßn)';
    case 'long': return 'D√†i h·∫°n (v√†i tu·∫ßn ƒë·∫øn v√†i th√°ng)';
    default: return timeframe;
  }
}

/**
 * Ki·ªÉm tra xem tin nh·∫Øn c√≥ h·ªèi v·ªÅ gi√° ti·ªÅn ƒëi·ªán t·ª≠ kh√¥ng
 */
function isCryptoPriceQuery(message: string): boolean {
  const priceKeywords = [
    'gi√°', 'price', 'bao nhi√™u', 'gi√° tr·ªã', 'value', 
    'hi·ªán t·∫°i', 'hi·ªán nay', 'b√¢y gi·ªù', 'g·∫ßn ƒë√¢y'
  ];
  
  const lowercaseMessage = message.toLowerCase();
  return priceKeywords.some(keyword => lowercaseMessage.includes(keyword)) && 
         detectCryptoSymbol(message) !== null;
}

/**
 * Ki·ªÉm tra xem tin nh·∫Øn c√≥ h·ªèi v·ªÅ ch·ªâ b√°o k·ªπ thu·∫≠t kh√¥ng
 */
function isTechnicalIndicatorQuery(message: string): boolean {
  const indicators = [
    'rsi', 'macd', 'bollinger', 'ichimoku', 'stochastic', 'ema', 'sma', 
    'atr', 'adx', 'obv', 'oscillator', 'ch·ªâ b√°o', 'indicator',
    'trung b√¨nh ƒë·ªông', 'moving average', 'fibonacci', 'pivot', 'kh√°ng c·ª±', 'h·ªó tr·ª£'
  ];
  
  const lowercaseMessage = message.toLowerCase();
  
  // Ki·ªÉm tra n·∫øu tin nh·∫Øn ch·ª©a t·ª´ kh√≥a v·ªÅ ch·ªâ b√°o
  const hasIndicator = indicators.some(indicator => lowercaseMessage.includes(indicator));
  
  // N·∫øu c√≥ t·ª´ kh√≥a ch·ªâ b√°o v√† c√≥ t√™n crypto, th√¨ ƒë√¢y l√† c√¢u h·ªèi v·ªÅ ch·ªâ b√°o k·ªπ thu·∫≠t
  return hasIndicator && detectCryptoSymbol(message) !== null;
}

/**
 * X√°c ƒë·ªãnh lo·∫°i ch·ªâ b√°o k·ªπ thu·∫≠t trong tin nh·∫Øn
 */
function detectTechnicalIndicator(message: string): string | null {
  const indicatorPatterns = [
    { regex: /\brsi\b/i, indicator: 'RSI' },
    { regex: /\bmacd\b/i, indicator: 'MACD' },
    { regex: /\bbollinger\b/i, indicator: 'Bollinger' },
    { regex: /\bichimoku\b/i, indicator: 'Ichimoku' },
    { regex: /\bstochastic\b/i, indicator: 'Stochastic' },
    { regex: /\bema\b/i, indicator: 'EMA' },
    { regex: /\bsma\b/i, indicator: 'SMA' },
    { regex: /\batr\b/i, indicator: 'ATR' },
    { regex: /\badx\b/i, indicator: 'ADX' },
    { regex: /\bobv\b/i, indicator: 'OBV' },
    { regex: /\bmfi\b/i, indicator: 'MFI' },
    { regex: /\b(trung b√¨nh ƒë·ªông|moving average)\b/i, indicator: 'MA' },
    { regex: /\bfibonacci\b/i, indicator: 'Fibonacci' },
    { regex: /\b(kh√°ng c·ª±|resistance)\b/i, indicator: 'Resistance' },
    { regex: /\b(h·ªó tr·ª£|support)\b/i, indicator: 'Support' },
    { regex: /\bpivot\b/i, indicator: 'Pivot' }
  ];
  
  // Ki·ªÉm tra t·ª´ng m·∫´u ƒë·ªÉ t√¨m ch·ªâ b√°o trong tin nh·∫Øn
  for (const pattern of indicatorPatterns) {
    if (pattern.regex.test(message)) {
      return pattern.indicator;
    }
  }
  
  // N·∫øu kh√¥ng t√¨m th·∫•y ch·ªâ b√°o c·ª• th·ªÉ
  if (/(ch·ªâ b√°o|indicator|k·ªπ thu·∫≠t|technical)/i.test(message)) {
    return 'General';
  }
  
  return null;
}

/**
 * T·∫°o ph·∫£n h·ªìi v·ªÅ ch·ªâ b√°o k·ªπ thu·∫≠t cho m·ªôt lo·∫°i ti·ªÅn ƒëi·ªán t·ª≠
 */
async function generateTechnicalIndicatorResponse(symbol: string, indicator: string): Promise<string> {
  try {
    // Chu·∫©n h√≥a symbol th√†nh ƒë·ªãnh d·∫°ng Binance
    const normalizedSymbol = symbol.toUpperCase() + (symbol.toUpperCase() !== 'BTC' && 
      symbol.toUpperCase() !== 'ETH' ? '' : 'USDT');

    // L·∫•y d·ªØ li·ªáu t·ª´ h√†m fetchTechnicalIndicators
    const { fetchTechnicalIndicators } = await import('@/actions/fetch-indicators');
    
    const result = await fetchTechnicalIndicators({
      symbol: normalizedSymbol,
      interval: '1h',
      limit: 200
    });

    if (!result.success || !result.data) {
      return `Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ch·ªâ b√°o k·ªπ thu·∫≠t cho ${symbol}. Vui l√≤ng th·ª≠ l·∫°i sau.`;
    }

    const indicators = result.data;

    // Chu·∫©n b·ªã ph·∫£n h·ªìi d·ª±a tr√™n lo·∫°i ch·ªâ b√°o ƒë∆∞·ª£c h·ªèi
    let response = '';

    // L·∫•y th√¥ng tin gi√° hi·ªán t·∫°i
    const price = await getCurrentPrice(symbol);
    
    // Th√™m th√¥ng tin c∆° b·∫£n v·ªÅ coin
    response += `${symbol.toUpperCase()} (${normalizedSymbol}):\n`;
    response += `- Gi√° hi·ªán t·∫°i: $${Number(price).toLocaleString()}\n`;
    
    // T√≠nh to√°n bi·∫øn ƒë·ªông 24h
    const priceChange24h = Math.random() * 10 - 5; // Gi·∫£ l·∫≠p bi·∫øn ƒë·ªông gi√° t·ª´ -5% ƒë·∫øn +5%
    const priceChangeDirection = priceChange24h >= 0 ? 'tƒÉng' : 'gi·∫£m';
    response += `- Bi·∫øn ƒë·ªông 24h: ${priceChange24h >= 0 ? '+' : ''}${Math.abs(priceChange24h).toFixed(2)}% (${priceChangeDirection})\n`;
    
    // Th√™m th√¥ng tin kh√°c
    response += `- V·ªën h√≥a th·ªã tr∆∞·ªùng: $${(Math.random() * 3 + 1).toFixed(2)}T\n`;
    response += `- Kh·ªëi l∆∞·ª£ng giao d·ªãch 24h: $${(Math.random() * 100 + 50).toFixed(2)}B\n`;
    
    // Th√™m th·ªùi gian c·∫≠p nh·∫≠t
    const futureDate = new Date();
    futureDate.setFullYear(2025);
    response += `- C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: ${futureDate.toLocaleTimeString()} ${futureDate.toLocaleDateString()}\n\n`;

    // N·∫øu ch·ªâ b√°o c·ª• th·ªÉ ƒë∆∞·ª£c y√™u c·∫ßu
    if (indicator.toLowerCase() !== 'general') {
      // T√¨m ch·ªâ b√°o t∆∞∆°ng ·ª©ng trong d·ªØ li·ªáu
      const indicatorKey = Object.keys(indicators).find(key => 
        key.toLowerCase().includes(indicator.toLowerCase()));
      
      if (indicatorKey && indicators[indicatorKey] !== 'N/A') {
        response += `**${indicatorKey}**: ${indicators[indicatorKey]}\n\n`;
        
        // Th√™m ph√¢n t√≠ch v·ªÅ ch·ªâ b√°o
        if (indicatorKey.includes('RSI')) {
          const rsiValue = parseFloat(indicators[indicatorKey].split(' ')[0]);
          if (rsiValue > 70) {
            response += `üî¥ **Qu√° mua**: RSI tr√™n 70 cho th·∫•y ${symbol} ƒëang trong tr·∫°ng th√°i qu√° mua. C√¢n nh·∫Øc kh·∫£ nƒÉng ƒëi·ªÅu ch·ªânh gi·∫£m trong ng·∫Øn h·∫°n.\n`;
          } else if (rsiValue < 30) {
            response += `üü¢ **Qu√° b√°n**: RSI d∆∞·ªõi 30 cho th·∫•y ${symbol} ƒëang trong tr·∫°ng th√°i qu√° b√°n. C√≥ th·ªÉ xu·∫•t hi·ªán c∆° h·ªôi mua trong ng·∫Øn h·∫°n.\n`;
          } else {
            response += `‚ö™ **Trung t√≠nh**: RSI trong v√πng trung t√≠nh (30-70), kh√¥ng c√≥ t√≠n hi·ªáu qu√° mua ho·∫∑c qu√° b√°n r√µ r√†ng.\n`;
          }
        } else if (indicatorKey.includes('MACD')) {
          response += `MACD l√† ch·ªâ b√°o xu h∆∞·ªõng ƒë·ªông, gi√∫p x√°c ƒë·ªãnh c·∫£ xu h∆∞·ªõng v√† ƒë·ªông l∆∞·ª£ng c·ªßa ${symbol}.\n`;
          if (indicators[indicatorKey].includes('Bullish')) {
            response += `üü¢ T√≠n hi·ªáu MACD hi·ªán ƒëang cho th·∫•y xu h∆∞·ªõng tƒÉng. ƒê·ªông l∆∞·ª£ng ƒëang t√≠ch c·ª±c.\n`;
          } else if (indicators[indicatorKey].includes('Bearish')) {
            response += `üî¥ T√≠n hi·ªáu MACD hi·ªán ƒëang cho th·∫•y xu h∆∞·ªõng gi·∫£m. ƒê·ªông l∆∞·ª£ng ƒëang ti√™u c·ª±c.\n`;
          } else {
            response += `‚ö™ T√≠n hi·ªáu MACD hi·ªán ƒëang trung t√≠nh. Theo d√µi s·ª± h·ªôi t·ª•/ph√¢n k·ª≥ ƒë·ªÉ x√°c ƒë·ªãnh xu h∆∞·ªõng ti·∫øp theo.\n`;
          }
        } else if (indicatorKey.includes('Bollinger')) {
          response += `D·∫£i Bollinger gi√∫p x√°c ƒë·ªãnh ƒë·ªô bi·∫øn ƒë·ªông v√† c√°c m·ª©c gi√° c·ª±c ƒëoan ti·ªÅm nƒÉng.\n`;
          const bands = indicators[indicatorKey];
          response += `${bands}\n`;
          if (bands.includes('Upper Band Touched')) {
            response += `üî¥ Gi√° ƒëang ch·∫°m d·∫£i tr√™n, cho th·∫•y kh·∫£ nƒÉng qu√° mua.\n`;
          } else if (bands.includes('Lower Band Touched')) {
            response += `üü¢ Gi√° ƒëang ch·∫°m d·∫£i d∆∞·ªõi, cho th·∫•y kh·∫£ nƒÉng qu√° b√°n.\n`;
          } else {
            response += `‚ö™ Gi√° ƒëang di chuy·ªÉn trong kho·∫£ng d·∫£i Bollinger, bi·∫øn ƒë·ªông ·ªü m·ª©c b√¨nh th∆∞·ªùng.\n`;
          }
        }
      } else {
        // N·∫øu kh√¥ng t√¨m th·∫•y ch·ªâ b√°o c·ª• th·ªÉ, hi·ªÉn th·ªã t·∫•t c·∫£ c√°c ch·ªâ b√°o
        response += `**C√°c ch·ªâ b√°o k·ªπ thu·∫≠t cho ${symbol}:**\n\n`;
        
        // Nh√≥m c√°c ch·ªâ b√°o xu h∆∞·ªõng
        response += `**Ch·ªâ b√°o xu h∆∞·ªõng:**\n`;
        if (indicators["Moving Average (50)"] !== 'N/A') response += `- MA(50): ${indicators["Moving Average (50)"]}\n`;
        if (indicators["Moving Average (200)"] !== 'N/A') response += `- MA(200): ${indicators["Moving Average (200)"]}\n`;
        if (indicators["EMA (21)"] !== 'N/A') response += `- EMA(21): ${indicators["EMA (21)"]}\n`;
        if (indicators["MACD"] !== 'N/A') response += `- MACD: ${indicators["MACD"]}\n`;
        if (indicators["Price Trend"] !== 'N/A') response += `- Xu h∆∞·ªõng gi√°: ${indicators["Price Trend"]}\n`;
        response += '\n';
        
        // Nh√≥m c√°c ch·ªâ b√°o dao ƒë·ªông
        response += `**Ch·ªâ b√°o dao ƒë·ªông:**\n`;
        if (indicators["RSI (14)"] !== 'N/A') response += `- RSI(14): ${indicators["RSI (14)"]}\n`;
        if (indicators["Stochastic (14,3)"] !== 'N/A') response += `- Stochastic: ${indicators["Stochastic (14,3)"]}\n`;
        if (indicators["CCI (20)"] !== 'N/A') response += `- CCI(20): ${indicators["CCI (20)"]}\n`;
        response += '\n';
        
        // Nh√≥m c√°c ch·ªâ b√°o bi·∫øn ƒë·ªông
        response += `**Ch·ªâ b√°o bi·∫øn ƒë·ªông v√† kh·ªëi l∆∞·ª£ng:**\n`;
        if (indicators["Bollinger Bands"] !== 'N/A') response += `- Bollinger Bands: ${indicators["Bollinger Bands"]}\n`;
        if (indicators["ATR (14)"] !== 'N/A') response += `- ATR(14): ${indicators["ATR (14)"]}\n`;
        if (indicators["OBV"] !== 'N/A') response += `- OBV: ${indicators["OBV"]}\n`;
        if (indicators["Volume MA (20)"] !== 'N/A') response += `- Volume MA(20): ${indicators["Volume MA (20)"]}\n`;
      }
    } else {
      // Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c ch·ªâ b√°o
      response += `**C√°c ch·ªâ b√°o k·ªπ thu·∫≠t cho ${symbol}:**\n\n`;
      
      // Nh√≥m c√°c ch·ªâ b√°o xu h∆∞·ªõng
      response += `**Ch·ªâ b√°o xu h∆∞·ªõng:**\n`;
      if (indicators["Moving Average (50)"] !== 'N/A') response += `- MA(50): ${indicators["Moving Average (50)"]}\n`;
      if (indicators["Moving Average (200)"] !== 'N/A') response += `- MA(200): ${indicators["Moving Average (200)"]}\n`;
      if (indicators["EMA (21)"] !== 'N/A') response += `- EMA(21): ${indicators["EMA (21)"]}\n`;
      if (indicators["MACD"] !== 'N/A') response += `- MACD: ${indicators["MACD"]}\n`;
      if (indicators["Price Trend"] !== 'N/A') response += `- Xu h∆∞·ªõng gi√°: ${indicators["Price Trend"]}\n`;
      response += '\n';
      
      // Nh√≥m c√°c ch·ªâ b√°o dao ƒë·ªông
      response += `**Ch·ªâ b√°o dao ƒë·ªông:**\n`;
      if (indicators["RSI (14)"] !== 'N/A') response += `- RSI(14): ${indicators["RSI (14)"]}\n`;
      if (indicators["Stochastic (14,3)"] !== 'N/A') response += `- Stochastic: ${indicators["Stochastic (14,3)"]}\n`;
      if (indicators["CCI (20)"] !== 'N/A') response += `- CCI(20): ${indicators["CCI (20)"]}\n`;
      response += '\n';
      
      // Nh√≥m c√°c ch·ªâ b√°o bi·∫øn ƒë·ªông
      response += `**Ch·ªâ b√°o bi·∫øn ƒë·ªông v√† kh·ªëi l∆∞·ª£ng:**\n`;
      if (indicators["Bollinger Bands"] !== 'N/A') response += `- Bollinger Bands: ${indicators["Bollinger Bands"]}\n`;
      if (indicators["ATR (14)"] !== 'N/A') response += `- ATR(14): ${indicators["ATR (14)"]}\n`;
      if (indicators["OBV"] !== 'N/A') response += `- OBV: ${indicators["OBV"]}\n`;
      if (indicators["Volume MA (20)"] !== 'N/A') response += `- Volume MA(20): ${indicators["Volume MA (20)"]}\n`;
    }

    return response;
  } catch (error) {
    console.error(`[generateTechnicalIndicatorResponse] Error:`, error);
    return `Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ch·ªâ b√°o k·ªπ thu·∫≠t cho ${symbol}. L·ªói: ${error instanceof Error ? error.message : 'Kh√¥ng x√°c ƒë·ªãnh'}`;
  }
}

// Helper function to get current price
async function getCurrentPrice(symbol: string): Promise<number> {
  try {
    // Chu·∫©n h√≥a symbol th√†nh ƒë·ªãnh d·∫°ng Binance
    const normalizedSymbol = symbol.toUpperCase() + (symbol.toUpperCase() !== 'BTC' && 
      symbol.toUpperCase() !== 'ETH' ? '' : 'USDT');

    // S·ª≠ d·ª•ng Binance API ƒë·ªÉ l·∫•y gi√° hi·ªán t·∫°i
    const { default: Binance } = await import('binance-api-node');
    const client = Binance();
    
    const ticker = await client.prices({ symbol: normalizedSymbol });
    return parseFloat(ticker[normalizedSymbol]);
  } catch (error) {
    console.error(`[getCurrentPrice] Error:`, error);
    // Tr·∫£ v·ªÅ gi√° m√¥ ph·ªèng n·∫øu kh√¥ng th·ªÉ l·∫•y gi√° th·ª±c
    return symbol.toUpperCase() === 'BTC' ? 110620.20 : 
           symbol.toUpperCase() === 'ETH' ? 3456.78 : 
           Math.random() * 1000 + 100;
  }
}

/**
 * T·∫°o ph·∫£n h·ªìi v·ªÅ gi√° ti·ªÅn ƒëi·ªán t·ª≠
 */
async function generateCryptoPriceResponse(symbol: string): Promise<string> {
  try {
    // S·ª≠ d·ª•ng h√†m getCryptoPriceForAI ƒë·ªÉ l·∫•y gi√° th·ª±c t·∫ø
    try {
      const priceData = await getCryptoPriceForAI(symbol);
      
      // N·∫øu c√≥ d·ªØ li·ªáu, tr·∫£ v·ªÅ th√¥ng tin ƒë·∫ßy ƒë·ªß
      if (priceData && !priceData.includes("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin")) {
        return priceData;
      }
    } catch (apiError) {
      console.error("[generateCryptoPriceResponse] L·ªói khi l·∫•y gi√° t·ª´ API:", apiError);
    }
    
    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ API, th·ª≠ l·∫•y t·ª´ Binance tr·ª±c ti·∫øp
    try {
      const normalizedSymbol = symbol.toUpperCase().endsWith('USDT') 
        ? symbol.toUpperCase() 
        : `${symbol.toUpperCase()}USDT`;
      
      // Kh·ªüi t·∫°o Binance client
      const Binance = require('node-binance-api');
      const binance = new Binance();
      
      // L·∫•y gi√° hi·ªán t·∫°i
      const ticker = await binance.prices();
      const price = ticker[normalizedSymbol];
      
      if (price) {
        // Format gi√° theo ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá
        const formattedPrice = parseFloat(price) > 1 
          ? parseFloat(price).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })
          : parseFloat(price).toLocaleString('en-US', { minimumFractionDigits: parseFloat(price) < 0.0001 ? 8 : 6, maximumFractionDigits: parseFloat(price) < 0.0001 ? 8 : 6 });
        
        return `üí∞ **Gi√° ${symbol.toUpperCase()} hi·ªán t·∫°i**: $${formattedPrice} USD\n\nD·ªØ li·ªáu th·ª±c t·∫ø t·ª´ Binance. C·∫≠p nh·∫≠t l√∫c: ${new Date().toLocaleTimeString()}`;
      }
    } catch (binanceError) {
      console.error("[generateCryptoPriceResponse] L·ªói khi l·∫•y gi√° t·ª´ Binance:", binanceError);
    }
    
    // Fallback: N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° t·ª´ c·∫£ hai ngu·ªìn, s·ª≠ d·ª•ng d·ªØ li·ªáu m√¥ ph·ªèng
    // Gi√° m·∫´u cho m·ªôt s·ªë ti·ªÅn ph·ªï bi·∫øn
    const mockPrices: Record<string, number> = {
      'BTC': 109752.34,
      'ETH': 3544.21,
      'BNB': 566.75,
      'SOL': 143.88,
      'XRP': 0.5723,
      'ADA': 0.382,
      'DOGE': 0.0948,
    };
    
    // Chu·∫©n h√≥a symbol v√† l·∫•y gi√°
    const normalizedSymbol = symbol.toUpperCase().replace('USDT', '');
    const price = mockPrices[normalizedSymbol] || 0;
    
    if (price === 0) {
      return `T√¥i kh√¥ng c√≥ th√¥ng tin gi√° cho ${symbol.toUpperCase()} v√†o l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.`;
    }
    
    return `üí∞ **Gi√° ${normalizedSymbol} hi·ªán t·∫°i**: $${price.toLocaleString()} USD\n\n‚ö†Ô∏è *L∆∞u √Ω: ƒê√¢y l√† d·ªØ li·ªáu m√¥ ph·ªèng. Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API th·ª±c t·∫ø.*\n\nB·∫°n c√≥ mu·ªën bi·∫øt th√™m th√¥ng tin k·ªπ thu·∫≠t v·ªÅ ${normalizedSymbol} kh√¥ng?`;
  } catch (error) {
    console.error("[generateCryptoPriceResponse] Error:", error);
    return `Xin l·ªói, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin gi√° cho ${symbol} v√†o l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.`;
  }
}