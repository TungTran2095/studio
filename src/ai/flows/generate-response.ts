// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A simple chatbot AI agent.
 *
 * - generateResponse - A function that handles the chatbot conversation.
 * - GenerateResponseInput - The input type for the generateResponse function.
 * - GenerateResponseOutput - The return type for the generateResponse function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const GenerateResponseInputSchema = z.object({
  message: z.string().describe('The message from the user.'),
  chatHistory: z.array(z.object({
    role: z.enum(['user', 'bot']),
    content: z.string(),
  })).optional().describe('The chat history of the conversation.'),
});

export type GenerateResponseInput = z.infer<typeof GenerateResponseInputSchema>;

const GenerateResponseOutputSchema = z.object({
  response: z.string().describe('The response from the AI.'),
});

export type GenerateResponseOutput = z.infer<typeof GenerateResponseOutputSchema>;

export async function generateResponse(input: GenerateResponseInput): Promise<GenerateResponseOutput> {
  return generateResponseFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateResponsePrompt',
  input: {
    schema: z.object({
      message: z.string().describe('The message from the user.'),
      chatHistory: z.array(z.object({
        role: z.enum(['user', 'bot']),
        content: z.string(),
      })).optional().describe('The chat history of the conversation.'),
    }),
  },
  output: {
    schema: z.object({
      response: z.string().describe('The response from the AI.'),
    }),
  },
  prompt: `You are a helpful chatbot. Respond to the user message, taking into account the chat history.

Chat History:
{{#each chatHistory}}
{{this.role}}: {{this.content}}
{{/each}}

User Message: {{message}}

Response:`, 
});

const generateResponseFlow = ai.defineFlow<
  typeof GenerateResponseInputSchema,
  typeof GenerateResponseOutputSchema
>({
  name: 'generateResponseFlow',
  inputSchema: GenerateResponseInputSchema,
  outputSchema: GenerateResponseOutputSchema,
}, async input => {
  const {output} = await prompt(input);
  return output!;
});
