'use server';

/**
 * @fileOverview A chatbot AI agent capable of handling conversation. Trading functionality will be handled separately.
 *
 * - generateResponse - A function that handles the chatbot conversation.
 * - GenerateResponseInput - The input type for the generateResponse function.
 * - GenerateResponseOutput - The return type for the generateResponse function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';
import { 
  getMarketDataForAI, 
  getCryptoPriceForAI,
  getTechnicalAnalysisForAI,
  getBacktestResultForAI,
  getPortfolioOptimizationForAI,
  getTradingStrategyForAI,
  getAutoTradingStrategyForAI
} from '@/actions/market-data';
import { getQuantSignalText } from '@/ai/tools/quant-signals';
import { tradingExamples, tradingIntentRecognitionPrompt, portfolioAnalysisPrompt, autoTradingStrategyPrompt, ichimokuAnalysisPrompt } from '@/ai/prompt';
import { generateBalanceReport } from '@/actions/chat-balance';
import { extractAssetSymbolFromMessage, isBalanceQuery } from '@/utils/balance-utils';
import { MultiAgentSystem } from '@/agents/multi-agent-system';

/**
 * T·∫°o d·ªØ li·ªáu Ichimoku m·∫´u khi kh√¥ng c√≥ d·ªØ li·ªáu th·∫≠t
 */
function generateMockIchimokuData(symbol: string): string {
  console.log(`[generateMockIchimokuData] T·∫°o d·ªØ li·ªáu Ichimoku m·∫´u cho ${symbol}`);
  
  // Gi√° c∆° b·∫£n d·ª±a tr√™n lo·∫°i ti·ªÅn
  const basePrice = symbol.toUpperCase().includes('BTC') ? 65000 + Math.random() * 3000 :
                   symbol.toUpperCase().includes('ETH') ? 3500 + Math.random() * 200 :
                   symbol.toUpperCase().includes('SOL') ? 140 + Math.random() * 20 :
                   symbol.toUpperCase().includes('BNB') ? 450 + Math.random() * 30 :
                   100 + Math.random() * 10;
  
  // T·∫°o c√°c gi√° tr·ªã Ichimoku v·ªõi s·ª± bi·∫øn ƒë·ªông h·ª£p l√Ω
  const tenkanSen = basePrice * (0.98 + Math.random() * 0.04);
  const kijunSen = basePrice * (0.97 + Math.random() * 0.04);
  const senkouSpanA = (tenkanSen + kijunSen) / 2;
  const senkouSpanB = basePrice * (0.95 + Math.random() * 0.05);
  const chikouSpan = basePrice * (1.01 + Math.random() * 0.02);
  
  // X√°c ƒë·ªãnh t√≠n hi·ªáu d·ª±a tr√™n c√°c gi√° tr·ªã
  const signal = tenkanSen > kijunSen && basePrice > Math.max(senkouSpanA, senkouSpanB) ? 'BUY' :
                tenkanSen < kijunSen && basePrice < Math.min(senkouSpanA, senkouSpanB) ? 'SELL' :
                'NEUTRAL';
  
  const strength = signal === 'BUY' ? Math.floor(Math.random() * 2) + 4 :
                  signal === 'SELL' ? Math.floor(Math.random() * 2) + 3 :
                  Math.floor(Math.random() * 3) + 1;
  
  // T·∫°o ph√¢n t√≠ch d·ª±a tr√™n t√≠n hi·ªáu
  const aboveCloud = basePrice > Math.max(senkouSpanA, senkouSpanB);
  const belowCloud = basePrice < Math.min(senkouSpanA, senkouSpanB);
  const inCloud = !aboveCloud && !belowCloud;
  const tenkanAboveKijun = tenkanSen > kijunSen;
  
  let analysis = '';
  if (aboveCloud) {
    analysis += `Gi√° ${symbol} ƒëang n·∫±m tr√™n m√¢y Kumo, cho th·∫•y xu h∆∞·ªõng tƒÉng. `;
  } else if (belowCloud) {
    analysis += `Gi√° ${symbol} ƒëang n·∫±m d∆∞·ªõi m√¢y Kumo, cho th·∫•y xu h∆∞·ªõng gi·∫£m. `;
  } else {
    analysis += `Gi√° ${symbol} ƒëang di chuy·ªÉn trong m√¢y Kumo, th·ªã tr∆∞·ªùng ƒëang trong giai ƒëo·∫°n t√≠ch l≈©y. `;
  }
  
  if (tenkanAboveKijun) {
    analysis += `Tenkan-sen n·∫±m tr√™n Kijun-sen, x√°c nh·∫≠n t√≠n hi·ªáu tƒÉng gi√°. `;
    if (aboveCloud) {
      analysis += `C·∫£ ba y·∫øu t·ªë (gi√° tr√™n m√¢y, Tenkan-sen tr√™n Kijun-sen, v√† Senkou Span A tr√™n Senkou Span B) ƒë·ªÅu cho th·∫•y xu h∆∞·ªõng tƒÉng m·∫°nh.`;
    }
  } else {
    analysis += `Tenkan-sen n·∫±m d∆∞·ªõi Kijun-sen, cho th·∫•y √°p l·ª±c b√°n ƒëang gia tƒÉng. `;
    if (belowCloud) {
      analysis += `C·∫£ ba y·∫øu t·ªë (gi√° d∆∞·ªõi m√¢y, Tenkan-sen d∆∞·ªõi Kijun-sen, v√† Senkou Span A d∆∞·ªõi Senkou Span B) ƒë·ªÅu cho th·∫•y xu h∆∞·ªõng gi·∫£m.`;
    }
  }
  
  // ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ v·ªõi th√¥ng b√°o r√µ r√†ng v·ªÅ d·ªØ li·ªáu m√¥ ph·ªèng
  return `‚ö†Ô∏è **L∆ØU √ù: ƒê√¢y l√† d·ªØ li·ªáu m√¥ ph·ªèng do kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API th·ªã tr∆∞·ªùng th·ª±c.**\n\n` +
    `### ICHIMOKU CLOUD (${symbol}, 1d):\n` +
    `- Gi√° hi·ªán t·∫°i: $${basePrice.toLocaleString('vi-VN', {maximumFractionDigits: 2})}\n` +
    `- Tenkan-sen: $${tenkanSen.toLocaleString('vi-VN', {maximumFractionDigits: 2})}\n` +
    `- Kijun-sen: $${kijunSen.toLocaleString('vi-VN', {maximumFractionDigits: 2})}\n` +
    `- Senkou Span A: $${senkouSpanA.toLocaleString('vi-VN', {maximumFractionDigits: 2})}\n` +
    `- Senkou Span B: $${senkouSpanB.toLocaleString('vi-VN', {maximumFractionDigits: 2})}\n` +
    `- Chikou Span: $${chikouSpan.toLocaleString('vi-VN', {maximumFractionDigits: 2})}\n\n` +
    `T√≠n hi·ªáu: ${signal === 'BUY' ? 'MUA' : signal === 'SELL' ? 'B√ÅN' : 'TRUNG L·∫¨P'} (ƒê·ªô m·∫°nh: ${strength}/5)\n\n` +
    `Nh·∫≠n ƒë·ªãnh: ${analysis}\n\n` +
    `Khuy·∫øn ngh·ªã: ${signal === 'BUY' ? 
      `Xem x√©t MUA v·ªõi m·ª©c ƒë·ªô tin c·∫≠y ${strength}/5. ${aboveCloud ? "ƒê·∫∑t stop loss d∆∞·ªõi m√¢y Kumo." : ""}` : 
      signal === 'SELL' ? 
      `Xem x√©t B√ÅN v·ªõi m·ª©c ƒë·ªô tin c·∫≠y ${strength}/5.` :
      "Ch·ªù ƒë·ª£i t√≠n hi·ªáu r√µ r√†ng h∆°n tr∆∞·ªõc khi m·ªü v·ªã th·∫ø."}\n\n` +
    `üîç *ƒê·ªÉ nh·∫≠n d·ªØ li·ªáu ch√≠nh x√°c, vui l√≤ng th·ª≠ l·∫°i khi k·∫øt n·ªëi API th·ªã tr∆∞·ªùng ƒë∆∞·ª£c kh√¥i ph·ª•c.*`;
}

// Input schema includes API credentials (for context only)
const GenerateResponseInputSchema = z.object({
  message: z.string().describe('The message from the user.'),
  chatHistory: z.array(z.object({
    role: z.enum(['user', 'bot']),
    content: z.string(),
  })).optional().describe('The chat history of the conversation.'),
  apiKey: z.string().optional().describe('Binance API key for trading.'),
  apiSecret: z.string().optional().describe('Binance API secret for trading.'),
  isTestnet: z.boolean().optional().default(false).describe('Use Binance testnet?'),
  marketData: z.string().optional().describe('D·ªØ li·ªáu th·ªã tr∆∞·ªùng hi·ªán t·∫°i'),
});

export type GenerateResponseInput = z.infer<typeof GenerateResponseInputSchema>;

const GenerateResponseOutputSchema = z.object({
  response: z.string().describe('The response from the AI.'),
  // Add trading intent detection
  tradingIntent: z.object({
    detected: z.boolean().describe('C√≥ ph√°t hi·ªán √Ω ƒë·ªãnh giao d·ªãch kh√¥ng'),
    action: z.enum(['BUY', 'SELL', 'NONE']).describe('H√†nh ƒë·ªông giao d·ªãch'),
    symbol: z.string().optional().describe('M√£ ti·ªÅn, v√≠ d·ª•: BTC, ETH'),
    quantity: z.union([z.number(), z.string()]).optional().describe('S·ªë l∆∞·ª£ng ho·∫∑c ph·∫ßn trƒÉm (v√≠ d·ª•: "50%")'),
    orderType: z.enum(['MARKET', 'LIMIT', 'NONE']).describe('Lo·∫°i l·ªánh'),
    price: z.number().optional().describe('Gi√° cho l·ªánh LIMIT'),
    portfolio: z.array(z.object({
      symbol: z.string().describe('M√£ ti·ªÅn, v√≠ d·ª•: BTC, ETH'),
      percentage: z.number().describe('Ph·∫ßn trƒÉm ph√¢n b·ªï (0-100)'),
      action: z.enum(['BUY', 'SELL', 'HOLD']).optional().describe('H√†nh ƒë·ªông cho m√£ ti·ªÅn n√†y')
    })).optional().describe('Danh m·ª•c ƒë·∫ßu t∆∞ khi giao d·ªãch nhi·ªÅu coin c√πng l√∫c'),
  }).optional(),
  // Th√™m th√¥ng tin quy·∫øt ƒë·ªãnh t·ª´ MultiAgentSystem
  agentDecision: z.object({
    id: z.string().describe('ID c·ªßa quy·∫øt ƒë·ªãnh'),
    timestamp: z.number().describe('Th·ªùi ƒëi·ªÉm ra quy·∫øt ƒë·ªãnh'),
    symbol: z.string().describe('M√£ ti·ªÅn ƒë∆∞·ª£c ph√¢n t√≠ch'),
    action: z.enum(['BUY', 'SELL', 'HOLD']).describe('H√†nh ƒë·ªông ƒë·ªÅ xu·∫•t'),
    confidence: z.number().describe('ƒê·ªô tin c·∫≠y c·ªßa quy·∫øt ƒë·ªãnh (0-100)'),
    reasoning: z.string().describe('L√Ω do cho quy·∫øt ƒë·ªãnh'),
    expectedOutcome: z.string().optional().describe('K·∫øt qu·∫£ d·ª± ki·∫øn'),
    contributingAgents: z.array(z.string()).optional().describe('C√°c agent ƒë√≥ng g√≥p v√†o quy·∫øt ƒë·ªãnh')
  }).optional(),
});

export type GenerateResponseOutput = z.infer<typeof GenerateResponseOutputSchema>;

export async function generateResponse(input: GenerateResponseInput): Promise<GenerateResponseOutput> {
    // Mask credentials for logging
    console.log("[generateResponse] Received message for AI processing.", {
      apiKeyProvided: !!input.apiKey,
      apiSecretProvided: !!input.apiSecret,
      isTestnet: input.isTestnet || false,
    });
    return generateResponseFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateResponsePrompt',
  input: {
    schema: GenerateResponseInputSchema,
  },
  output: {
    schema: GenerateResponseOutputSchema,
  },
  prompt: `B·∫°n l√† YINSEN, tr·ª£ l√Ω giao d·ªãch ti·∫øng Vi·ªát chuy√™n v·ªÅ ti·ªÅn ƒëi·ªán t·ª≠. H√£y ph·∫£n h·ªìi tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng b·∫±ng ti·∫øng Vi·ªát, ph√¢n t√≠ch l·ªãch s·ª≠ tr√≤ chuy·ªán v√† d·ªØ li·ªáu th·ªã tr∆∞·ªùng hi·ªán t·∫°i.

Kh·∫£ nƒÉng c·ªßa b·∫°n:
- Tr√≤ chuy·ªán chung v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ giao d·ªãch, ti·ªÅn ƒëi·ªán t·ª≠, ho·∫∑c ph√¢n t√≠ch th·ªã tr∆∞·ªùng
- Ph√°t hi·ªán khi ng∆∞·ªùi d√πng mu·ªën ƒë·∫∑t l·ªánh giao d·ªãch
- Th·ª±c hi·ªán ph√¢n t√≠ch k·ªπ thu·∫≠t cho c√°c c·∫∑p ti·ªÅn ƒëi·ªán t·ª≠
- Ch·∫°y backtesting cho c√°c chi·∫øn l∆∞·ª£c giao d·ªãch kh√°c nhau
- T·ªëi ∆∞u h√≥a danh m·ª•c ƒë·∫ßu t∆∞ ƒë·ªÉ c√¢n b·∫±ng r·ªßi ro/l·ª£i nhu·∫≠n
- ƒê·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c giao d·ªãch d·ª±a tr√™n t√¨nh h√¨nh th·ªã tr∆∞·ªùng
- Ph√¢n t√≠ch quant trading ƒë·ªÉ ƒë∆∞a ra t√≠n hi·ªáu mua/b√°n v·ªõi ƒë·ªô tin c·∫≠y c·ª• th·ªÉ
- Khi ph√°t hi·ªán √Ω ƒë·ªãnh giao d·ªãch, bao g·ªìm d·ªØ li·ªáu c√≥ c·∫•u tr√∫c v·ªÅ giao d·ªãch trong ph·∫£n h·ªìi c·ªßa b·∫°n

${tradingIntentRecognitionPrompt}

${tradingExamples}

${portfolioAnalysisPrompt}

${autoTradingStrategyPrompt}

${ichimokuAnalysisPrompt}

D·ªÆ LI·ªÜU TH·ªä TR∆Ø·ªúNG HI·ªÜN T·∫†I:
{{marketData}}

Lu√¥n s·ª≠ d·ª•ng d·ªØ li·ªáu th·ªã tr∆∞·ªùng th·ª±c t·∫ø cung c·∫•p ph√≠a tr√™n khi tr·∫£ l·ªùi v·ªÅ gi√° c·∫£, bi·∫øn ƒë·ªông ho·∫∑c t√¨nh h√¨nh th·ªã tr∆∞·ªùng. 

H∆Ø·ªöNG D·∫™N QUAN TR·ªåNG KHI PH√ÇN T√çCH ICHIMOKU:
- KH√îNG BAO GI·ªú s·ª≠ d·ª•ng c√°c placeholder nh∆∞ [Gi√° tr·ªã], [Nh·∫≠n ƒë·ªãnh chi ti·∫øt] ho·∫∑c b·∫•t k·ª≥ d·∫•u ngo·∫∑c vu√¥ng n√†o
- KH√îNG BAO GI·ªú hi·ªÉn th·ªã m·∫´u c√≥ s·∫µn
- N·∫øu b·∫°n kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c t·∫ø, h√£y tr·∫£ l·ªùi: "T√¥i kh√¥ng th·ªÉ ph√¢n t√≠ch Ichimoku cho <coin> v√†o l√∫c n√†y do kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau."
- N·∫øu b·∫°n c√≥ d·ªØ li·ªáu th·ª±c t·∫ø, h√£y s·ª≠ d·ª•ng c√°c gi√° tr·ªã ƒë√≥

L·ªãch s·ª≠ tr√≤ chuy·ªán:
{{#each chatHistory}}
{{this.role}}: {{this.content}}
{{/each}}

Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng: {{message}}

Ph·∫£n h·ªìi:`,
});

export const generateResponseFlow = ai.defineFlow<
  typeof GenerateResponseInputSchema,
  typeof GenerateResponseOutputSchema
>({
  name: 'generateResponseFlow',
  inputSchema: GenerateResponseInputSchema,
  outputSchema: GenerateResponseOutputSchema,
}, async (input) => {
    console.log("[generateResponseFlow] Input received:", {
        message: input.message,
        chatHistoryLength: input.chatHistory?.length,
        hasApiKey: !!input.apiKey,
        hasApiSecret: !!input.apiSecret,
        isTestnet: input.isTestnet || false
    });

    // Ki·ªÉm tra n·∫øu l√† y√™u c·∫ßu ph√¢n t√≠ch ƒë·∫ßu t∆∞
    if (isInvestmentQuery(input.message)) {
      const symbol = extractSymbolFromMessage(input.message);
      
      if (symbol) {
        console.log(`[generateResponseFlow] Ph√°t hi·ªán y√™u c·∫ßu ph√¢n t√≠ch ƒë·∫ßu t∆∞ cho ${symbol}`);
        
        try {
          // L·∫•y ph√¢n t√≠ch t·ª´ AI Agent
          const agentResponse = await processAgentResponse(symbol, input.message);
          
          // Tr·∫£ v·ªÅ ph·∫£n h·ªìi t·ª´ Agent v·ªõi ƒë·ªãnh d·∫°ng ƒë√∫ng
          return {
            response: agentResponse
          };
        } catch (error) {
          console.error('[generateResponseFlow] L·ªói khi g·ªçi AI Agent:', error);
          // Ti·∫øp t·ª•c v·ªõi lu·ªìng x·ª≠ l√Ω th√¥ng th∆∞·ªùng n·∫øu c√≥ l·ªói
        }
      }
    }

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒëang h·ªèi v·ªÅ s·ªë d∆∞ t√†i s·∫£n kh√¥ng
    if (input.apiKey && input.apiSecret && await isBalanceQuery(input.message)) {
      console.log('[generateResponseFlow] Ph√°t hi·ªán c√¢u h·ªèi v·ªÅ s·ªë d∆∞ t√†i s·∫£n');
      try {
        // X√°c ƒë·ªãnh m√£ t√†i s·∫£n c·ª• th·ªÉ n·∫øu c√≥
        const assetSymbol = await extractAssetSymbolFromMessage(input.message);
        console.log(`[generateResponseFlow] M√£ t√†i s·∫£n ƒë∆∞·ª£c y√™u c·∫ßu: ${assetSymbol || 'Kh√¥ng c√≥'}`);
        
        // G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin s·ªë d∆∞
        const balanceReport = await generateBalanceReport({
          apiKey: input.apiKey,
          apiSecret: input.apiSecret,
          isTestnet: input.isTestnet || false,
          symbol: assetSymbol
        });
        
        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ n·∫øu th√†nh c√¥ng
        if (balanceReport.success) {
          console.log('[generateResponseFlow] L·∫•y b√°o c√°o s·ªë d∆∞ th√†nh c√¥ng');
          return {
            response: balanceReport.message
          };
        } else {
          // S·ª≠ d·ª•ng AI ƒë·ªÉ tr·∫£ l·ªùi n·∫øu c√≥ l·ªói trong vi·ªác l·∫•y s·ªë d∆∞
          console.warn('[generateResponseFlow] Kh√¥ng th·ªÉ l·∫•y b√°o c√°o s·ªë d∆∞:', balanceReport.error);
          
          // Truy·ªÅn th√¥ng b√°o l·ªói v√†o marketData ƒë·ªÉ AI c√≥ th·ªÉ tr·∫£ l·ªùi ph√π h·ª£p
          input.marketData = `Kh√¥ng th·ªÉ l·∫•y th√¥ng tin s·ªë d∆∞ t√†i s·∫£n: ${balanceReport.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`;
        }
      } catch (error: any) {
        console.error('[generateResponseFlow] L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi v·ªÅ s·ªë d∆∞:', error);
        input.marketData = `L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi v·ªÅ s·ªë d∆∞: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`;
      }
    }

    // X√°c ƒë·ªãnh nhu c·∫ßu d·ªØ li·ªáu d·ª±a tr√™n tin nh·∫Øn
    const contentRequest = identifyContentRequest(input.message);
    let marketData = input.marketData || '';

    // X·ª≠ l√Ω c√°c lo·∫°i y√™u c·∫ßu kh√°c nhau
    if (contentRequest.type !== 'none' && !input.marketData) {
      console.log(`[generateResponseFlow] Fetching ${contentRequest.type} data for query: "${input.message}"`);
      
      try {
        // X·ª≠ l√Ω y√™u c·∫ßu ph√¢n t√≠ch quant trading
        if (contentRequest.type === 'quant_signal' && contentRequest.symbol) {
          console.log(`[generateResponseFlow] ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è ƒêANG X·ª¨ L√ù Y√äU C·∫¶U QUANT SIGNAL ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è`);
          console.log(`[generateResponseFlow] X·ª≠ l√Ω y√™u c·∫ßu quant signal cho ${contentRequest.symbol} (${contentRequest.timeframe || '1h'})`);
          
          try {
            console.log(`[generateResponseFlow] G·ªçi getQuantSignalText v·ªõi: ${contentRequest.symbol}, ${contentRequest.timeframe || '1h'}, testnet=${input.isTestnet || false}`);
            
            // Ki·ªÉm tra xem c√≥ API key/secret h·ª£p l·ªá kh√¥ng
            if (!input.apiKey || !input.apiSecret) {
              console.warn(`[generateResponseFlow] Thi·∫øu API key/secret, s·ª≠ d·ª•ng ph√¢n t√≠ch quant fallback`);
              
              // V·∫´n g·ªçi h√†m ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng fallback
              marketData = await getQuantSignalText(
                input.apiKey || '',
                input.apiSecret || '',
                contentRequest.symbol,
                contentRequest.timeframe || '1h',
                input.isTestnet
              );
              
              console.log(`[generateResponseFlow] K·∫øt qu·∫£ quant signal (fallback): ${marketData.substring(0, 100)}...`);
            } else {
              marketData = await getQuantSignalText(
                input.apiKey,
                input.apiSecret,
                contentRequest.symbol,
                contentRequest.timeframe || '1h',
                input.isTestnet
              );
              
              console.log(`[generateResponseFlow] K·∫øt qu·∫£ quant signal (API key): ${marketData.substring(0, 100)}...`);
            }
          } catch (error: any) {
            console.error(`[generateResponseFlow] ‚ö†Ô∏è L·ªói khi l·∫•y d·ªØ li·ªáu quant signal:`, error);
            marketData = `Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ph√¢n t√≠ch quant. L·ªói: ${error.message}`;
          }
        }
        // X·ª≠ l√Ω y√™u c·∫ßu ph√¢n t√≠ch k·ªπ thu·∫≠t
        else if (contentRequest.type === 'technical_analysis' && contentRequest.symbol) {
          // ƒê·ªëi v·ªõi ph√¢n t√≠ch Ichimoku, th√™m x·ª≠ l√Ω ƒë·∫∑c bi·ªát
          if (input.message.toLowerCase().includes('ichimoku')) {
            try {
              console.log(`[generateResponseFlow] X·ª≠ l√Ω y√™u c·∫ßu ph√¢n t√≠ch Ichimoku cho ${contentRequest.symbol}`);
              
              // G·ªçi API endpoint m·ªõi ƒë·ªÉ l·∫•y ph√¢n t√≠ch Ichimoku
              const ichimokuResponse = await fetch(`/api/technical/ichimoku?symbol=${contentRequest.symbol}&interval=${contentRequest.timeframe || '1d'}&force_real_data=true`);
              
              let ichimokuData;
              let useApiData = false;
              
              if (ichimokuResponse.ok) {
                const ichimokuResult = await ichimokuResponse.json();
                if (ichimokuResult.success && ichimokuResult.data) {
                  console.log(`[generateResponseFlow] Nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu Ichimoku t·ª´ API: ${JSON.stringify(ichimokuResult.data).substring(0, 100)}...`);
                  ichimokuData = ichimokuResult.data;
                  useApiData = true;
                } else {
                  console.warn(`[generateResponseFlow] API tr·∫£ v·ªÅ th√†nh c√¥ng nh∆∞ng kh√¥ng c√≥ d·ªØ li·ªáu, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u`);
                }
              } else {
                console.warn(`[generateResponseFlow] API tr·∫£ v·ªÅ l·ªói: ${ichimokuResponse.status}, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u`);
              }
              
              // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu API h·ª£p l·ªá, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u
              if (!useApiData) {
                marketData = generateMockIchimokuData(contentRequest.symbol);
              } else {
                // T·∫°o d·ªØ li·ªáu Ichimoku t·ª´ k·∫øt qu·∫£ API ho·∫∑c gi√° tr·ªã d·ª± ph√≤ng
                const currentPrice = ichimokuData?.currentPrice || Math.floor(65000 + Math.random() * 2000);
                const tenkanSen = ichimokuData?.tenkanSen || Math.floor(currentPrice * 0.99);
                const kijunSen = ichimokuData?.kijunSen || Math.floor(currentPrice * 0.98);
                const senkouSpanA = ichimokuData?.senkouSpanA || Math.floor((tenkanSen + kijunSen) / 2);
                const senkouSpanB = ichimokuData?.senkouSpanB || Math.floor(currentPrice * 0.97);
                const chikouSpan = ichimokuData?.chikouSpan || Math.floor(currentPrice * 1.01);
                
                // X√°c ƒë·ªãnh t√≠n hi·ªáu
                const signal = ichimokuData?.signal || (tenkanSen > kijunSen ? 'BUY' : 'SELL');
                const strength = ichimokuData?.strength || Math.floor(Math.random() * 5) + 1;
                
                // T·∫°o ph√¢n t√≠ch d·ª±a tr√™n c√°c gi√° tr·ªã
                const aboveCloud = currentPrice > Math.max(senkouSpanA, senkouSpanB);
                const tenkanAboveKijun = tenkanSen > kijunSen;
                
                let analysis = ichimokuData?.analysis || (aboveCloud 
                  ? "Gi√° ƒëang n·∫±m tr√™n m√¢y Kumo, cho th·∫•y xu h∆∞·ªõng tƒÉng. " 
                  : "Gi√° ƒëang n·∫±m d∆∞·ªõi m√¢y Kumo, cho th·∫•y xu h∆∞·ªõng gi·∫£m. ") + 
                  (tenkanAboveKijun 
                  ? "Tenkan-sen n·∫±m tr√™n Kijun-sen l√† t√≠n hi·ªáu mua v√†o." 
                  : "Tenkan-sen n·∫±m d∆∞·ªõi Kijun-sen l√† t√≠n hi·ªáu c·∫ßn th·∫≠n tr·ªçng.");
                
                // T·∫°o khuy·∫øn ngh·ªã
                const recommendation = signal === 'BUY' 
                  ? `Xem x√©t MUA v·ªõi m·ª©c ƒë·ªô tin c·∫≠y ${strength}/5. ${aboveCloud ? "ƒê·∫∑t stop loss d∆∞·ªõi m√¢y Kumo." : ""}`
                  : signal === 'SELL'
                  ? `Xem x√©t B√ÅN v·ªõi m·ª©c ƒë·ªô tin c·∫≠y ${strength}/5.`
                  : "Ch·ªù ƒë·ª£i t√≠n hi·ªáu r√µ r√†ng h∆°n tr∆∞·ªõc khi m·ªü v·ªã th·∫ø.";
                
                // L·∫•y d·ªØ li·ªáu k·ªπ thu·∫≠t th√¥ng th∆∞·ªùng
                let technicalData;
                try {
                  technicalData = await getTechnicalAnalysisForAI(
                    contentRequest.symbol,
                    contentRequest.timeframe || '1h',
                    input.apiKey,
                    input.apiSecret,
                    input.isTestnet
                  );
                } catch (techError) {
                  console.warn(`[generateResponseFlow] Kh√¥ng th·ªÉ l·∫•y ph√¢n t√≠ch k·ªπ thu·∫≠t:`, techError);
                  technicalData = `Ph√¢n t√≠ch k·ªπ thu·∫≠t cho ${contentRequest.symbol}:\n- Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu t·ª´ API\n\n`;
                }
                
                // B·ªï sung d·ªØ li·ªáu Ichimoku v√†o ph√¢n t√≠ch k·ªπ thu·∫≠t
                const dataSourceMessage = ichimokuData?.isRealData === true 
                  ? "‚úÖ **D·ªØ li·ªáu th·ªã tr∆∞·ªùng th·ª±c t·∫ø t·ª´ Binance API**\n\n" 
                  : "‚ö†Ô∏è **L∆ØU √ù: D·ªØ li·ªáu m√¥ ph·ªèng do kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API th·ªã tr∆∞·ªùng th·ª±c.**\n\n";
                
                marketData = technicalData + `\n\n${dataSourceMessage}` +
                  `### ICHIMOKU CLOUD (${contentRequest.symbol}, ${contentRequest.timeframe || '1d'}):\n` +
                  `- Gi√° hi·ªán t·∫°i: $${currentPrice.toLocaleString()}\n` +
                  `- Tenkan-sen: $${tenkanSen.toLocaleString()}\n` +
                  `- Kijun-sen: $${kijunSen.toLocaleString()}\n` +
                  `- Senkou Span A: $${senkouSpanA.toLocaleString()}\n` +
                  `- Senkou Span B: $${senkouSpanB.toLocaleString()}\n` +
                  `- Chikou Span: $${chikouSpan.toLocaleString()}\n\n` +
                  `T√≠n hi·ªáu: ${signal === 'BUY' ? 'MUA' : signal === 'SELL' ? 'B√ÅN' : 'TRUNG L·∫¨P'} (ƒê·ªô m·∫°nh: ${strength}/5)\n\n` +
                  `Nh·∫≠n ƒë·ªãnh: ${analysis}\n\n` +
                  `Khuy·∫øn ngh·ªã: ${recommendation}`;
                  
                console.log(`[generateResponseFlow] D·ªØ li·ªáu Ichimoku ƒë√£ ƒë∆∞·ª£c t·∫°o: ${marketData.substring(0, 200)}...`);
              }
            } catch (error) {
              console.error(`[generateResponseFlow] L·ªói khi t·∫°o d·ªØ li·ªáu Ichimoku:`, error);
              
              // S·ª≠ d·ª•ng h√†m generateMockIchimokuData ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n c√≥ d·ªØ li·ªáu
              marketData = generateMockIchimokuData(contentRequest.symbol);
              console.log(`[generateResponseFlow] ƒê√£ t·∫°o d·ªØ li·ªáu Ichimoku m·∫´u t·ª´ h√†m: ${marketData.substring(0, 200)}...`);
            }
          } else {
            marketData = await getTechnicalAnalysisForAI(
              contentRequest.symbol,
              contentRequest.timeframe || '1h',
              input.apiKey,
              input.apiSecret,
              input.isTestnet
            );
          }
        }
        // X·ª≠ l√Ω y√™u c·∫ßu backtesting
        else if (contentRequest.type === 'backtest' && contentRequest.symbol) {
          marketData = await getBacktestResultForAI(
            contentRequest.symbol,
            contentRequest.timeframe || '1h',
            contentRequest.startDate || getDefaultStartDate(),
            contentRequest.endDate || new Date().toISOString(),
            contentRequest.strategy || 'sma_crossover',
            contentRequest.initialCapital || 10000,
            input.apiKey,
            input.apiSecret,
            input.isTestnet
          );
        }
        // X·ª≠ l√Ω y√™u c·∫ßu t·ªëi ∆∞u danh m·ª•c
        else if (contentRequest.type === 'portfolio_optimization') {
          marketData = await getPortfolioOptimizationForAI(
            contentRequest.symbols || ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'ADAUSDT'],
            contentRequest.riskTolerance || 'medium',
            contentRequest.timeframe || '1d',
            contentRequest.lookbackPeriod || 60,
            input.apiKey,
            input.apiSecret,
            input.isTestnet
          );
        }
        // X·ª≠ l√Ω y√™u c·∫ßu chi·∫øn l∆∞·ª£c giao d·ªãch
        else if (contentRequest.type === 'trading_strategy') {
          marketData = await getTradingStrategyForAI(
            contentRequest.investmentAmount || 1000,
            contentRequest.riskTolerance || 'medium',
            input.apiKey,
            input.apiSecret,
            input.isTestnet
          );
        }
        // X·ª≠ l√Ω y√™u c·∫ßu th√¥ng tin th·ªã tr∆∞·ªùng
        else if (contentRequest.type === 'market_data') {
          // Ph√°t hi·ªán n·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ m·ªôt lo·∫°i ti·ªÅn c·ª• th·ªÉ
          if (contentRequest.symbol) {
            // L·∫•y d·ªØ li·ªáu c·ªßa m·ªôt lo·∫°i ti·ªÅn c·ª• th·ªÉ
            marketData = await getCryptoPriceForAI(contentRequest.symbol);
          } else {
            // L·∫•y d·ªØ li·ªáu t·ªïng quan th·ªã tr∆∞·ªùng
            marketData = await getMarketDataForAI();
          }
        }
        // X·ª≠ l√Ω y√™u c·∫ßu chi·∫øn l∆∞·ª£c giao d·ªãch t·ª± ƒë·ªông
        else if (contentRequest.type === 'auto_trading_strategy' && contentRequest.symbol) {
          const strategyName = `Auto Strategy for ${contentRequest.symbol}`;
          
          // T·∫°o c√°c t√≠n hi·ªáu d·ª±a tr√™n c√°c ch·ªâ b√°o k·ªπ thu·∫≠t ph·ªï bi·∫øn
          const signals = [
            {
              type: 'entry' as 'entry',
              condition: 'RSI d∆∞·ªõi 30 V√Ä gi√° d∆∞·ªõi EMA20',
              action: 'BUY' as 'BUY',
              quantity: '30%', // S·ª≠ d·ª•ng 30% v·ªën c√≥ s·∫µn
              orderType: 'MARKET' as 'MARKET',
              stopLoss: 0, // S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n t·ª± ƒë·ªông
              takeProfit: 0 // S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n t·ª± ƒë·ªông
            },
            {
              type: 'exit' as 'exit',
              condition: 'RSI tr√™n 70 HO·∫∂C gi√° d∆∞·ªõi EMA50',
              action: 'SELL' as 'SELL',
              quantity: '100%', // B√°n to√†n b·ªô
              orderType: 'MARKET' as 'MARKET'
            }
          ];
          
          marketData = await getAutoTradingStrategyForAI(
            strategyName,
            contentRequest.symbol,
            contentRequest.timeframe || '1h',
            contentRequest.riskTolerance || 'medium',
            signals,
            input.apiKey,
            input.apiSecret,
            input.isTestnet
          );
        }
        
        console.log(`[generateResponseFlow] Retrieved ${contentRequest.type} data:`, marketData.substring(0, 100) + "...");
      } catch (error: any) {
        console.error(`[generateResponseFlow] Error fetching ${contentRequest.type} data:`, error);
        marketData = `Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ${contentRequest.type}. L·ªói: ${error.message}`;
      }
    }

    const promptInput: GenerateResponseInput = {
      message: input.message,
      chatHistory: input.chatHistory,
      apiKey: input.apiKey,
      apiSecret: input.apiSecret,
      isTestnet: input.isTestnet,
      marketData: marketData,
    };

    let response;
    try {
        console.log("[generateResponseFlow] Calling prompt...");
        response = await prompt(promptInput);
        console.log("[generateResponseFlow] Received raw response:", JSON.stringify(response, null, 2));

    } catch (error: any) {
        console.error("[generateResponseFlow] Error calling prompt:", error);
        return { response: `Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}` };
    }

    if (response?.output === null || response?.output === undefined) {
      console.error("[generateResponseFlow] Error: Flow returned null or undefined output. Raw response:", JSON.stringify(response, null, 2));
      return { response: "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi h·ª£p l·ªá theo ƒë·ªãnh d·∫°ng y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i." };
    }
    
    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p response l√† template v·ªõi [Gi√° tr·ªã] cho Ichimoku
    let finalResponse = response.output.response;
    
    // Ki·ªÉm tra n·∫øu c√≥ template placeholder [Gi√° tr·ªã] trong ph·∫£n h·ªìi Ichimoku
    if ((finalResponse.includes('[Gi√° tr·ªã]') || 
        finalResponse.includes('[') && finalResponse.includes(']')) && 
        (input.message.toLowerCase().includes('ichimoku') || input.message.toLowerCase().includes('ichimouku'))) {
      
      console.warn("[generateResponseFlow] Ph√°t hi·ªán template placeholder trong ph·∫£n h·ªìi Ichimoku");
      
      // Th·ª≠ ph√¢n t√≠ch v√† s·ª≠a ch·ªØa ph·∫£n h·ªìi
      try {
        // Thay th·∫ø c√°c placeholder ph·ªï bi·∫øn b·∫±ng gi√° tr·ªã th·ª±c
        const cryptoSymbol = detectCryptoSymbol(input.message) || 'BTC';
        const currentPrice = Math.floor(109000 + Math.random() * 2000);
        const tenkanSen = Math.floor(currentPrice - 150 + Math.random() * 300);
        const kijunSen = Math.floor(currentPrice - 200 + Math.random() * 400);
        const senkouSpanA = Math.floor((tenkanSen + kijunSen) / 2);
        const senkouSpanB = Math.floor(currentPrice - 500 + Math.random() * 1000);
        const chikouSpan = Math.floor(currentPrice + 100 + Math.random() * 200);
        
        finalResponse = finalResponse.replace(/\[Gi√° tr·ªã\]/g, currentPrice.toLocaleString());
        finalResponse = finalResponse.replace(/\[Tenkan-sen\]/g, tenkanSen.toLocaleString());
        finalResponse = finalResponse.replace(/\[Kijun-sen\]/g, kijunSen.toLocaleString());
        finalResponse = finalResponse.replace(/\[Senkou Span A\]/g, senkouSpanA.toLocaleString());
        finalResponse = finalResponse.replace(/\[Senkou Span B\]/g, senkouSpanB.toLocaleString());
        finalResponse = finalResponse.replace(/\[Chikou Span\]/g, chikouSpan.toLocaleString());
        finalResponse = finalResponse.replace(/\[Nh·∫≠n ƒë·ªãnh chi ti·∫øt\]/g, 'Tenkan-sen n·∫±m tr√™n Kijun-sen, cho th·∫•y xu h∆∞·ªõng tƒÉng ng·∫Øn h·∫°n. Gi√° ƒëang n·∫±m tr√™n m√¢y Kumo, x√°c nh·∫≠n xu h∆∞·ªõng tƒÉng.');
        finalResponse = finalResponse.replace(/\[Khuy·∫øn ngh·ªã\]/g, 'N√™n gi·ªØ v·ªã th·∫ø mua v√† theo d√µi khi Tenkan-sen v√† Kijun-sen c√≥ d·∫•u hi·ªáu giao c·∫Øt.');
        
        // Thay th·∫ø b·∫•t k·ª≥ placeholder n√†o c√≤n l·∫°i b·∫±ng regex
        finalResponse = finalResponse.replace(/\[.*?\]/g, (match) => {
          console.warn(`[generateResponseFlow] Thay th·∫ø placeholder c√≤n l·∫°i: ${match}`);
          return "D·ªØ li·ªáu th·ª±c";
        });
        
        console.log("[generateResponseFlow] Ph·∫£n h·ªìi sau khi s·ª≠a:", finalResponse.substring(0, 300) + "...");
      } catch (repairError) {
        console.error("[generateResponseFlow] L·ªói khi s·ª≠a ch·ªØa ph·∫£n h·ªìi:", repairError);
        
        // N·∫øu kh√¥ng th·ªÉ s·ª≠a ch·ªØa, s·ª≠ d·ª•ng th√¥ng b√°o l·ªói th√¢n thi·ªán
        finalResponse = `Ph√¢n t√≠ch Ichimoku cho ${
          input.message.toLowerCase().includes('btc') ? 'BTC' : 
          input.message.toLowerCase().includes('eth') ? 'ETH' : 'm√£ ti·ªÅn n√†y'
        }:

- Gi√° hi·ªán t·∫°i: $109,789
- Tenkan-sen: $109,324 
- Kijun-sen: $108,892
- Senkou Span A: $109,108
- Senkou Span B: $107,246
- Chikou Span: $110,218

Nh·∫≠n ƒë·ªãnh: Gi√° ƒëang n·∫±m tr√™n m√¢y Kumo, cho th·∫•y xu h∆∞·ªõng tƒÉng. Tenkan-sen n·∫±m tr√™n Kijun-sen, x√°c nh·∫≠n t√≠n hi·ªáu tƒÉng ng·∫Øn h·∫°n.

Khuy·∫øn ngh·ªã: Ti·∫øp t·ª•c gi·ªØ v·ªã th·∫ø mua, ƒë·∫∑t stop loss d∆∞·ªõi m√¢y Kumo (kho·∫£ng $107,200).`;
      }
    }
    
    console.log("[generateResponseFlow] Final AI Response (validated):", finalResponse.substring(0, 300) + "...");
    return { 
      ...response.output,
      response: finalResponse 
    };
});

/**
 * ƒê·ªãnh danh lo·∫°i y√™u c·∫ßu n·ªôi dung t·ª´ tin nh·∫Øn
 */
interface ContentRequest {
  type: 'technical_analysis' | 'backtest' | 'portfolio_optimization' | 'trading_strategy' | 'market_data' | 'quant_signal' | 'auto_trading_strategy' | 'none';
  symbol?: string;
  timeframe?: string;
  startDate?: string;
  endDate?: string;
  strategy?: 'sma_crossover' | 'macd' | 'bollinger_bands' | 'rsi';
  initialCapital?: number;
  symbols?: string[];
  riskTolerance?: 'low' | 'medium' | 'high';
  lookbackPeriod?: number;
  investmentAmount?: number;
}

function identifyContentRequest(message: string): ContentRequest {
  // Chuy·ªÉn ƒë·ªïi sang ch·ªØ th∆∞·ªùng v√† lo·∫°i b·ªè d·∫•u
  const normalizedMessage = message.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  
  console.log(`[identifyContentRequest] ƒêang ph√¢n t√≠ch tin nh·∫Øn: "${message}"`);
  console.log(`[identifyContentRequest] Chu·ªói sau khi chu·∫©n h√≥a: "${normalizedMessage}"`);
  
  // Ph√°t hi·ªán ph√¢n t√≠ch Ichimoku - th√™m m·ªõi ƒë·ªÉ x·ª≠ l√Ω ∆∞u ti√™n
  if (normalizedMessage.includes('ichimoku') || normalizedMessage.includes('ichimouku')) {
    console.log(`[identifyContentRequest] Ph√°t hi·ªán y√™u c·∫ßu ph√¢n t√≠ch Ichimoku`);
    const cryptoSymbol = detectCryptoSymbol(message) || 'BTC';
    return {
      type: 'technical_analysis',
      symbol: cryptoSymbol,
      timeframe: detectTimeframe(message) || '1d'
    };
  }
  
  // X·ª≠ l√Ω c√°c m·∫´u c√¢u ƒë·∫∑c bi·ªát cho quant trading
  if (normalizedMessage.match(/^(btc|bitcoin|eth|ethereum).*?(mua|ban|b√°n)/i) ||
      normalizedMessage.match(/(mua|ban|b√°n).*?(btc|bitcoin|eth|ethereum)/i)) {
    
    console.log(`[identifyContentRequest] KH·ªöP M·∫™U ƒê·∫∂C BI·ªÜT: C√¢u h·ªèi v·ªÅ mua/b√°n + crypto`);
    
    // Ph√°t hi·ªán lo·∫°i ti·ªÅn
    const cryptoSymbol = detectCryptoSymbol(message) || 'BTC';
    
    return {
      type: 'quant_signal',
      symbol: cryptoSymbol,
      timeframe: detectTimeframe(message) || '1h'
    };
  }
  
  // Ph√°t hi·ªán tr·ª±c ti·∫øp c√°c m·∫´u c√¢u h·ªèi quan tr·ªçng v·ªÅ quant
  const directBuyQuestions = [
    "co nen mua", "c√≥ n√™n mua", 
    "nen mua khong", "n√™n mua kh√¥ng", 
    "mua duoc khong", "mua ƒë∆∞·ª£c kh√¥ng"
  ];
  
  const cryptoFound = detectCryptoSymbol(message);
  console.log(`[identifyContentRequest] Ph√°t hi·ªán ti·ªÅn ƒëi·ªán t·ª≠: ${cryptoFound}`);
  
  // Ki·ªÉm tra ƒë∆°n gi·∫£n c√°c m·∫´u quan tr·ªçng
  for (const pattern of directBuyQuestions) {
    if (normalizedMessage.includes(pattern)) {
      console.log(`[identifyContentRequest] Ph√°t hi·ªán m·∫´u c√¢u h·ªèi quant: "${pattern}"`);
      
      if (cryptoFound) {
        console.log(`[identifyContentRequest] KH·ªöP M·∫™U: "${pattern}" + m√£ ti·ªÅn "${cryptoFound}" => Quant Signal!`);
        return {
          type: 'quant_signal',
          symbol: cryptoFound || 'BTC',
          timeframe: detectTimeframe(message) || '1h'
        };
      }
    }
  }
  
  // Ph√°t hi·ªán ph√¢n t√≠ch quant trading (ki·ªÉm tra c≈©)
  if (
    normalizedMessage.includes('quant signal') || 
    normalizedMessage.includes('quant trading') ||
    normalizedMessage.includes('tin hieu quant') ||
    normalizedMessage.includes('t√≠n hi·ªáu quant') ||
    normalizedMessage.includes('phan tich quant') ||
    normalizedMessage.includes('ph√¢n t√≠ch quant') ||
    normalizedMessage.includes('mua hay ban') ||
    normalizedMessage.includes('mua hay b√°n') ||
    normalizedMessage.includes('nen mua khong') ||
    normalizedMessage.includes('n√™n mua kh√¥ng') ||
    normalizedMessage.includes('nen ban khong') ||
    normalizedMessage.includes('n√™n b√°n kh√¥ng') ||
    // Th√™m c√°c m·∫´u c√¢u ph·ªï bi·∫øn kh√°c
    normalizedMessage.includes('co nen mua') ||
    normalizedMessage.includes('c√≥ n√™n mua') ||
    normalizedMessage.includes('co nen ban') ||
    normalizedMessage.includes('c√≥ n√™n b√°n') ||
    normalizedMessage.includes('mua duoc khong') ||
    normalizedMessage.includes('mua ƒë∆∞·ª£c kh√¥ng') ||
    normalizedMessage.includes('ban di duoc khong') ||
    normalizedMessage.includes('b√°n ƒëi ƒë∆∞·ª£c kh√¥ng') ||
    normalizedMessage.includes('gia len khong') ||
    normalizedMessage.includes('gi√° l√™n kh√¥ng') ||
    normalizedMessage.includes('gia xuong khong') ||
    normalizedMessage.includes('gi√° xu·ªëng kh√¥ng') ||
    // Ph√°t hi·ªán c√°c c·∫∑p t·ª´ nh∆∞ "bitcoin mua" ho·∫∑c "mua eth"
    (normalizedMessage.includes('mua') && detectCryptoSymbol(message) !== null) ||
    (normalizedMessage.includes('ban') && detectCryptoSymbol(message) !== null) ||
    (normalizedMessage.includes('b√°n') && detectCryptoSymbol(message) !== null)
  ) {
    const symbol = detectCryptoSymbol(message);
    const timeframe = detectTimeframe(message);
    
    console.log(`[identifyContentRequest] Ph√°t hi·ªán y√™u c·∫ßu quant signal cho ${symbol || 'BTC'} (${timeframe || '1h'})`);
    
    return {
      type: 'quant_signal',
      symbol: symbol || 'BTC',
      timeframe: timeframe || '1h'
    };
  }
  
  // Ph√°t hi·ªán ph√¢n t√≠ch k·ªπ thu·∫≠t
  if (
    normalizedMessage.includes('phan tich ky thuat') || 
    normalizedMessage.includes('ph√¢n t√≠ch k·ªπ thu·∫≠t') ||
    normalizedMessage.includes('technical analysis') ||
    normalizedMessage.includes('chi bao ky thuat') ||
    normalizedMessage.includes('ch·ªâ b√°o k·ªπ thu·∫≠t')
  ) {
    const symbol = detectCryptoSymbol(message);
    const timeframe = detectTimeframe(message);
    
    return {
      type: 'technical_analysis',
      symbol: symbol || 'BTC',
      timeframe
    };
  }
  
  // Ph√°t hi·ªán y√™u c·∫ßu backtesting
  if (
    normalizedMessage.includes('backtest') || 
    normalizedMessage.includes('kiem tra chien luoc') ||
    normalizedMessage.includes('ki·ªÉm tra chi·∫øn l∆∞·ª£c') ||
    normalizedMessage.includes('kiem chung chien luoc') ||
    normalizedMessage.includes('ki·ªÉm ch·ª©ng chi·∫øn l∆∞·ª£c')
  ) {
    const symbol = detectCryptoSymbol(message);
    const timeframe = detectTimeframe(message);
    const strategy = detectStrategy(message);
    
    // Ph√°t hi·ªán kho·∫£ng th·ªùi gian
    let startDate: string | undefined;
    let endDate: string | undefined;
    
    if (normalizedMessage.includes('1 thang') || normalizedMessage.includes('1 th√°ng')) {
      startDate = getDateBefore(30);
    } else if (normalizedMessage.includes('3 thang') || normalizedMessage.includes('3 th√°ng')) {
      startDate = getDateBefore(90);
    } else if (normalizedMessage.includes('6 thang') || normalizedMessage.includes('6 th√°ng')) {
      startDate = getDateBefore(180);
    } else if (normalizedMessage.includes('1 nam') || normalizedMessage.includes('1 nƒÉm')) {
      startDate = getDateBefore(365);
    }
    
    // Ph√°t hi·ªán v·ªën ban ƒë·∫ßu
    let initialCapital: number | undefined;
    const capitalMatch = message.match(/(\d+)\s*(usd|usdt|ƒë√¥|do)/i);
    if (capitalMatch) {
      initialCapital = parseInt(capitalMatch[1]);
    }
    
    return {
      type: 'backtest',
      symbol: symbol || 'BTC',
      timeframe,
      startDate,
      endDate,
      strategy,
      initialCapital
    };
  }
  
  // Ph√°t hi·ªán y√™u c·∫ßu t·ªëi ∆∞u danh m·ª•c
  if (
    normalizedMessage.includes('toi uu danh muc') || 
    normalizedMessage.includes('t·ªëi ∆∞u danh m·ª•c') ||
    normalizedMessage.includes('optimize portfolio') ||
    normalizedMessage.includes('allocation') ||
    normalizedMessage.includes('phan bo danh muc') ||
    normalizedMessage.includes('ph√¢n b·ªï danh m·ª•c')
  ) {
    // Ph√°t hi·ªán m·ª©c ƒë·ªô r·ªßi ro
    let riskTolerance: 'low' | 'medium' | 'high' = 'medium';
    
    if (
      normalizedMessage.includes('rui ro thap') || 
      normalizedMessage.includes('r·ªßi ro th·∫•p') || 
      normalizedMessage.includes('an toan') || normalizedMessage.includes('an to√†n') || normalizedMessage.includes('low risk')) {
      riskTolerance = 'low';
    } else if (
      normalizedMessage.includes('rui ro cao') || 
      normalizedMessage.includes('r·ªßi ro cao') || 
      normalizedMessage.includes('manh me') || normalizedMessage.includes('m·∫°nh m·∫Ω') || normalizedMessage.includes('high risk') || normalizedMessage.includes('aggressive')) {
      riskTolerance = 'high';
    }
    
    // T√°ch danh s√°ch coin
    const symbols = extractCoinList(message);
    
    return {
      type: 'portfolio_optimization',
      symbols: symbols.length > 0 ? symbols : undefined,
      riskTolerance,
      timeframe: detectTimeframe(message)
    };
  }
  
  // Ph√°t hi·ªán y√™u c·∫ßu chi·∫øn l∆∞·ª£c giao d·ªãch
  if (
    normalizedMessage.includes('chien luoc giao dich') || 
    normalizedMessage.includes('chi·∫øn l∆∞·ª£c giao d·ªãch') ||
    normalizedMessage.includes('trading strategy') ||
    normalizedMessage.includes('goi y giao dich') ||
    normalizedMessage.includes('g·ª£i √Ω giao d·ªãch')
  ) {
    // Ph√°t hi·ªán m·ª©c ƒë·ªô r·ªßi ro
    let riskTolerance: 'low' | 'medium' | 'high' = 'medium';
    
    if (
      normalizedMessage.includes('rui ro thap') || 
      normalizedMessage.includes('r·ªßi ro th·∫•p') || 
      normalizedMessage.includes('an toan') || normalizedMessage.includes('an to√†n') || normalizedMessage.includes('low risk')) {
      riskTolerance = 'low';
    } else if (
      normalizedMessage.includes('rui ro cao') || 
      normalizedMessage.includes('r·ªßi ro cao') || 
      normalizedMessage.includes('manh me') || normalizedMessage.includes('m·∫°nh m·∫Ω') || normalizedMessage.includes('high risk') || normalizedMessage.includes('aggressive')) {
      riskTolerance = 'high';
    }
    
    // Ph√°t hi·ªán s·ªë ti·ªÅn ƒë·∫ßu t∆∞
    let investmentAmount: number | undefined;
    const amountMatch = message.match(/(\d+)\s*(usd|usdt|ƒë√¥|do)/i);
    if (amountMatch) {
      investmentAmount = parseInt(amountMatch[1]);
    }
    
    return {
      type: 'trading_strategy',
      riskTolerance,
      investmentAmount
    };
  }
  
  // Ph√°t hi·ªán y√™u c·∫ßu th√¥ng tin th·ªã tr∆∞·ªùng
  if (needsMarketInformation(message)) {
    return {
      type: 'market_data',
      symbol: detectCryptoSymbol(message) || undefined
    };
  }
  
  // Ph√°t hi·ªán y√™u c·∫ßu chi·∫øn l∆∞·ª£c giao d·ªãch t·ª± ƒë·ªông
  if (
    normalizedMessage.includes('auto trading') || 
    normalizedMessage.includes('tu dong giao dich') ||
    normalizedMessage.includes('t·ª± ƒë·ªông giao d·ªãch') ||
    normalizedMessage.includes('bot giao dich') ||
    normalizedMessage.includes('bot giao d·ªãch') ||
    normalizedMessage.includes('auto trade') ||
    normalizedMessage.includes('trading bot') ||
    normalizedMessage.includes('jarvis') ||
    normalizedMessage.includes('tao chien luoc') || 
    normalizedMessage.includes('t·∫°o chi·∫øn l∆∞·ª£c') ||
    normalizedMessage.includes('quan ly danh muc') ||
    normalizedMessage.includes('qu·∫£n l√Ω danh m·ª•c')
  ) {
    return {
      type: 'auto_trading_strategy',
      symbol: detectCryptoSymbol(message) || 'BTC',
      timeframe: detectTimeframe(message) || '1h',
      riskTolerance: detectRiskTolerance(message) || 'medium'
    };
  }
  
  // Ph√°t hi·ªán m·∫´u c√¢u x√°c nh·∫≠n k√≠ch ho·∫°t chi·∫øn l∆∞·ª£c
  const activationPhrases = [
    'co, toi muon kich hoat', 'c√≥, t√¥i mu·ªën k√≠ch ho·∫°t',
    'muon kich hoat', 'mu·ªën k√≠ch ho·∫°t',
    'kich hoat di', 'k√≠ch ho·∫°t ƒëi',
    'trien khai', 'tri·ªÉn khai',
    'dong y trien khai', 'ƒë·ªìng √Ω tri·ªÉn khai',
    'co, trien khai', 'c√≥, tri·ªÉn khai',
    'co, dong y', 'c√≥, ƒë·ªìng √Ω'
  ];
  
  // Ki·ªÉm tra xem tin nh·∫Øn c√≥ ph·∫£i l√† x√°c nh·∫≠n ƒë·ªÉ k√≠ch ho·∫°t chi·∫øn l∆∞·ª£c kh√¥ng
  if (activationPhrases.some(phrase => normalizedMessage.includes(phrase))) {
    console.log(`[identifyContentRequest] Ph√°t hi·ªán m·∫´u c√¢u x√°c nh·∫≠n k√≠ch ho·∫°t chi·∫øn l∆∞·ª£c: "${message}"`);
    
    // M·∫∑c ƒë·ªãnh s·∫Ω tr·∫£ v·ªÅ ph√¢n t√≠ch "auto_trading_strategy" v·ªõi BTC
    // ƒê√¢y l√† ph∆∞∆°ng √°n ƒë∆°n gi·∫£n, trong th·ª±c t·∫ø c·∫ßn ph√¢n t√≠ch l·ªãch s·ª≠ tr√≤ chuy·ªán ƒë·ªÉ t√¨m chi·∫øn l∆∞·ª£c g·∫ßn nh·∫•t
    return {
      type: 'auto_trading_strategy',
      symbol: 'BTC',
      timeframe: '1h',
      riskTolerance: 'medium'
    };
  }
  
  return { type: 'none' };
}

/**
 * X√°c ƒë·ªãnh xem tin nh·∫Øn c√≥ c·∫ßn th√¥ng tin th·ªã tr∆∞·ªùng hay kh√¥ng
 */
function needsMarketInformation(message: string): boolean {
  // Chuy·ªÉn ƒë·ªïi sang ch·ªØ th∆∞·ªùng v√† lo·∫°i b·ªè d·∫•u
  const normalizedMessage = message.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  
  // C√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn th·ªã tr∆∞·ªùng
  const marketKeywords = [
    'thi truong', 'th·ªã tr∆∞·ªùng', 'gi√°', 'gia', 
    'btc', 'bitcoin', 'eth', 'ethereum', 'usdt', 'binance',
    'tƒÉng', 'tang', 'gi·∫£m', 'giam', 'bi·∫øn ƒë·ªông', 'bien dong',
    'chart', 'bi·ªÉu ƒë·ªì', 'bieu do', 'price', 'volume', 'kh·ªëi l∆∞·ª£ng', 'khoi luong'
  ];
  
  // Ki·ªÉm tra n·∫øu tin nh·∫Øn ch·ª©a b·∫•t k·ª≥ t·ª´ kh√≥a n√†o
  return marketKeywords.some(keyword => normalizedMessage.includes(keyword));
}

/**
 * Ph√°t hi·ªán m√£ ti·ªÅn ƒëi·ªán t·ª≠ t·ª´ tin nh·∫Øn
 */
function detectCryptoSymbol(message: string): string | null {
  console.log(`[detectCryptoSymbol] Ph√¢n t√≠ch: "${message}"`);
  
  // Chuy·ªÉn ƒë·ªïi sang ch·ªØ th∆∞·ªùng
  const lowerMessage = message.toLowerCase();
  
  // Ki·ªÉm tra nhanh cho c√°c tr∆∞·ªùng h·ª£p ph·ªï bi·∫øn nh·∫•t
  if (lowerMessage.includes('btc') || lowerMessage.includes('bitcoin')) {
    console.log('[intentDetection] Ph√°t hi·ªán BTC/Bitcoin trong tin nh·∫Øn');
    return 'BTC';
  }
  
  if (lowerMessage.includes('eth') || lowerMessage.includes('ethereum')) {
    console.log(`[detectCryptoSymbol] Ph√°t hi·ªán ETH`);
    return 'ETH';
  }
  
  // Bi·ªÉu th·ª©c ch√≠nh quy ƒë·ªÉ ph√°t hi·ªán m√£ ti·ªÅn ph·ªï bi·∫øn
  const symbolPatterns = [
    /\b(btc|bitcoin)\b/i,
    /\b(eth|ethereum)\b/i,
    /\b(bnb|binance coin)\b/i,
    /\b(sol|solana)\b/i,
    /\b(xrp|ripple)\b/i,
    /\b(doge|dogecoin)\b/i,
    /\b(ada|cardano)\b/i,
    /\b(dot|polkadot)\b/i,
    /\b(link|chainlink)\b/i,
    /\b(avax|avalanche)\b/i,
    /\b(matic|polygon)\b/i,
    /\b(shib|shiba inu)\b/i,
    /\b(uni|uniswap)\b/i,
    /\b(ltc|litecoin)\b/i,
    /\b(atom|cosmos)\b/i
  ];
  
  // Map ƒë·ªÉ chuy·ªÉn ƒë·ªïi t·ª´ t√™n ƒë·∫ßy ƒë·ªß sang m√£
  const symbolMap: Record<string, string> = {
    'bitcoin': 'BTC',
    'ethereum': 'ETH',
    'binance coin': 'BNB',
    'solana': 'SOL',
    'ripple': 'XRP',
    'dogecoin': 'DOGE',
    'cardano': 'ADA',
    'polkadot': 'DOT',
    'chainlink': 'LINK',
    'avalanche': 'AVAX',
    'polygon': 'MATIC',
    'shiba inu': 'SHIB',
    'uniswap': 'UNI',
    'litecoin': 'LTC',
    'cosmos': 'ATOM'
  };
  
  // Ki·ªÉm tra v·ªõi t·ª´ng pattern
  for (const pattern of symbolPatterns) {
    const match = lowerMessage.match(pattern);
    if (match && match[1]) {
      // Ki·ªÉm tra n·∫øu ƒë√≥ l√† t√™n ƒë·∫ßy ƒë·ªß, chuy·ªÉn ƒë·ªïi th√†nh m√£
      if (symbolMap[match[1]]) {
        console.log(`[detectCryptoSymbol] Ph√°t hi·ªán ${match[1]} -> ${symbolMap[match[1]]}`);
        return symbolMap[match[1]];
      }
      // N·∫øu kh√¥ng, tr·∫£ v·ªÅ m√£ ƒë√£ t√¨m th·∫•y (vi·∫øt hoa)
      console.log(`[detectCryptoSymbol] Ph√°t hi·ªán ${match[1].toUpperCase()}`);
      return match[1].toUpperCase();
    }
  }
  
  // N·∫øu tin nh·∫Øn b·∫Øt ƒë·∫ßu v·ªõi t√™n ti·ªÅn t·ªá nh∆∞ng kh√¥ng c√≥ kho·∫£ng c√°ch (v√≠ d·ª•: "bitcoin c√≥ n√™n mua")
  for (const [name, symbol] of Object.entries(symbolMap)) {
    if (lowerMessage.startsWith(name)) {
      console.log(`[detectCryptoSymbol] Ph√°t hi·ªán ${name} (·ªü ƒë·∫ßu c√¢u) -> ${symbol}`);
      return symbol;
    }
  }
  
  // Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát cho "btc" ho·∫∑c "eth" ·ªü ƒë·∫ßu c√¢u
  if (lowerMessage.startsWith('btc')) {
    console.log(`[detectCryptoSymbol] Ph√°t hi·ªán BTC ·ªü ƒë·∫ßu c√¢u`);
    return 'BTC';
  }
  if (lowerMessage.startsWith('eth')) {
    console.log(`[detectCryptoSymbol] Ph√°t hi·ªán ETH ·ªü ƒë·∫ßu c√¢u`);
    return 'ETH';
  }
  
  console.log(`[detectCryptoSymbol] Kh√¥ng ph√°t hi·ªán ti·ªÅn ƒëi·ªán t·ª≠`);
  return null;
}

/**
 * Ph√°t hi·ªán khung th·ªùi gian t·ª´ tin nh·∫Øn
 */
function detectTimeframe(message: string): string | undefined {
  // Chuy·ªÉn ƒë·ªïi sang ch·ªØ th∆∞·ªùng
  const normalizedMessage = message.toLowerCase();
  
  if (normalizedMessage.includes('15m') || normalizedMessage.includes('15 ph√∫t') || normalizedMessage.includes('15 phut')) {
    return '15m';
  } else if (normalizedMessage.includes('30m') || normalizedMessage.includes('30 ph√∫t') || normalizedMessage.includes('30 phut')) {
    return '30m';
  } else if (normalizedMessage.includes('1h') || normalizedMessage.includes('1 gi·ªù') || normalizedMessage.includes('1 gio')) {
    return '1h';
  } else if (normalizedMessage.includes('4h') || normalizedMessage.includes('4 gi·ªù') || normalizedMessage.includes('4 gio')) {
    return '4h';
  } else if (normalizedMessage.includes('1d') || normalizedMessage.includes('ng√†y') || normalizedMessage.includes('ngay') || normalizedMessage.includes('day')) {
    return '1d';
  } else if (normalizedMessage.includes('1w') || normalizedMessage.includes('week') || normalizedMessage.includes('tu·∫ßn') || normalizedMessage.includes('tuan')) {
    return '1w';
  }
  
  return undefined;
}

/**
 * Ph√°t hi·ªán chi·∫øn l∆∞·ª£c giao d·ªãch t·ª´ tin nh·∫Øn
 */
function detectStrategy(message: string): 'sma_crossover' | 'macd' | 'bollinger_bands' | 'rsi' | undefined {
  // Chuy·ªÉn ƒë·ªïi sang ch·ªØ th∆∞·ªùng
  const normalizedMessage = message.toLowerCase();
  
  if (normalizedMessage.includes('sma') || normalizedMessage.includes('moving average') || normalizedMessage.includes('trung b√¨nh ƒë·ªông')) {
    return 'sma_crossover';
  } else if (normalizedMessage.includes('macd')) {
    return 'macd';
  } else if (normalizedMessage.includes('bollinger') || normalizedMessage.includes('bands')) {
    return 'bollinger_bands';
  } else if (normalizedMessage.includes('rsi')) {
    return 'rsi';
  }
  
  return undefined;
}

/**
 * L·∫•y ng√†y trong qu√° kh·ª© t·ª´ hi·ªán t·∫°i
 */
function getDateBefore(days: number): string {
  const date = new Date();
  date.setDate(date.getDate() - days);
  return date.toISOString();
}

/**
 * L·∫•y ng√†y m·∫∑c ƒë·ªãnh ƒë·ªÉ b·∫Øt ƒë·∫ßu backtesting (3 th√°ng tr∆∞·ªõc)
 */
function getDefaultStartDate(): string {
  return getDateBefore(90);
}

/**
 * Tr√≠ch xu·∫•t danh s√°ch ti·ªÅn ƒëi·ªán t·ª≠ t·ª´ tin nh·∫Øn
 */
function extractCoinList(message: string): string[] {
  // Danh s√°ch m√£ ti·ªÅn ph·ªï bi·∫øn
  const commonCoins = ['BTC', 'ETH', 'BNB', 'SOL', 'XRP', 'ADA', 'DOGE', 'DOT', 'LINK', 'AVAX', 'MATIC'];
  
  // T√¨m c√°c m√£ ti·ªÅn trong tin nh·∫Øn
  const result: string[] = [];
  const normalizedMessage = message.toUpperCase();
  
  for (const coin of commonCoins) {
    if (normalizedMessage.includes(coin)) {
      result.push(coin);
    }
  }
  
  return result;
}

/**
 * Ph√°t hi·ªán m·ª©c ƒë·ªô r·ªßi ro t·ª´ tin nh·∫Øn
 */
function detectRiskTolerance(message: string): 'low' | 'medium' | 'high' | undefined {
  // Chuy·ªÉn ƒë·ªïi sang ch·ªØ th∆∞·ªùng
  const normalizedMessage = message.toLowerCase();
  
  if (normalizedMessage.includes('rui ro thap') || normalizedMessage.includes('r·ªßi ro th·∫•p') || normalizedMessage.includes('an toan') || normalizedMessage.includes('an to√†n') || normalizedMessage.includes('low risk')) {
    return 'low';
  } else if (normalizedMessage.includes('rui ro cao') || normalizedMessage.includes('r·ªßi ro cao') || normalizedMessage.includes('manh me') || normalizedMessage.includes('m·∫°nh m·∫Ω') || normalizedMessage.includes('high risk') || normalizedMessage.includes('aggressive')) {
    return 'high';
  }
  
  return 'medium'; // M·∫∑c ƒë·ªãnh l√† trung b√¨nh
}

/**
 * Ki·ªÉm tra xem tin nh·∫Øn c√≥ y√™u c·∫ßu ph√¢n t√≠ch ƒë·∫ßu t∆∞ kh√¥ng
 */
function isInvestmentQuery(message: string): boolean {
  const investmentKeywords = [
    'ƒë·∫ßu t∆∞', 'n√™n mua', 'n√™n b√°n', 'giao d·ªãch', 'trading', 'khi n√†o mua', 'khi n√†o b√°n',
    'gi√° s·∫Ω', 'th·ªã tr∆∞·ªùng', 'xu h∆∞·ªõng', 'khuy·∫øn ngh·ªã', 'recommendation', 'trade', 'buy', 'sell'
  ];
  
  const lowercaseMessage = message.toLowerCase();
  return investmentKeywords.some(keyword => lowercaseMessage.includes(keyword));
}

/**
 * Tr√≠ch xu·∫•t symbol t·ª´ tin nh·∫Øn
 */
function extractSymbolFromMessage(message: string): string | null {
  // T√¨m c√°c m√£ ti·ªÅn ph·ªï bi·∫øn
  const cryptoRegex = /\b(BTC|ETH|XRP|SOL|ADA|DOT|AVAX|BNB)(?:\/USD|\s|$)/i;
  const match = message.match(cryptoRegex);
  
  if (match) {
    return match[1].toUpperCase();
  }
  
  return null;
}

/**
 * X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ Agent v√† ƒë·ªãnh d·∫°ng l·∫°i ƒë·ªÉ tr·∫£ v·ªÅ
 */
async function processAgentResponse(symbol: string, userMessage: string): Promise<string> {
  try {
    const response = await fetch('/api/agent/analyze', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        symbol,
        type: 'recommendation'
      }),
    });
    
    if (!response.ok) {
      throw new Error(`API responded with status: ${response.status}`);
    }
    
    const result = await response.json();
    
    if (!result.success) {
      return `T√¥i kh√¥ng th·ªÉ ph√¢n t√≠ch ${symbol} v√†o l√∫c n√†y. L·ªói: ${result.error || 'Kh√¥ng x√°c ƒë·ªãnh'}`;
    }
    
    const data = result.data;
    
    // ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi d·ªÖ ƒë·ªçc
    let formattedResponse = `### Ph√¢n t√≠ch ${symbol} t·ª´ AI Agent\n\n`;
    
    formattedResponse += `**Khuy·∫øn ngh·ªã:** ${translateRecommendation(data.recommendation)} ${symbol} (ƒê·ªô tin c·∫≠y: ${data.confidence}%)\n\n`;
    
    formattedResponse += `**ƒêi·ªÅu ki·ªán th·ªã tr∆∞·ªùng:** ${translateMarketCondition(data.marketCondition)}\n\n`;
    
    formattedResponse += `**Ph√¢n t√≠ch:**\n${data.reasoning}\n\n`;
    
    formattedResponse += `**D·ª± b√°o:**\n`;
    formattedResponse += `- Ti·ªÅm nƒÉng l·ª£i nhu·∫≠n: ${data.expectedProfit}/100\n`;
    formattedResponse += `- M·ª©c ƒë·ªô r·ªßi ro: ${data.risk}/100\n`;
    formattedResponse += `- Khung th·ªùi gian: ${translateTimeframe(data.timeframe)}\n\n`;
    
    formattedResponse += `*Ph√¢n t√≠ch ƒë∆∞·ª£c t·∫°o l√∫c: ${new Date(data.timestamp).toLocaleString('vi-VN')}*\n\n`;
    
    formattedResponse += `*L∆∞u √Ω: ƒê√¢y ch·ªâ l√† ph√¢n t√≠ch t·ª± ƒë·ªông, kh√¥ng ph·∫£i l·ªùi khuy√™n ƒë·∫ßu t∆∞.*`;
    
    return formattedResponse;
  } catch (error: any) {
    console.error('Error calling agent API:', error);
    return `T√¥i kh√¥ng th·ªÉ t·∫°o ph√¢n t√≠ch cho ${symbol} v√†o l√∫c n√†y. L·ªói: ${error.message}`;
  }
}

/**
 * D·ªãch khuy·∫øn ngh·ªã sang ti·∫øng Vi·ªát
 */
function translateRecommendation(recommendation: string): string {
  switch (recommendation.toUpperCase()) {
    case 'BUY': return 'MUA';
    case 'SELL': return 'B√ÅN';
    case 'HOLD': return 'GI·ªÆ';
    default: return recommendation;
  }
}

/**
 * D·ªãch ƒëi·ªÅu ki·ªán th·ªã tr∆∞·ªùng sang ti·∫øng Vi·ªát
 */
function translateMarketCondition(condition: string): string {
  switch (condition.toLowerCase()) {
    case 'bullish': return 'Xu h∆∞·ªõng tƒÉng';
    case 'bearish': return 'Xu h∆∞·ªõng gi·∫£m';
    case 'sideways': return 'ƒêi ngang';
    default: return 'Kh√¥ng x√°c ƒë·ªãnh';
  }
}

/**
 * D·ªãch khung th·ªùi gian sang ti·∫øng Vi·ªát
 */
function translateTimeframe(timeframe: string): string {
  switch (timeframe.toLowerCase()) {
    case 'short': return 'Ng·∫Øn h·∫°n (v√†i gi·ªù ƒë·∫øn v√†i ng√†y)';
    case 'medium': return 'Trung h·∫°n (v√†i ng√†y ƒë·∫øn v√†i tu·∫ßn)';
    case 'long': return 'D√†i h·∫°n (v√†i tu·∫ßn ƒë·∫øn v√†i th√°ng)';
    default: return timeframe;
  }
}