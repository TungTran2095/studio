import { z } from 'zod';

/**
 * Advanced AI Tools for Yinsen Workspace Integration
 * B·ªï sung th√™m AI capabilities m√† kh√¥ng thay th·∫ø workspace tools hi·ªán c√≥
 */

// ===== SCHEMAS =====

const advancedSentimentAnalysisSchema = z.object({
  symbol: z.string().describe('Symbol crypto ƒë·ªÉ ph√¢n t√≠ch sentiment'),
  includeEmotions: z.boolean().optional().default(true).describe('Bao g·ªìm ph√¢n t√≠ch c·∫£m x√∫c'),
  includeTrends: z.boolean().optional().default(false).describe('Bao g·ªìm ph√¢n t√≠ch xu h∆∞·ªõng sentiment')
});

const anomalyDetectionSchema = z.object({
  symbol: z.string().describe('Symbol crypto ƒë·ªÉ ph√°t hi·ªán b·∫•t th∆∞·ªùng'),
  metrics: z.array(z.enum(['price', 'volume', 'sentiment'])).optional().default(['price', 'volume']).describe('C√°c metrics ƒë·ªÉ ph√¢n t√≠ch'),
  sensitivity: z.enum(['low', 'medium', 'high']).optional().default('medium').describe('ƒê·ªô nh·∫°y ph√°t hi·ªán b·∫•t th∆∞·ªùng')
});

const smartAlertSetupSchema = z.object({
  symbols: z.array(z.string()).describe('Danh s√°ch symbols ƒë·ªÉ theo d√µi'),
  tradingStyle: z.enum(['conservative', 'moderate', 'aggressive', 'scalper']).describe('Phong c√°ch giao d·ªãch'),
  alertTypes: z.array(z.enum(['price', 'volume', 'sentiment', 'anomaly'])).optional().default(['price', 'anomaly']).describe('Lo·∫°i c·∫£nh b√°o')
});

const batchAnalysisSchema = z.object({
  symbols: z.array(z.string()).describe('Danh s√°ch symbols ƒë·ªÉ ph√¢n t√≠ch'),
  analysisType: z.enum(['sentiment', 'anomaly', 'both']).describe('Lo·∫°i ph√¢n t√≠ch'),
  includeRecommendations: z.boolean().optional().default(true).describe('Bao g·ªìm khuy·∫øn ngh·ªã')
});

// ===== OUTPUT SCHEMAS =====

const advancedAIOutputSchema = z.object({
  success: z.boolean(),
  message: z.string(),
  data: z.any().optional(),
  recommendations: z.array(z.string()).optional(),
  confidence: z.number().optional(),
  timestamp: z.string()
});

// ===== TOOLS =====

export const advancedSentimentAnalysisTool = {
  schema: {
    name: 'advanced_sentiment_analysis',
    description: 'Ph√¢n t√≠ch sentiment ƒëa chi·ªÅu v·ªõi AI n√¢ng cao cho crypto',
    parameters: advancedSentimentAnalysisSchema,
    returnType: advancedAIOutputSchema,
  },
  execute: async (input: z.infer<typeof advancedSentimentAnalysisSchema>) => {
    try {
      console.log(`üß† [AdvancedAI-Tools] Advanced sentiment analysis for ${input.symbol}`);
      
      const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:9002';
      const response = await fetch(`${baseUrl}/api/ai/advanced-sentiment?symbol=${input.symbol}&action=analyze`);
      const result = await response.json();

      if (!result.success) {
        return {
          success: false,
          message: `‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch sentiment cho ${input.symbol}: ${result.error}`,
          timestamp: new Date().toISOString()
        };
      }

      const sentiment = result.data;
      let message = `üß† **Ph√¢n t√≠ch Sentiment N√¢ng cao cho ${input.symbol}**\n\n`;

      // Overall sentiment
      const overallScore = sentiment.overallSentiment.score;
      const overallTrend = sentiment.overallSentiment.trend;
      const confidence = sentiment.overallSentiment.confidence;

      message += `üìä **T·ªïng quan Sentiment:**\n`;
      message += `- ƒêi·ªÉm s·ªë: ${overallScore.toFixed(2)} (${overallScore > 0.3 ? 'üü¢ T√≠ch c·ª±c' : overallScore < -0.3 ? 'üî¥ Ti√™u c·ª±c' : '‚ö™ Trung t√≠nh'})\n`;
      message += `- Xu h∆∞·ªõng: ${overallTrend === 'improving' ? 'üìà C·∫£i thi·ªán' : overallTrend === 'declining' ? 'üìâ Suy gi·∫£m' : '‚û°Ô∏è ·ªîn ƒë·ªãnh'}\n`;
      message += `- ƒê·ªô tin c·∫≠y: ${(confidence * 100).toFixed(0)}%\n\n`;

      // Text sentiment
      message += `üì∞ **Sentiment t·ª´ Tin t·ª©c:**\n`;
      message += `- ƒêi·ªÉm s·ªë: ${sentiment.textSentiment.score.toFixed(2)}\n`;
      message += `- Keywords: ${sentiment.textSentiment.keywords.slice(0, 5).join(', ')}\n\n`;

      // Fear & Greed Index
      message += `üò®üòç **Ch·ªâ s·ªë Fear & Greed:**\n`;
      message += `- Gi√° tr·ªã: ${sentiment.fearGreedIndex.value}/100\n`;
      message += `- M·ª©c ƒë·ªô: ${sentiment.fearGreedIndex.level.replace('_', ' ').toUpperCase()}\n\n`;

      // Price action sentiment
      message += `üíπ **Sentiment t·ª´ Price Action:**\n`;
      message += `- Momentum: ${sentiment.priceActionSentiment.momentum.toFixed(2)}\n`;
      message += `- Technical Bias: ${sentiment.priceActionSentiment.technicalBias.toUpperCase()}\n\n`;

      // Emotions (if requested)
      if (input.includeEmotions) {
        const emotions = sentiment.textSentiment.emotions;
        message += `üé≠ **Ph√¢n t√≠ch C·∫£m x√∫c:**\n`;
        message += `- Fear: ${(emotions.fear * 100).toFixed(0)}%\n`;
        message += `- Greed: ${(emotions.greed * 100).toFixed(0)}%\n`;
        message += `- Optimism: ${(emotions.optimism * 100).toFixed(0)}%\n`;
        message += `- Pessimism: ${(emotions.pessimism * 100).toFixed(0)}%\n\n`;
      }

      // Signals
      if (sentiment.overallSentiment.signals.length > 0) {
        message += `üéØ **T√≠n hi·ªáu:**\n`;
        sentiment.overallSentiment.signals.forEach((signal: string) => {
          message += `- ${signal}\n`;
        });
        message += '\n';
      }

      // Get trends if requested
      if (input.includeTrends) {
        const trendsResponse = await fetch(`${baseUrl}/api/ai/advanced-sentiment?symbol=${input.symbol}&action=trends&timeWindow=24h`);
        const trendsResult = await trendsResponse.json();
        
        if (trendsResult.success) {
          const trends = trendsResult.data;
          message += `üìà **Xu h∆∞·ªõng Sentiment (24h):**\n`;
          message += `- Momentum: ${trends.momentum.toFixed(3)}\n`;
          message += `- Volatility: ${trends.volatility.toFixed(3)}\n`;
          message += `- Trend: ${trends.trend.toUpperCase()}\n`;
          message += `- Strength: ${(trends.strength * 100).toFixed(0)}%\n\n`;
        }
      }

      // Generate recommendations
      const recommendations = [];
      if (overallScore > 0.5 && confidence > 0.7) {
        recommendations.push('Sentiment r·∫•t t√≠ch c·ª±c - c√¢n nh·∫Øc mua v√†o');
      } else if (overallScore < -0.5 && confidence > 0.7) {
        recommendations.push('Sentiment r·∫•t ti√™u c·ª±c - c√¢n nh·∫Øc ch·ªët l·ªùi ho·∫∑c tr√°nh mua');
      }
      
      if (sentiment.fearGreedIndex.level === 'extreme_fear') {
        recommendations.push('Extreme Fear - c√≥ th·ªÉ l√† c∆° h·ªôi mua v√†o t·ªët');
      } else if (sentiment.fearGreedIndex.level === 'extreme_greed') {
        recommendations.push('Extreme Greed - c√¢n nh·∫Øc ch·ªët l·ªùi');
      }

      return {
        success: true,
        message,
        data: sentiment,
        recommendations,
        confidence,
        timestamp: new Date().toISOString()
      };

    } catch (error: any) {
      console.error('‚ùå [AdvancedAI-Tools] Sentiment analysis error:', error);
      return {
        success: false,
        message: '‚ùå L·ªói khi ph√¢n t√≠ch sentiment n√¢ng cao.',
        timestamp: new Date().toISOString()
      };
    }
  }
};

export const anomalyDetectionTool = {
  schema: {
    name: 'anomaly_detection',
    description: 'Ph√°t hi·ªán b·∫•t th∆∞·ªùng trong d·ªØ li·ªáu crypto b·∫±ng AI',
    parameters: anomalyDetectionSchema,
    returnType: advancedAIOutputSchema,
  },
  execute: async (input: z.infer<typeof anomalyDetectionSchema>) => {
    try {
      console.log(`üîç [AdvancedAI-Tools] Anomaly detection for ${input.symbol}`);
      
      const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:9002';
      const metricsParam = input.metrics.join(',');
      const response = await fetch(`${baseUrl}/api/ai/smart-alerts?symbol=${input.symbol}&action=detect_anomalies&metrics=${metricsParam}`);
      const result = await response.json();

      if (!result.success) {
        return {
          success: false,
          message: `‚ùå Kh√¥ng th·ªÉ ph√°t hi·ªán b·∫•t th∆∞·ªùng cho ${input.symbol}: ${result.error}`,
          timestamp: new Date().toISOString()
        };
      }

      const anomaly = result.data;
      let message = `üîç **Ph√°t hi·ªán B·∫•t th∆∞·ªùng cho ${input.symbol}**\n\n`;

      if (!anomaly.isAnomaly) {
        message += `‚úÖ **Kh√¥ng ph√°t hi·ªán b·∫•t th∆∞·ªùng**\n`;
        message += `- ƒêi·ªÉm b·∫•t th∆∞·ªùng: ${(anomaly.anomalyScore * 100).toFixed(0)}%\n`;
        message += `- ƒê·ªô tin c·∫≠y: ${(anomaly.confidence * 100).toFixed(0)}%\n`;
        message += `- M√¥ t·∫£: ${anomaly.description}\n\n`;
        message += `üìä T·∫•t c·∫£ metrics ƒëang ho·∫°t ƒë·ªông trong ph·∫°m vi b√¨nh th∆∞·ªùng.`;
      } else {
        const severity = anomaly.anomalyScore > 0.8 ? 'üö® NGHI√äM TR·ªåNG' : 
                        anomaly.anomalyScore > 0.6 ? '‚ö†Ô∏è CAO' : 
                        anomaly.anomalyScore > 0.4 ? 'üü° TRUNG B√åNH' : 'üü¢ TH·∫§P';

        message += `üö® **B·∫§T TH∆Ø·ªúNG PH√ÅT HI·ªÜN** - M·ª©c ƒë·ªô: ${severity}\n\n`;
        message += `üìä **Chi ti·∫øt:**\n`;
        message += `- Lo·∫°i b·∫•t th∆∞·ªùng: ${anomaly.anomalyType.replace('_', ' ').toUpperCase()}\n`;
        message += `- ƒêi·ªÉm b·∫•t th∆∞·ªùng: ${(anomaly.anomalyScore * 100).toFixed(0)}%\n`;
        message += `- ƒê·ªô tin c·∫≠y: ${(anomaly.confidence * 100).toFixed(0)}%\n`;
        message += `- M√¥ t·∫£: ${anomaly.description}\n\n`;

        // Historical context
        if (anomaly.historicalContext) {
          message += `üìà **B·ªëi c·∫£nh L·ªãch s·ª≠:**\n`;
          message += `- S·ª± ki·ªán t∆∞∆°ng t·ª±: ${anomaly.historicalContext.similarEvents} l·∫ßn\n`;
          message += `- T√°c ƒë·ªông trung b√¨nh: ${anomaly.historicalContext.averageImpact.toFixed(1)}%\n`;
          message += `- Th·ªùi gian ph·ª•c h·ªìi: ${anomaly.historicalContext.recoveryTime}\n\n`;
        }
      }

      // Generate recommendations based on anomaly
      const recommendations = [];
      if (anomaly.isAnomaly) {
        switch (anomaly.anomalyType) {
          case 'price_spike':
            if (anomaly.anomalyScore > 0.7) {
              recommendations.push('Bi·∫øn ƒë·ªông gi√° b·∫•t th∆∞·ªùng - c√¢n nh·∫Øc ch·ªët l·ªùi n·∫øu ƒëang hold');
              recommendations.push('Ch·ªù x√°c nh·∫≠n tr∆∞·ªõc khi v√†o l·ªánh m·ªõi');
            }
            break;
          case 'volume_surge':
            recommendations.push('Kh·ªëi l∆∞·ª£ng b·∫•t th∆∞·ªùng - theo d√µi breakout/breakdown');
            recommendations.push('Ki·ªÉm tra tin t·ª©c ƒë·ªÉ t√¨m nguy√™n nh√¢n');
            break;
          case 'sentiment_shift':
            recommendations.push('Sentiment thay ƒë·ªïi ƒë·ªôt ng·ªôt - xem x√©t ƒëi·ªÅu ch·ªânh chi·∫øn l∆∞·ª£c');
            recommendations.push('C√≥ th·ªÉ s·ª≠ d·ª•ng nh∆∞ t√≠n hi·ªáu contrarian');
            break;
        }
        recommendations.push('Lu√¥n x√°c minh v·ªõi nhi·ªÅu ngu·ªìn tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh');
      } else {
        recommendations.push('Th·ªã tr∆∞·ªùng ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng');
        recommendations.push('C√≥ th·ªÉ ti·∫øp t·ª•c theo chi·∫øn l∆∞·ª£c hi·ªán t·∫°i');
      }

      return {
        success: true,
        message,
        data: anomaly,
        recommendations,
        confidence: anomaly.confidence,
        timestamp: new Date().toISOString()
      };

    } catch (error: any) {
      console.error('‚ùå [AdvancedAI-Tools] Anomaly detection error:', error);
      return {
        success: false,
        message: '‚ùå L·ªói khi ph√°t hi·ªán b·∫•t th∆∞·ªùng.',
        timestamp: new Date().toISOString()
      };
    }
  }
};

export const smartAlertSetupTool = {
  schema: {
    name: 'smart_alert_setup',
    description: 'Thi·∫øt l·∫≠p h·ªá th·ªëng c·∫£nh b√°o th√¥ng minh v·ªõi AI',
    parameters: smartAlertSetupSchema,
    returnType: advancedAIOutputSchema,
  },
  execute: async (input: z.infer<typeof smartAlertSetupSchema>) => {
    try {
      console.log(`üîî [AdvancedAI-Tools] Setting up smart alerts for ${input.symbols.length} symbols`);
      
      const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:9002';
      
      // Optimize thresholds based on trading style
      const thresholdsResponse = await fetch(`${baseUrl}/api/ai/smart-alerts`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'optimize_thresholds',
          userId: 'default',
          tradingStyle: input.tradingStyle
        })
      });

      const thresholdsResult = await thresholdsResponse.json();
      
      if (!thresholdsResult.success) {
        return {
          success: false,
          message: `‚ùå Kh√¥ng th·ªÉ t·ªëi ∆∞u ng∆∞·ª°ng c·∫£nh b√°o: ${thresholdsResult.error}`,
          timestamp: new Date().toISOString()
        };
      }

      // Start monitoring
      const monitoringResponse = await fetch(`${baseUrl}/api/ai/smart-alerts`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'start_monitoring',
          symbols: input.symbols,
          intervalMs: 60000 // 1 minute
        })
      });

      const monitoringResult = await monitoringResponse.json();

      let message = `üîî **Thi·∫øt l·∫≠p C·∫£nh b√°o Th√¥ng minh**\n\n`;
      message += `‚úÖ **ƒê√£ thi·∫øt l·∫≠p th√†nh c√¥ng:**\n`;
      message += `- Symbols theo d√µi: ${input.symbols.join(', ')}\n`;
      message += `- Phong c√°ch giao d·ªãch: ${input.tradingStyle.toUpperCase()}\n`;
      message += `- Lo·∫°i c·∫£nh b√°o: ${input.alertTypes.join(', ')}\n`;
      message += `- T·∫ßn su·∫•t ki·ªÉm tra: M·ªói 1 ph√∫t\n\n`;

      // Show optimized thresholds
      const thresholds = thresholdsResult.data;
      message += `üéØ **Ng∆∞·ª°ng C·∫£nh b√°o T·ªëi ∆∞u:**\n`;
      for (const symbol of input.symbols) {
        if (thresholds[symbol]) {
          message += `- ${symbol}:\n`;
          message += `  ‚Ä¢ Thay ƒë·ªïi gi√°: ¬±${thresholds[symbol].priceChange}%\n`;
          message += `  ‚Ä¢ Thay ƒë·ªïi volume: ${thresholds[symbol].volumeChange}x\n`;
          message += `  ‚Ä¢ Thay ƒë·ªïi sentiment: ¬±${thresholds[symbol].sentimentChange}\n`;
        }
      }
      message += '\n';

      message += `ü§ñ **AI s·∫Ω t·ª± ƒë·ªông:**\n`;
      message += `- Ph√°t hi·ªán b·∫•t th∆∞·ªùng trong price, volume, sentiment\n`;
      message += `- G·ª≠i c·∫£nh b√°o qua chat khi c√≥ anomaly\n`;
      message += `- ƒê∆∞a ra khuy·∫øn ngh·ªã h√†nh ƒë·ªông\n`;
      message += `- ƒêi·ªÅu ch·ªânh ng∆∞·ª°ng d·ª±a tr√™n h√†nh vi ng∆∞·ªùi d√πng\n\n`;

      const recommendations = [
        'H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p v√† ƒëang ho·∫°t ƒë·ªông',
        'B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c c·∫£nh b√°o khi c√≥ b·∫•t th∆∞·ªùng',
        'C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh ng∆∞·ª°ng b·∫±ng c√°ch thay ƒë·ªïi trading style',
        'Ki·ªÉm tra tab Alerts ƒë·ªÉ xem l·ªãch s·ª≠ c·∫£nh b√°o'
      ];

      return {
        success: true,
        message,
        data: {
          symbols: input.symbols,
          thresholds: thresholds,
          monitoring: monitoringResult.success
        },
        recommendations,
        confidence: 0.9,
        timestamp: new Date().toISOString()
      };

    } catch (error: any) {
      console.error('‚ùå [AdvancedAI-Tools] Smart alert setup error:', error);
      return {
        success: false,
        message: '‚ùå L·ªói khi thi·∫øt l·∫≠p c·∫£nh b√°o th√¥ng minh.',
        timestamp: new Date().toISOString()
      };
    }
  }
};

export const batchAnalysisTool = {
  schema: {
    name: 'batch_analysis',
    description: 'Ph√¢n t√≠ch h√†ng lo·∫°t nhi·ªÅu crypto v·ªõi AI',
    parameters: batchAnalysisSchema,
    returnType: advancedAIOutputSchema,
  },
  execute: async (input: z.infer<typeof batchAnalysisSchema>) => {
    try {
      console.log(`üìä [AdvancedAI-Tools] Batch analysis for ${input.symbols.length} symbols`);
      
      const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:9002';
      const results = [];

      // Parallel analysis
      if (input.analysisType === 'sentiment' || input.analysisType === 'both') {
        const sentimentResponse = await fetch(`${baseUrl}/api/ai/advanced-sentiment`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            action: 'batch_analyze',
            symbols: input.symbols
          })
        });
        const sentimentResult = await sentimentResponse.json();
        if (sentimentResult.success) {
          results.push({ type: 'sentiment', data: sentimentResult.data });
        }
      }

      if (input.analysisType === 'anomaly' || input.analysisType === 'both') {
        const anomalyResponse = await fetch(`${baseUrl}/api/ai/smart-alerts`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            action: 'batch_detect_anomalies',
            symbols: input.symbols,
            metrics: ['price', 'volume', 'sentiment']
          })
        });
        const anomalyResult = await anomalyResponse.json();
        if (anomalyResult.success) {
          results.push({ type: 'anomaly', data: anomalyResult.data });
        }
      }

      let message = `üìä **Ph√¢n t√≠ch H√†ng lo·∫°t ${input.symbols.length} Symbols**\n\n`;

      // Process sentiment results
      const sentimentData = results.find(r => r.type === 'sentiment')?.data;
      if (sentimentData) {
        message += `üß† **K·∫øt qu·∫£ Sentiment Analysis:**\n`;
        sentimentData.forEach((item: any) => {
          if (item.success) {
            const score = item.sentiment.overallSentiment.score;
            const emoji = score > 0.3 ? 'üü¢' : score < -0.3 ? 'üî¥' : '‚ö™';
            message += `${emoji} ${item.symbol}: ${score.toFixed(2)} (${item.sentiment.overallSentiment.trend})\n`;
          } else {
            message += `‚ùå ${item.symbol}: Error\n`;
          }
        });
        message += '\n';
      }

      // Process anomaly results
      const anomalyData = results.find(r => r.type === 'anomaly')?.data;
      if (anomalyData) {
        message += `üîç **K·∫øt qu·∫£ Anomaly Detection:**\n`;
        anomalyData.forEach((item: any) => {
          if (item.success) {
            const isAnomaly = item.anomaly.isAnomaly;
            const score = item.anomaly.anomalyScore;
            const emoji = isAnomaly ? (score > 0.7 ? 'üö®' : '‚ö†Ô∏è') : '‚úÖ';
            message += `${emoji} ${item.symbol}: ${isAnomaly ? 'ANOMALY' : 'Normal'} (${(score * 100).toFixed(0)}%)\n`;
          } else {
            message += `‚ùå ${item.symbol}: Error\n`;
          }
        });
        message += '\n';
      }

      // Generate recommendations if requested
      const recommendations = [];
      if (input.includeRecommendations) {
        // Sentiment-based recommendations
        if (sentimentData) {
          const positiveSymbols = sentimentData.filter((item: any) => 
            item.success && item.sentiment.overallSentiment.score > 0.5
          ).map((item: any) => item.symbol);
          
          const negativeSymbols = sentimentData.filter((item: any) => 
            item.success && item.sentiment.overallSentiment.score < -0.5
          ).map((item: any) => item.symbol);

          if (positiveSymbols.length > 0) {
            recommendations.push(`Sentiment t√≠ch c·ª±c: ${positiveSymbols.join(', ')} - c√¢n nh·∫Øc mua v√†o`);
          }
          if (negativeSymbols.length > 0) {
            recommendations.push(`Sentiment ti√™u c·ª±c: ${negativeSymbols.join(', ')} - c√¢n nh·∫Øc tr√°nh ho·∫∑c ch·ªët l·ªùi`);
          }
        }

        // Anomaly-based recommendations
        if (anomalyData) {
          const anomalySymbols = anomalyData.filter((item: any) => 
            item.success && item.anomaly.isAnomaly && item.anomaly.anomalyScore > 0.6
          ).map((item: any) => item.symbol);

          if (anomalySymbols.length > 0) {
            recommendations.push(`Ph√°t hi·ªán b·∫•t th∆∞·ªùng: ${anomalySymbols.join(', ')} - c·∫ßn theo d√µi s√°t`);
          }
        }

        if (recommendations.length === 0) {
          recommendations.push('T·∫•t c·∫£ symbols ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng');
        }
      }

      message += `üìà **T·ªïng k·∫øt:**\n`;
      message += `- ƒê√£ ph√¢n t√≠ch: ${input.symbols.length} symbols\n`;
      message += `- Lo·∫°i ph√¢n t√≠ch: ${input.analysisType.toUpperCase()}\n`;
      message += `- Th·ªùi gian: ${new Date().toLocaleTimeString('vi-VN')}\n`;

      return {
        success: true,
        message,
        data: results,
        recommendations,
        confidence: 0.85,
        timestamp: new Date().toISOString()
      };

    } catch (error: any) {
      console.error('‚ùå [AdvancedAI-Tools] Batch analysis error:', error);
      return {
        success: false,
        message: '‚ùå L·ªói khi th·ª±c hi·ªán ph√¢n t√≠ch h√†ng lo·∫°t.',
        timestamp: new Date().toISOString()
      };
    }
  }
};

// Export all tools
export const advancedAITools = {
  advancedSentimentAnalysisTool,
  anomalyDetectionTool,
  smartAlertSetupTool,
  batchAnalysisTool
}; 