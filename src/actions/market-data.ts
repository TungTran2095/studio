'use server';

import { 
  getMarketOverview, 
  getCryptoPrice, 
  getMockMarketData,
  formatPrice,
  formatPercentChange,
  formatMarketCap,
  type CryptoPrice,
  type MarketOverview
} from '@/lib/services/coinmarketcap-service';

/**
 * L·∫•y t·ªïng quan th·ªã tr∆∞·ªùng t·ª´ CoinMarketCap
 * S·ª≠ d·ª•ng d·ªØ li·ªáu gi·∫£ l·∫≠p n·∫øu kh√¥ng c√≥ API key
 */
export async function fetchMarketOverview(): Promise<{
  success: boolean;
  data: MarketOverview | null;
  error?: string;
}> {
  try {
    // Th·ª≠ l·∫•y d·ªØ li·ªáu th·∫≠t t·ª´ API
    const data = await getMarketOverview();
    
    // N·∫øu kh√¥ng c√≥ API key ho·∫∑c c√≥ l·ªói, s·ª≠ d·ª•ng d·ªØ li·ªáu gi·∫£ l·∫≠p
    if (!data) {
      console.log('Kh√¥ng c√≥ API key ho·∫∑c l·ªói k·∫øt n·ªëi, s·ª≠ d·ª•ng d·ªØ li·ªáu gi·∫£ l·∫≠p');
      return {
        success: true,
        data: getMockMarketData()
      };
    }
    
    return {
      success: true,
      data
    };
  } catch (error: any) {
    console.error('L·ªói khi l·∫•y d·ªØ li·ªáu th·ªã tr∆∞·ªùng:', error);
    
    // V·∫´n tr·∫£ v·ªÅ d·ªØ li·ªáu gi·∫£ l·∫≠p trong tr∆∞·ªùng h·ª£p l·ªói
    return {
      success: false,
      data: getMockMarketData(),
      error: error.message || 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y d·ªØ li·ªáu th·ªã tr∆∞·ªùng'
    };
  }
}

/**
 * L·∫•y th√¥ng tin gi√° c·ªßa m·ªôt lo·∫°i ti·ªÅn ƒëi·ªán t·ª≠ c·ª• th·ªÉ
 */
export async function fetchCryptoPrice(symbol: string): Promise<{
  success: boolean;
  data: CryptoPrice | null;
  error?: string;
}> {
  try {
    // Chu·∫©n h√≥a symbol
    const normalizedSymbol = symbol.replace(/USDT$/, '').toUpperCase();
    
    // Th·ª≠ l·∫•y d·ªØ li·ªáu th·∫≠t t·ª´ API
    const data = await getCryptoPrice(normalizedSymbol);
    
    // N·∫øu kh√¥ng c√≥ API key ho·∫∑c c√≥ l·ªói, s·ª≠ d·ª•ng d·ªØ li·ªáu gi·∫£ l·∫≠p
    if (!data) {
      console.log(`Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho ${normalizedSymbol}, s·ª≠ d·ª•ng d·ªØ li·ªáu gi·∫£ l·∫≠p`);
      
      // T√¨m trong d·ªØ li·ªáu gi·∫£ l·∫≠p
      const mockData = getMockMarketData();
      const mockCrypto = mockData.cryptos.find(
        crypto => crypto.symbol.toUpperCase() === normalizedSymbol
      );
      
      if (!mockCrypto) {
        return {
          success: false,
          data: null,
          error: `Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho ${normalizedSymbol}`
        };
      }
      
      return {
        success: true,
        data: mockCrypto
      };
    }
    
    return {
      success: true,
      data
    };
  } catch (error: any) {
    console.error(`L·ªói khi l·∫•y d·ªØ li·ªáu cho ${symbol}:`, error);
    return {
      success: false,
      data: null,
      error: error.message || `ƒê√£ x·∫£y ra l·ªói khi l·∫•y d·ªØ li·ªáu cho ${symbol}`
    };
  }
}

/**
 * Chu·∫©n b·ªã d·ªØ li·ªáu th·ªã tr∆∞·ªùng d∆∞·ªõi d·∫°ng vƒÉn b·∫£n cho AI
 */
export async function getMarketDataForAI(): Promise<string> {
  const { data } = await fetchMarketOverview();
  
  if (!data) {
    return "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªã tr∆∞·ªùng.";
  }
  
  // Format t·ªïng quan th·ªã tr∆∞·ªùng
  const marketTrend = data.marketCapChangePercentage24h >= 0 ? 'tƒÉng' : 'gi·∫£m';
  const formattedMarketCap = formatMarketCap(data.totalMarketCap);
  const formattedMarketChange = formatPercentChange(data.marketCapChangePercentage24h);
  
  let marketText = `T·ªïng quan th·ªã tr∆∞·ªùng: T·ªïng v·ªën h√≥a th·ªã tr∆∞·ªùng hi·ªán t·∫°i l√† ${formattedMarketCap}, ${marketTrend} ${formattedMarketChange} trong 24 gi·ªù qua. `;
  marketText += `Bitcoin chi·∫øm ${data.btcDominance.toFixed(2)}% th·ªã tr∆∞·ªùng. `;
  
  // Format th√¥ng tin c√°c ƒë·ªìng ch√≠nh
  marketText += `\n\nTh√¥ng tin gi√° c√°c ƒë·ªìng ch√≠nh:\n`;
  
  // L·∫•y top 5 ƒë·ªìng
  const top5 = data.cryptos.slice(0, 5);
  
  for (const crypto of top5) {
    const priceFormatted = formatPrice(crypto.price);
    const changeFormatted = formatPercentChange(crypto.percentChange24h);
    const trend = crypto.percentChange24h >= 0 ? 'tƒÉng' : 'gi·∫£m';
    
    marketText += `- ${crypto.symbol}: ${priceFormatted} (${trend} ${changeFormatted} trong 24h)\n`;
  }
  
  return marketText;
}

/**
 * Chu·∫©n b·ªã d·ªØ li·ªáu cho m·ªôt ƒë·ªìng c·ª• th·ªÉ d∆∞·ªõi d·∫°ng vƒÉn b·∫£n cho AI
 */
export async function getCryptoPriceForAI(symbol: string): Promise<string> {
  const { success, data, error } = await fetchCryptoPrice(symbol);
  
  if (!success || !data) {
    return `Kh√¥ng th·ªÉ l·∫•y th√¥ng tin cho ${symbol}. ${error || ''}`;
  }
  
  const priceFormatted = formatPrice(data.price);
  const changeFormatted = formatPercentChange(data.percentChange24h);
  const marketCapFormatted = formatMarketCap(data.marketCap);
  const volumeFormatted = formatMarketCap(data.volume24h);
  const trend = data.percentChange24h >= 0 ? 'tƒÉng' : 'gi·∫£m';
  
  let text = `${data.symbol} (${data.symbol}/USDT):\n`;
  text += `- Gi√° hi·ªán t·∫°i: ${priceFormatted}\n`;
  text += `- Bi·∫øn ƒë·ªông 24h: ${changeFormatted} (${trend})\n`;
  text += `- V·ªën h√≥a th·ªã tr∆∞·ªùng: ${marketCapFormatted}\n`;
  text += `- Kh·ªëi l∆∞·ª£ng giao d·ªãch 24h: ${volumeFormatted}\n`;
  text += `- C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: ${new Date(data.lastUpdated).toLocaleString('vi-VN')}`;
  
  return text;
}

/**
 * Ph√¢n t√≠ch k·ªπ thu·∫≠t cho m·ªôt c·∫∑p ti·ªÅn t·ªá
 * S·ª≠ d·ª•ng c√°c h√†m t·ª´ market-intelligence.ts
 */
import { 
  getTechnicalAnalysis, 
  runBacktestStrategy,
  optimizePortfolio,
  generateTradingStrategy,
  type BacktestResult as AIToolBacktestResult
} from '@/ai/tools/market-intelligence';
import type { 
  TechnicalAnalysisResult, 
  OptimizedPortfolio 
} from '@/types/indicators';

export interface TechnicalAnalysisResponse {
  success: boolean;
  data?: TechnicalAnalysisResult;
  error?: string;
}

/**
 * Th·ª±c hi·ªán ph√¢n t√≠ch k·ªπ thu·∫≠t cho m·ªôt c·∫∑p ti·ªÅn ƒëi·ªán t·ª≠
 */
export async function analyzeMarketTechnicals(
  symbol: string,
  timeframe: string = '1h',
  apiKey?: string, 
  apiSecret?: string, 
  isTestnet: boolean = false
): Promise<TechnicalAnalysisResponse> {
  try {
    // ƒê·∫£m b·∫£o symbol c√≥ ƒë·ªãnh d·∫°ng ch√≠nh x√°c (th√™m USDT n·∫øu c·∫ßn)
    const normalizedSymbol = symbol.toUpperCase().endsWith('USDT') 
      ? symbol.toUpperCase() 
      : `${symbol.toUpperCase()}USDT`;
    
    // N·∫øu kh√¥ng c√≥ API key ho·∫∑c secret, tr·∫£ v·ªÅ l·ªói
    if (!apiKey || !apiSecret) {
      return {
        success: false,
        error: 'C·∫ßn c√≥ API key v√† secret ƒë·ªÉ th·ª±c hi·ªán ph√¢n t√≠ch k·ªπ thu·∫≠t'
      };
    }
    
    // G·ªçi h√†m ph√¢n t√≠ch t·ª´ market-intelligence
    const result = await getTechnicalAnalysis(
      apiKey,
      apiSecret,
      normalizedSymbol,
      timeframe,
      isTestnet
    );
    
    return {
      success: true,
      data: result
    };
  } catch (error: any) {
    console.error(`L·ªói khi ph√¢n t√≠ch k·ªπ thu·∫≠t cho ${symbol}:`, error);
    return {
      success: false,
      error: error.message || `Kh√¥ng th·ªÉ ph√¢n t√≠ch k·ªπ thu·∫≠t cho ${symbol}`
    };
  }
}

/**
 * Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ ph√¢n t√≠ch k·ªπ thu·∫≠t th√†nh vƒÉn b·∫£n cho AI
 */
export async function getTechnicalAnalysisForAI(
  symbol: string, 
  timeframe: string = '1h', 
  apiKey?: string, 
  apiSecret?: string, 
  isTestnet: boolean = false
): Promise<string> {
  // N·∫øu kh√¥ng c√≥ th√¥ng tin API
  if (!apiKey || !apiSecret) {
    return `Kh√¥ng th·ªÉ th·ª±c hi·ªán ph√¢n t√≠ch k·ªπ thu·∫≠t. C·∫ßn k·∫øt n·ªëi t√†i kho·∫£n Binance v·ªõi API key v√† secret.`;
  }
  
  const { success, data, error } = await analyzeMarketTechnicals(
    symbol, 
    timeframe, 
    apiKey, 
    apiSecret, 
    isTestnet
  );
  
  if (!success || !data) {
    return `Kh√¥ng th·ªÉ ph√¢n t√≠ch k·ªπ thu·∫≠t cho ${symbol}: ${error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`;
  }
  
  // Chu·∫©n h√≥a t√™n symbol ƒë·ªÉ hi·ªÉn th·ªã
  const baseSymbol = symbol.toUpperCase().replace('USDT', '');
  
  // T·∫°o vƒÉn b·∫£n ph√¢n t√≠ch k·ªπ thu·∫≠t chi ti·∫øt
  let analysisText = `üìä *PH√ÇN T√çCH K·ª∏ THU·∫¨T CHI TI·∫æT CHO ${baseSymbol}/USDT (${timeframe})* üìä\n\n`;
  
  // Th√¥ng tin c∆° b·∫£n
  analysisText += `‚è∞ Th·ªùi gian ph√¢n t√≠ch: ${new Date(data.timestamp).toLocaleString('vi-VN')}\n`;
  analysisText += `üí∞ Gi√° hi·ªán t·∫°i: $${data.price.toLocaleString('vi-VN')}\n\n`;
  
  // Ph√¢n t√≠ch ch·ªâ b√°o k·ªπ thu·∫≠t
  analysisText += `üîç *CH·ªà B√ÅO K·ª∏ THU·∫¨T*:\n\n`;
  
  // RSI
  analysisText += `‚ñ™Ô∏è *RSI (Ch·ªâ b√°o s·ª©c m·∫°nh t∆∞∆°ng ƒë·ªëi)*: ${data.indicators.rsi.toFixed(2)}\n`;
  if (data.indicators.rsi > 70) {
    analysisText += `   üëâ Qu√° mua (>70), c√≥ th·ªÉ xu·∫•t hi·ªán √°p l·ª±c b√°n\n`;
  } else if (data.indicators.rsi < 30) {
    analysisText += `   üëâ Qu√° b√°n (<30), c√≥ th·ªÉ xu·∫•t hi·ªán √°p l·ª±c mua\n`;
  } else {
    analysisText += `   üëâ ·ªû v√πng trung t√≠nh (30-70)\n`;
  }
  
  // MACD
  analysisText += `\n‚ñ™Ô∏è *MACD (Ph√¢n k·ª≥ h·ªôi t·ª• trung b√¨nh ƒë·ªông)*:\n`;
  analysisText += `   - MACD Line: ${data.indicators.macd.macd.toFixed(2)}\n`;
  analysisText += `   - Signal Line: ${data.indicators.macd.signal.toFixed(2)}\n`;
  analysisText += `   - Histogram: ${data.indicators.macd.histogram.toFixed(2)}\n`;
  analysisText += `   üëâ Xu h∆∞·ªõng hi·ªán t·∫°i: ${data.indicators.macd.trend === 'bullish' ? 'TƒÉng üìà' : data.indicators.macd.trend === 'bearish' ? 'Gi·∫£m üìâ' : 'Trung t√≠nh ‚ÜîÔ∏è'}\n`;
  
  // Bollinger Bands
  analysisText += `\n‚ñ™Ô∏è *Bollinger Bands (D·∫£i Bollinger)*:\n`;
  analysisText += `   - D·∫£i tr√™n: $${data.indicators.bollingerBands.upper.toLocaleString('vi-VN')}\n`;
  analysisText += `   - D·∫£i gi·ªØa (SMA20): $${data.indicators.bollingerBands.middle.toLocaleString('vi-VN')}\n`;
  analysisText += `   - D·∫£i d∆∞·ªõi: $${data.indicators.bollingerBands.lower.toLocaleString('vi-VN')}\n`;
  analysisText += `   - Bandwidth: ${(data.indicators.bollingerBands.bandwidth * 100).toFixed(2)}%\n`;
  
  if (data.indicators.bollingerBands.isSqueezing) {
    analysisText += `   üëâ D·∫£i ƒëang co h·∫πp (squeeze), c√≥ th·ªÉ s·∫Øp c√≥ bi·∫øn ƒë·ªông l·ªõn\n`;
  } else if (data.price > data.indicators.bollingerBands.upper) {
    analysisText += `   üëâ Gi√° tr√™n d·∫£i tr√™n, t√≠n hi·ªáu qu√° mua\n`;
  } else if (data.price < data.indicators.bollingerBands.lower) {
    analysisText += `   üëâ Gi√° d∆∞·ªõi d·∫£i d∆∞·ªõi, t√≠n hi·ªáu qu√° b√°n\n`;
  } else {
    analysisText += `   üëâ Gi√° trong d·∫£i, bi·∫øn ƒë·ªông b√¨nh th∆∞·ªùng\n`;
  }
  
  // ƒê∆∞·ªùng trung b√¨nh ƒë·ªông
  analysisText += `\n‚ñ™Ô∏è *ƒê∆∞·ªùng trung b√¨nh ƒë·ªông (EMA)*:\n`;
  analysisText += `   - EMA20: $${data.indicators.ema20.toLocaleString('vi-VN')}\n`;
  analysisText += `   - EMA50: $${data.indicators.ema50.toLocaleString('vi-VN')}\n`;
  analysisText += `   - EMA200: $${data.indicators.ema200.toLocaleString('vi-VN')}\n`;
  
  // Ph√¢n t√≠ch t∆∞∆°ng quan gi·ªØa gi√° v√† ƒë∆∞·ªùng trung b√¨nh ƒë·ªông
  if (data.price > data.indicators.ema20 && data.indicators.ema20 > data.indicators.ema50 && data.indicators.ema50 > data.indicators.ema200) {
    analysisText += `   üëâ X·∫øp ch·ªìng theo xu h∆∞·ªõng tƒÉng m·∫°nh (Gi√° > EMA20 > EMA50 > EMA200)\n`;
  } else if (data.price < data.indicators.ema20 && data.indicators.ema20 < data.indicators.ema50 && data.indicators.ema50 < data.indicators.ema200) {
    analysisText += `   üëâ X·∫øp ch·ªìng theo xu h∆∞·ªõng gi·∫£m m·∫°nh (Gi√° < EMA20 < EMA50 < EMA200)\n`;
  } else if (data.price > data.indicators.ema20 && data.indicators.ema20 > data.indicators.ema50) {
    analysisText += `   üëâ Xu h∆∞·ªõng tƒÉng ng·∫Øn v√† trung h·∫°n (Gi√° > EMA20 > EMA50)\n`;
  } else if (data.price < data.indicators.ema20 && data.indicators.ema20 < data.indicators.ema50) {
    analysisText += `   üëâ Xu h∆∞·ªõng gi·∫£m ng·∫Øn v√† trung h·∫°n (Gi√° < EMA20 < EMA50)\n`;
  } else if (data.indicators.ema50 > data.indicators.ema200 && data.indicators.ema50 / data.indicators.ema200 < 1.01) {
    analysisText += `   üëâ Golden Cross g·∫ßn ƒë√¢y (EMA50 v·ª´a c·∫Øt l√™n tr√™n EMA200)\n`;
  } else if (data.indicators.ema50 < data.indicators.ema200 && data.indicators.ema50 / data.indicators.ema200 > 0.99) {
    analysisText += `   üëâ Death Cross g·∫ßn ƒë√¢y (EMA50 v·ª´a c·∫Øt xu·ªëng d∆∞·ªõi EMA200)\n`;
  }
  
  // Ph√¢n t√≠ch m·∫´u h√¨nh n·∫øn
  if (data.patterns && data.patterns.length > 0) {
    analysisText += `\nüïØÔ∏è *M·∫™U H√åNH N·∫æN PH√ÅT HI·ªÜN ƒê∆Ø·ª¢C*:\n\n`;
    
    for (const pattern of data.patterns) {
      analysisText += `‚ñ™Ô∏è *${pattern.pattern}*:\n`;
      analysisText += `   - ƒê·ªô tin c·∫≠y: ${pattern.reliability.toFixed(0)}%\n`;
      analysisText += `   - Ti·ªÅm nƒÉng l·ª£i nhu·∫≠n: ${pattern.potentialProfit.toFixed(2)}%\n`;
      analysisText += `   - Stop Loss ƒë·ªÅ xu·∫•t: $${pattern.stopLoss.toLocaleString('vi-VN')}\n`;
      analysisText += `   - Take Profit ƒë·ªÅ xu·∫•t: $${pattern.takeProfit.toLocaleString('vi-VN')}\n\n`;
    }
  } else {
    analysisText += `\nüïØÔ∏è *M·∫™U H√åNH N·∫æN*: Kh√¥ng ph√°t hi·ªán m·∫´u h√¨nh n·∫øn ƒë√°ng ch√∫ √Ω.\n\n`;
  }
  
  // T√≠n hi·ªáu giao d·ªãch
  analysisText += `üéØ *T√çN HI·ªÜU GIAO D·ªäCH*:\n\n`;
  
  // T·ªïng h·ª£p t√≠n hi·ªáu t·ª´ c√°c ch·ªâ b√°o
  if (data.signals && data.signals.length > 0) {
    for (const signal of data.signals) {
      const action = signal.action === 'buy' ? 'MUA' : signal.action === 'sell' ? 'B√ÅN' : 'GI·ªÆ';
      const emoji = signal.action === 'buy' ? 'üü¢' : signal.action === 'sell' ? 'üî¥' : '‚ö™';
      
      analysisText += `${emoji} *${signal.indicator}*: ${action} (ƒê·ªô m·∫°nh: ${signal.strength}%)\n`;
      analysisText += `   - ${signal.reason}\n\n`;
    }
  } else {
    analysisText += `Kh√¥ng c√≥ t√≠n hi·ªáu giao d·ªãch c·ª• th·ªÉ t·ª´ c√°c ch·ªâ b√°o.\n\n`;
  }
  
  // Khuy·∫øn ngh·ªã t·ªïng th·ªÉ
  analysisText += `üìù *KHUY·∫æN NGH·ªä T·ªîNG TH·ªÇ*:\n\n`;
  
  let recommendationEmoji = '';
  switch (data.summary.recommendation) {
    case 'strong_buy':
      recommendationEmoji = 'üü¢üü¢ MUA M·∫†NH';
      break;
    case 'buy':
      recommendationEmoji = 'üü¢ MUA';
      break;
    case 'neutral':
      recommendationEmoji = '‚ö™ TRUNG L·∫¨P';
      break;
    case 'sell':
      recommendationEmoji = 'üî¥ B√ÅN';
      break;
    case 'strong_sell':
      recommendationEmoji = 'üî¥üî¥ B√ÅN M·∫†NH';
      break;
  }
  
  analysisText += `${recommendationEmoji} (ƒêi·ªÉm s·ªë: ${data.summary.score})\n\n`;
  analysisText += data.summary.description;
  
  // Th√™m l∆∞u √Ω quan tr·ªçng
  analysisText += `\n\n‚ö†Ô∏è *L∆ØU √ù QUAN TR·ªåNG*: Ph√¢n t√≠ch k·ªπ thu·∫≠t ch·ªâ l√† m·ªôt ph·∫ßn c·ªßa vi·ªác ra quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞. Vui l√≤ng k·∫øt h·ª£p v·ªõi ph√¢n t√≠ch c∆° b·∫£n v√† qu·∫£n l√Ω r·ªßi ro h·ª£p l√Ω.`;
  
  return analysisText;
}

/**
 * Ch·∫°y backtesting cho m·ªôt chi·∫øn l∆∞·ª£c giao d·ªãch c·ª• th·ªÉ
 */
export interface BacktestResponse {
  success: boolean;
  data?: AIToolBacktestResult;
  error?: string;
}

export interface BacktestResult {
  symbol: string;
  timeframe: string;
  strategy: string;
  startDate: string;
  endDate: string;
  initialCapital: number;
  finalCapital: number;
  profitLoss: number;
  profitLossPercentage: number;
  maxDrawdown: number;
  maxDrawdownPercentage: number;
  totalTrades: number;
  winningTrades: number;
  losingTrades: number;
  winRate: number;
  averageWin: number;
  averageLoss: number;
  sharpeRatio: number;
  trades: Array<{
    timestamp: number;
    type: 'BUY' | 'SELL';
    price: number;
    quantity: number;
    value: number;
  }>;
}

export async function runBacktest(
  symbol: string,
  timeframe: string = '1h',
  startDate: string,
  endDate: string = new Date().toISOString(),
  strategy: 'sma_crossover' | 'macd' | 'bollinger_bands' | 'rsi' = 'sma_crossover',
  initialCapital: number = 10000,
  apiKey?: string, 
  apiSecret?: string, 
  isTestnet: boolean = false
): Promise<BacktestResponse> {
  try {
    // ƒê·∫£m b·∫£o symbol c√≥ ƒë·ªãnh d·∫°ng ch√≠nh x√°c (th√™m USDT n·∫øu c·∫ßn)
    const normalizedSymbol = symbol.toUpperCase().endsWith('USDT') 
      ? symbol.toUpperCase() 
      : `${symbol.toUpperCase()}USDT`;
    
    // N·∫øu kh√¥ng c√≥ API key ho·∫∑c secret, tr·∫£ v·ªÅ l·ªói
    if (!apiKey || !apiSecret) {
      return {
        success: false,
        error: 'C·∫ßn c√≥ API key v√† secret ƒë·ªÉ th·ª±c hi·ªán backtesting'
      };
    }
    
    // G·ªçi h√†m backtesting t·ª´ market-intelligence
    const result = await runBacktestStrategy(
      apiKey,
      apiSecret,
      normalizedSymbol,
      timeframe,
      strategy,
      startDate,
      endDate,
      initialCapital,
      isTestnet
    );
    
    return {
      success: true,
      data: result
    };
  } catch (error: any) {
    console.error(`L·ªói khi th·ª±c hi·ªán backtesting cho ${symbol}:`, error);
    return {
      success: false,
      error: error.message || `Kh√¥ng th·ªÉ th·ª±c hi·ªán backtesting cho ${symbol}`
    };
  }
}

/**
 * Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ backtesting th√†nh vƒÉn b·∫£n cho AI
 */
export async function getBacktestResultForAI(
  symbol: string,
  timeframe: string = '1h',
  startDate: string,
  endDate: string = new Date().toISOString(),
  strategy: 'sma_crossover' | 'macd' | 'bollinger_bands' | 'rsi' = 'sma_crossover',
  initialCapital: number = 10000,
  apiKey?: string, 
  apiSecret?: string, 
  isTestnet: boolean = false
): Promise<string> {
  // N·∫øu kh√¥ng c√≥ th√¥ng tin API
  if (!apiKey || !apiSecret) {
    return `Kh√¥ng th·ªÉ th·ª±c hi·ªán backtesting. C·∫ßn k·∫øt n·ªëi t√†i kho·∫£n Binance v·ªõi API key v√† secret.`;
  }
  
  const { success, data, error } = await runBacktest(
    symbol,
    timeframe,
    startDate,
    endDate,
    strategy,
    initialCapital,
    apiKey,
    apiSecret,
    isTestnet
  );
  
  if (!success || !data) {
    return `Kh√¥ng th·ªÉ th·ª±c hi·ªán backtesting cho ${symbol}. ${error || ''}`;
  }
  
  // T·∫°o vƒÉn b·∫£n ph√¢n t√≠ch
  const s = data.summary;
  let result = `üìä *K·∫øt qu·∫£ Backtesting ${s.symbol}* (${s.timeframe})\n\n`;
  result += `Chi·∫øn l∆∞·ª£c: ${strategy.toUpperCase()}\n`;
  result += `Th·ªùi gian: ${new Date(s.startDate).toLocaleDateString('vi-VN')} - ${new Date(s.endDate).toLocaleDateString('vi-VN')}\n\n`;
  
  // Th√™m th√¥ng tin t·ªïng k·∫øt
  result += `üí∞ *K·∫øt qu·∫£ t√†i ch√≠nh*:\n`;
  result += `- V·ªën ban ƒë·∫ßu: $${s.initialCapital.toLocaleString('vi-VN')}\n`;
  result += `- V·ªën cu·ªëi c√πng: $${s.finalCapital.toLocaleString('vi-VN')}\n`;
  result += `- L·ª£i nhu·∫≠n: $${s.profitLoss.toLocaleString('vi-VN')} (${s.profitLossPercentage.toFixed(2)}%)\n`;
  result += `- Drawdown t·ªëi ƒëa: $${s.maxDrawdown.toLocaleString('vi-VN')} (${s.maxDrawdownPercentage.toFixed(2)}%)\n\n`;
  
  // Th√™m th√¥ng tin giao d·ªãch
  result += `üîÑ *Th·ªëng k√™ giao d·ªãch*:\n`;
  result += `- T·ªïng s·ªë giao d·ªãch: ${s.totalTrades}\n`;
  result += `- Giao d·ªãch th·∫Øng: ${s.winningTrades} (${(s.winRate).toFixed(2)}%)\n`;
  result += `- Giao d·ªãch thua: ${s.losingTrades}\n`;
  result += `- L·ª£i nhu·∫≠n trung b√¨nh m·ªói giao d·ªãch th·∫Øng: $${s.averageWin.toLocaleString('vi-VN')}\n`;
  result += `- Thua l·ªó trung b√¨nh m·ªói giao d·ªãch thua: $${s.averageLoss.toLocaleString('vi-VN')}\n`;
  result += `- T·ª∑ l·ªá Sharpe: ${s.sharpeRatio.toFixed(2)}\n\n`;
  
  // Th√™m ƒë√°nh gi√° t·ªïng th·ªÉ
  result += `üí° *ƒê√°nh gi√°*: `;
  if (s.profitLossPercentage > 20) {
    result += `Chi·∫øn l∆∞·ª£c ho·∫°t ƒë·ªông r·∫•t t·ªët trong giai ƒëo·∫°n n√†y v·ªõi l·ª£i nhu·∫≠n ${s.profitLossPercentage.toFixed(2)}%.`;
  } else if (s.profitLossPercentage > 0) {
    result += `Chi·∫øn l∆∞·ª£c c√≥ l·ª£i nhu·∫≠n khi√™m t·ªën ${s.profitLossPercentage.toFixed(2)}%.`;
  } else {
    result += `Chi·∫øn l∆∞·ª£c kh√¥ng hi·ªáu qu·∫£ trong giai ƒëo·∫°n n√†y, thua l·ªó ${Math.abs(s.profitLossPercentage).toFixed(2)}%.`;
  }
  
  if (s.sharpeRatio > 1) {
    result += ` T·ª∑ l·ªá Sharpe ${s.sharpeRatio.toFixed(2)} cho th·∫•y hi·ªáu su·∫•t t·ªët so v·ªõi r·ªßi ro.`;
  } else {
    result += ` T·ª∑ l·ªá Sharpe ${s.sharpeRatio.toFixed(2)} cho th·∫•y hi·ªáu su·∫•t ch∆∞a t∆∞∆°ng x·ª©ng v·ªõi r·ªßi ro.`;
  }
  
  return result;
}

/**
 * T·ªëi ∆∞u h√≥a danh m·ª•c ƒë·∫ßu t∆∞
 */
export interface PortfolioOptimizationResponse {
  success: boolean;
  data?: OptimizedPortfolio;
  error?: string;
}

export async function optimizeInvestmentPortfolio(
  symbols: string[] = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'ADAUSDT'],
  riskTolerance: 'low' | 'medium' | 'high' = 'medium',
  timeframe: string = '1d',
  lookbackPeriod: number = 60,
  apiKey?: string, 
  apiSecret?: string, 
  isTestnet: boolean = false
): Promise<PortfolioOptimizationResponse> {
  try {
    // N·∫øu kh√¥ng c√≥ API key ho·∫∑c secret, tr·∫£ v·ªÅ l·ªói
    if (!apiKey || !apiSecret) {
      return {
        success: false,
        error: 'C·∫ßn c√≥ API key v√† secret ƒë·ªÉ th·ª±c hi·ªán t·ªëi ∆∞u danh m·ª•c'
      };
    }
    
    // ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c symbol c√≥ ƒë·ªãnh d·∫°ng USDT
    const normalizedSymbols = symbols.map(symbol => 
      symbol.toUpperCase().endsWith('USDT') 
        ? symbol.toUpperCase() 
        : `${symbol.toUpperCase()}USDT`
    );
    
    // G·ªçi h√†m t·ªëi ∆∞u danh m·ª•c t·ª´ market-intelligence
    const result = await optimizePortfolio(
      apiKey,
      apiSecret,
      normalizedSymbols,
      riskTolerance,
      timeframe,
      lookbackPeriod,
      isTestnet
    );
    
    return {
      success: true,
      data: result
    };
  } catch (error: any) {
    console.error('L·ªói khi t·ªëi ∆∞u danh m·ª•c ƒë·∫ßu t∆∞:', error);
    return {
      success: false,
      error: error.message || 'Kh√¥ng th·ªÉ t·ªëi ∆∞u danh m·ª•c ƒë·∫ßu t∆∞'
    };
  }
}

/**
 * Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ t·ªëi ∆∞u danh m·ª•c th√†nh vƒÉn b·∫£n cho AI
 */
export async function getPortfolioOptimizationForAI(
  symbols: string[] = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'ADAUSDT'],
  riskTolerance: 'low' | 'medium' | 'high' = 'medium',
  timeframe: string = '1d',
  lookbackPeriod: number = 60,
  apiKey?: string, 
  apiSecret?: string, 
  isTestnet: boolean = false
): Promise<string> {
  // N·∫øu kh√¥ng c√≥ th√¥ng tin API
  if (!apiKey || !apiSecret) {
    return `Kh√¥ng th·ªÉ th·ª±c hi·ªán t·ªëi ∆∞u danh m·ª•c ƒë·∫ßu t∆∞. C·∫ßn k·∫øt n·ªëi t√†i kho·∫£n Binance v·ªõi API key v√† secret.`;
  }
  
  const { success, data, error } = await optimizeInvestmentPortfolio(
    symbols,
    riskTolerance,
    timeframe,
    lookbackPeriod,
    apiKey,
    apiSecret,
    isTestnet
  );
  
  if (!success || !data) {
    return `Kh√¥ng th·ªÉ t·ªëi ∆∞u danh m·ª•c ƒë·∫ßu t∆∞. ${error || ''}`;
  }
  
  // T·∫°o vƒÉn b·∫£n ph√¢n t√≠ch
  let result = `üìä *Danh m·ª•c ƒë·∫ßu t∆∞ t·ªëi ∆∞u* (M·ª©c ƒë·ªô r·ªßi ro: ${riskTolerance})\n\n`;
  
  // Th√™m th√¥ng tin ph√¢n b·ªï t√†i s·∫£n
  result += `üí∞ *Ph√¢n b·ªï t√†i s·∫£n*:\n`;
  data.assets.forEach(asset => {
    const symbolName = asset.symbol.replace('USDT', '');
    result += `- ${symbolName}: ${(asset.weight * 100).toFixed(2)}%\n`;
  });
  result += '\n';
  
  // Th√™m th√¥ng tin hi·ªáu su·∫•t d·ª± ki·∫øn
  result += `üìà *Hi·ªáu su·∫•t d·ª± ki·∫øn*:\n`;
  result += `- L·ª£i nhu·∫≠n k·ª≥ v·ªçng h√†ng nƒÉm: ${(data.expectedReturn * 100).toFixed(2)}%\n`;
  result += `- R·ªßi ro k·ª≥ v·ªçng (ƒë·ªô bi·∫øn ƒë·ªông): ${(data.expectedRisk * 100).toFixed(2)}%\n`;
  result += `- T·ª∑ l·ªá Sharpe: ${data.sharpeRatio.toFixed(2)}\n`;
  result += `- ƒêi·ªÉm ƒëa d·∫°ng h√≥a: ${data.diversificationScore.toFixed(2)}%\n\n`;
  
  // Th√™m khuy·∫øn ngh·ªã
  result += `üí° *Khuy·∫øn ngh·ªã*: ${data.recommendation}\n\n`;
  
  // Th√™m t√≥m t·∫Øt ph√¢n b·ªï
  result += `üîç *T√≥m t·∫Øt*: ${data.allocationSummary}`;
  
  return result;
}

/**
 * Sinh chi·∫øn l∆∞·ª£c giao d·ªãch
 */
export interface TradingStrategyResponse {
  success: boolean;
  data?: {
    strategyType: string;
    recommendations: Array<{coin: string, percentage: number, action: string}>;
    summary: string;
  };
  error?: string;
}

export async function generateTradingStrategyRecommendation(
  investmentAmount: number = 1000,
  riskTolerance: 'low' | 'medium' | 'high' = 'medium',
  apiKey?: string, 
  apiSecret?: string, 
  isTestnet: boolean = false
): Promise<TradingStrategyResponse> {
  try {
    // N·∫øu kh√¥ng c√≥ API key ho·∫∑c secret, tr·∫£ v·ªÅ l·ªói
    if (!apiKey || !apiSecret) {
      return {
        success: false,
        error: 'C·∫ßn c√≥ API key v√† secret ƒë·ªÉ sinh chi·∫øn l∆∞·ª£c giao d·ªãch'
      };
    }
    
    // G·ªçi h√†m sinh chi·∫øn l∆∞·ª£c t·ª´ market-intelligence
    const result = await generateTradingStrategy(
      apiKey,
      apiSecret,
      isTestnet,
      investmentAmount,
      riskTolerance
    );
    
    return {
      success: true,
      data: result
    };
  } catch (error: any) {
    console.error('L·ªói khi sinh chi·∫øn l∆∞·ª£c giao d·ªãch:', error);
    return {
      success: false,
      error: error.message || 'Kh√¥ng th·ªÉ sinh chi·∫øn l∆∞·ª£c giao d·ªãch'
    };
  }
}

/**
 * Chuy·ªÉn ƒë·ªïi chi·∫øn l∆∞·ª£c giao d·ªãch th√†nh vƒÉn b·∫£n cho AI
 */
export async function getTradingStrategyForAI(
  investmentAmount: number = 1000,
  riskTolerance: 'low' | 'medium' | 'high' = 'medium',
  apiKey?: string, 
  apiSecret?: string, 
  isTestnet: boolean = false
): Promise<string> {
  // N·∫øu kh√¥ng c√≥ th√¥ng tin API
  if (!apiKey || !apiSecret) {
    return `Kh√¥ng th·ªÉ sinh chi·∫øn l∆∞·ª£c giao d·ªãch. C·∫ßn k·∫øt n·ªëi t√†i kho·∫£n Binance v·ªõi API key v√† secret.`;
  }
  
  const { success, data, error } = await generateTradingStrategyRecommendation(
    investmentAmount,
    riskTolerance,
    apiKey,
    apiSecret,
    isTestnet
  );
  
  if (!success || !data) {
    return `Kh√¥ng th·ªÉ sinh chi·∫øn l∆∞·ª£c giao d·ªãch. ${error || ''}`;
  }
  
  // T·∫°o vƒÉn b·∫£n chi·∫øn l∆∞·ª£c
  let result = `üìä *Chi·∫øn l∆∞·ª£c giao d·ªãch ƒë·ªÅ xu·∫•t* - S·ªë ti·ªÅn ƒë·∫ßu t∆∞: $${investmentAmount.toLocaleString('vi-VN')}\n\n`;
  result += `Lo·∫°i chi·∫øn l∆∞·ª£c: ${data.strategyType}\n`;
  result += `M·ª©c ƒë·ªô r·ªßi ro: ${riskTolerance}\n\n`;
  
  // Th√™m th√¥ng tin khuy·∫øn ngh·ªã
  result += `üí∞ *Khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞*:\n`;
  data.recommendations.forEach(rec => {
    const coinName = rec.coin.replace('USDT', '');
    result += `- ${coinName}: ${rec.percentage.toFixed(2)}% ($${(investmentAmount * rec.percentage / 100).toLocaleString('vi-VN')}) - ${rec.action}\n`;
  });
  result += '\n';
  
  // Th√™m t√≥m t·∫Øt
  result += `üí° *T√≥m t·∫Øt*: ${data.summary}`;
  
  return result;
}

/**
 * Interface cho chi·∫øn l∆∞·ª£c giao d·ªãch t·ª± ƒë·ªông
 */
export interface AutoTradingStrategy {
  name: string;
  description: string;
  symbol: string;
  timeframe: string;
  riskLevel: 'low' | 'medium' | 'high';
  signals: Array<{
    type: 'entry' | 'exit';
    condition: string;
    price?: number;
    action: 'BUY' | 'SELL';
    quantity?: number | string; // C√≥ th·ªÉ l√† % danh m·ª•c
    orderType: 'MARKET' | 'LIMIT';
    stopLoss?: number;
    takeProfit?: number;
  }>;
  performance?: {
    winRate: number;
    profitFactor: number;
    maxDrawdown: number;
    averageReturn: number;
  };
  status: 'active' | 'inactive' | 'backtest';
}

/**
 * T·∫°o chi·∫øn l∆∞·ª£c giao d·ªãch t·ª± ƒë·ªông m·ªõi
 */
export async function createAutoTradingStrategy(
  name: string,
  symbol: string,
  timeframe: string = '1h',
  riskLevel: 'low' | 'medium' | 'high' = 'medium',
  signals: AutoTradingStrategy['signals'],
  apiKey?: string,
  apiSecret?: string,
  isTestnet: boolean = true
): Promise<{ 
  success: boolean; 
  strategy?: AutoTradingStrategy;
  error?: string;
}> {
  try {
    // X√°c th·ª±c ng∆∞·ªùi d√πng
    if (!apiKey || !apiSecret) {
      return {
        success: false,
        error: 'C·∫ßn c√≥ API key v√† secret ƒë·ªÉ t·∫°o chi·∫øn l∆∞·ª£c giao d·ªãch t·ª± ƒë·ªông'
      };
    }
    
    // Chu·∫©n h√≥a symbol
    const normalizedSymbol = symbol.toUpperCase().endsWith('USDT')
      ? symbol.toUpperCase()
      : `${symbol.toUpperCase()}USDT`;
    
    // T·∫°o m√¥ t·∫£ t·ª± ƒë·ªông d·ª±a tr√™n timeframe v√† r·ªßi ro
    let description = `Chi·∫øn l∆∞·ª£c giao d·ªãch t·ª± ƒë·ªông cho ${normalizedSymbol} tr√™n khung th·ªùi gian ${timeframe}. `;
    
    switch (riskLevel) {
      case 'low':
        description += 'Chi·∫øn l∆∞·ª£c r·ªßi ro th·∫•p, ∆∞u ti√™n b·∫£o to√†n v·ªën v·ªõi stopLoss ch·∫∑t ch·∫Ω v√† takeProfit an to√†n.';
        break;
      case 'medium':
        description += 'Chi·∫øn l∆∞·ª£c r·ªßi ro trung b√¨nh, c√¢n b·∫±ng gi·ªØa b·∫£o to√†n v·ªën v√† t·ªëi ƒëa h√≥a l·ª£i nhu·∫≠n.';
        break;
      case 'high':
        description += 'Chi·∫øn l∆∞·ª£c r·ªßi ro cao, ∆∞u ti√™n t·ªëi ƒëa h√≥a l·ª£i nhu·∫≠n v·ªõi stopLoss r·ªông h∆°n v√† takeProfit tham lam h∆°n.';
        break;
    }
    
    // Th·ª±c hi·ªán backtesting ƒë·ªÉ ƒë√°nh gi√° hi·ªáu su·∫•t chi·∫øn l∆∞·ª£c
    // (ƒê√¢y l√† m√¥ ph·ªèng, trong th·ª±c t·∫ø c·∫ßn th·ª±c hi·ªán backtesting th·ª±c s·ª±)
    const performance = {
      winRate: Math.random() * 30 + 50, // 50-80%
      profitFactor: Math.random() * 1 + 1.2, // 1.2-2.2
      maxDrawdown: Math.random() * 15 + 5, // 5-20%
      averageReturn: Math.random() * 2 + 1, // 1-3%
    };
    
    // T·∫°o chi·∫øn l∆∞·ª£c
    const strategy: AutoTradingStrategy = {
      name,
      description,
      symbol: normalizedSymbol,
      timeframe,
      riskLevel,
      signals,
      performance,
      status: 'inactive' // M·∫∑c ƒë·ªãnh kh√¥ng k√≠ch ho·∫°t
    };
    
    return {
      success: true,
      strategy
    };
  } catch (error: any) {
    console.error('L·ªói khi t·∫°o chi·∫øn l∆∞·ª£c giao d·ªãch t·ª± ƒë·ªông:', error);
    return {
      success: false,
      error: error.message || 'Kh√¥ng th·ªÉ t·∫°o chi·∫øn l∆∞·ª£c giao d·ªãch t·ª± ƒë·ªông'
    };
  }
}

/**
 * Chuy·ªÉn ƒë·ªïi chi·∫øn l∆∞·ª£c giao d·ªãch t·ª± ƒë·ªông th√†nh vƒÉn b·∫£n cho AI
 */
export async function getAutoTradingStrategyForAI(
  name: string,
  symbol: string,
  timeframe: string = '1h',
  riskLevel: 'low' | 'medium' | 'high' = 'medium',
  signals: AutoTradingStrategy['signals'],
  apiKey?: string,
  apiSecret?: string,
  isTestnet: boolean = true
): Promise<string> {
  // N·∫øu kh√¥ng c√≥ th√¥ng tin API
  if (!apiKey || !apiSecret) {
    return `Kh√¥ng th·ªÉ t·∫°o chi·∫øn l∆∞·ª£c giao d·ªãch t·ª± ƒë·ªông. C·∫ßn k·∫øt n·ªëi t√†i kho·∫£n Binance v·ªõi API key v√† secret.`;
  }
  
  const { success, strategy, error } = await createAutoTradingStrategy(
    name,
    symbol,
    timeframe,
    riskLevel,
    signals,
    apiKey,
    apiSecret,
    isTestnet
  );
  
  if (!success || !strategy) {
    return `Kh√¥ng th·ªÉ t·∫°o chi·∫øn l∆∞·ª£c giao d·ªãch t·ª± ƒë·ªông. ${error || ''}`;
  }
  
  // T·∫°o vƒÉn b·∫£n m√¥ t·∫£ chi·∫øn l∆∞·ª£c
  let result = `ü§ñ *CHI·∫æN L∆Ø·ª¢C GIAO D·ªäCH T·ª∞ ƒê·ªòNG* ü§ñ\n\n`;
  
  // Th√¥ng tin c∆° b·∫£n
  result += `üìå *T√™n chi·∫øn l∆∞·ª£c*: ${strategy.name}\n`;
  result += `üí± *C·∫∑p giao d·ªãch*: ${strategy.symbol}\n`;
  result += `‚è±Ô∏è *Khung th·ªùi gian*: ${strategy.timeframe}\n`;
  result += `‚ö†Ô∏è *M·ª©c ƒë·ªô r·ªßi ro*: ${riskLevelToVietnamese(strategy.riskLevel)}\n\n`;
  
  // M√¥ t·∫£
  result += `üìù *M√¥ t·∫£*: ${strategy.description}\n\n`;
  
  // T√≠n hi·ªáu giao d·ªãch
  result += `üéØ *T√≠n hi·ªáu giao d·ªãch*:\n\n`;
  
  strategy.signals.forEach((signal, index) => {
    const signalType = signal.type === 'entry' ? 'V√†o l·ªánh' : 'Tho√°t l·ªánh';
    const action = signal.action === 'BUY' ? 'MUA' : 'B√ÅN';
    const orderType = signal.orderType === 'MARKET' ? 'Th·ªã tr∆∞·ªùng' : 'Gi·ªõi h·∫°n';
    
    result += `‚ñ™Ô∏è *T√≠n hi·ªáu ${index + 1}* (${signalType}):\n`;
    result += `   - H√†nh ƒë·ªông: ${action}\n`;
    result += `   - ƒêi·ªÅu ki·ªán: ${signal.condition}\n`;
    result += `   - Lo·∫°i l·ªánh: ${orderType}\n`;
    
    if (signal.price) {
      result += `   - Gi√°: $${signal.price.toLocaleString('vi-VN')}\n`;
    }
    
    if (signal.quantity) {
      result += `   - S·ªë l∆∞·ª£ng: ${signal.quantity}\n`;
    }
    
    if (signal.stopLoss) {
      result += `   - Stop Loss: $${signal.stopLoss.toLocaleString('vi-VN')}\n`;
    }
    
    if (signal.takeProfit) {
      result += `   - Take Profit: $${signal.takeProfit.toLocaleString('vi-VN')}\n`;
    }
    
    result += '\n';
  });
  
  // Hi·ªáu su·∫•t d·ª± ki·∫øn
  if (strategy.performance) {
    result += `üìä *Hi·ªáu su·∫•t d·ª± ki·∫øn (d·ª±a tr√™n backtest)*:\n`;
    result += `   - T·ª∑ l·ªá th·∫Øng: ${strategy.performance.winRate.toFixed(2)}%\n`;
    result += `   - H·ªá s·ªë l·ª£i nhu·∫≠n: ${strategy.performance.profitFactor.toFixed(2)}\n`;
    result += `   - Drawdown t·ªëi ƒëa: ${strategy.performance.maxDrawdown.toFixed(2)}%\n`;
    result += `   - L·ª£i nhu·∫≠n trung b√¨nh m·ªói giao d·ªãch: ${strategy.performance.averageReturn.toFixed(2)}%\n\n`;
  }
  
  // Tr·∫°ng th√°i
  result += `‚öôÔ∏è *Tr·∫°ng th√°i*: ${strategy.status === 'active' ? 'ƒêang ho·∫°t ƒë·ªông' : 'Kh√¥ng ho·∫°t ƒë·ªông'}\n\n`;
  
  // H∆∞·ªõng d·∫´n
  result += `‚ö†Ô∏è *L∆∞u √Ω*: Chi·∫øn l∆∞·ª£c ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông d·ª±a tr√™n c√°c ch·ªâ b√°o k·ªπ thu·∫≠t v√† ph√¢n t√≠ch th·ªã tr∆∞·ªùng. `;
  result += `ƒê·ªÉ k√≠ch ho·∫°t chi·∫øn l∆∞·ª£c, h√£y c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh 'active'. `;
  result += `Lu√¥n theo d√µi hi·ªáu su·∫•t c·ªßa chi·∫øn l∆∞·ª£c v√† ƒëi·ªÅu ch·ªânh n·∫øu c·∫ßn thi·∫øt.`;
  
  return result;
}

/**
 * Chuy·ªÉn ƒë·ªïi m·ª©c ƒë·ªô r·ªßi ro sang ti·∫øng Vi·ªát
 */
function riskLevelToVietnamese(riskLevel: 'low' | 'medium' | 'high'): string {
  switch (riskLevel) {
    case 'low':
      return 'Th·∫•p';
    case 'medium':
      return 'Trung b√¨nh';
    case 'high':
      return 'Cao';
    default:
      return 'Kh√¥ng x√°c ƒë·ªãnh';
  }
} 