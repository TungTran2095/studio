import { BotExecutor } from './bot-executor';
import { TradingBot } from './trading-bot';
import { supabase } from '@/lib/supabase-client';
import { createClient } from '@supabase/supabase-js';

class BotManager {
  private static instance: BotManager;
  private runningBots: Map<string, BotExecutor> = new Map();
  private isInitialized: boolean = false;
  private initializationPromise: Promise<void> | null = null;
  
  // Supabase admin client ƒë·ªÉ bypass RLS
  private supabaseAdmin = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!
  );

  private constructor() {}

  static getInstance(): BotManager {
    if (!BotManager.instance) {
      BotManager.instance = new BotManager();
    }
    return BotManager.instance;
  }

  async initialize() {
    // ƒê·∫£m b·∫£o ch·ªâ kh·ªüi t·∫°o m·ªôt l·∫ßn
    if (this.initializationPromise) {
      return this.initializationPromise;
    }

    if (this.isInitialized) {
      console.log('[BotManager] ƒê√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥');
      return;
    }

    this.initializationPromise = this._initialize();
    return this.initializationPromise;
  }

  private async _initialize() {
    try {
      console.log('[BotManager] üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o BotManager...');
      
      // ƒê·∫£m b·∫£o t·∫•t c·∫£ bot trong database c√≥ status 'stopped' khi kh·ªüi ƒë·ªông
      await this.ensureAllBotsStopped();
      
      // Kh√¥i ph·ª•c c√°c bot ƒëang running t·ª´ database (n·∫øu c√≥)
      await this.restoreRunningBots();
      
      this.isInitialized = true;
      console.log('[BotManager] ‚úÖ BotManager ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng');
    } catch (error) {
      console.error('[BotManager] ‚ùå L·ªói khi kh·ªüi t·∫°o:', error);
      throw error;
    }
  }

  private async ensureAllBotsStopped() {
    try {
      console.log('[BotManager] üîç Ki·ªÉm tra tr·∫°ng th√°i bot hi·ªán t·∫°i...');
      
      // Ch·ªâ ki·ªÉm tra tr·∫°ng th√°i, kh√¥ng force stop t·∫•t c·∫£ bot
      const { data: runningBots, error } = await this.supabaseAdmin
        .from('trading_bots')
        .select('id, name, status')
        .eq('status', 'running');

      if (error) {
        console.error('[BotManager] L·ªói khi ki·ªÉm tra bot status:', error);
      } else {
        console.log(`[BotManager] üìä T√¨m th·∫•y ${runningBots?.length || 0} bot ƒëang running:`);
        runningBots?.forEach(bot => {
          console.log(`  - ${bot.name} (${bot.id})`);
        });
        console.log('[BotManager] ‚úÖ Kh√¥ng force stop bot - cho ph√©p multiple bots ch·∫°y song song');
      }
    } catch (error) {
      console.error('[BotManager] L·ªói khi ki·ªÉm tra bot status:', error);
    }
  }

  private async restoreRunningBots() {
    try {
      console.log('[BotManager] üîÑ Kh√¥i ph·ª•c c√°c bot ƒëang running...');
      
      const { data: runningBots, error } = await this.supabaseAdmin
        .from('trading_bots')
        .select('*')
        .eq('status', 'running');

      if (error) {
        console.error('[BotManager] L·ªói khi l·∫•y danh s√°ch bot running:', error);
        return;
      }

      if (!runningBots || runningBots.length === 0) {
        console.log('[BotManager] ‚úÖ Kh√¥ng c√≥ bot n√†o ƒëang running');
        return;
      }

      console.log(`[BotManager] üîÑ T√¨m th·∫•y ${runningBots.length} bot ƒëang running, kh√¥i ph·ª•c ch√∫ng...`);

      for (const bot of runningBots) {
        try {
          // Kh√¥i ph·ª•c bot thay v√¨ d·ª´ng ch√∫ng
          console.log(`[BotManager] üîÑ Kh√¥i ph·ª•c bot ${bot.name} (${bot.id})...`);
          const executor = new BotExecutor(bot);
          const initialized = await executor.initialize();
          
          if (initialized) {
            this.runningBots.set(bot.id, executor);
            executor.start().catch(async (error) => {
              console.error(`[BotManager] ‚ùå Bot ${bot.id} g·∫∑p l·ªói:`, error);
              await this.stopBot(bot.id);
            });
            console.log(`[BotManager] ‚úÖ ƒê√£ kh√¥i ph·ª•c bot ${bot.name} (${bot.id})`);
          } else {
            console.log(`[BotManager] ‚ö†Ô∏è Kh√¥ng th·ªÉ kh√¥i ph·ª•c bot ${bot.name}, d·ª´ng n√≥`);
            await this.updateBotStatus(bot.id, 'stopped');
          }
        } catch (error) {
          console.error(`[BotManager] ‚ùå L·ªói khi kh√¥i ph·ª•c bot ${bot.name}:`, error);
        }
      }
    } catch (error) {
      console.error('[BotManager] L·ªói khi restore running bots:', error);
    }
  }

  async startBot(bot: TradingBot): Promise<boolean> {
    try {
      // ƒê·∫£m b·∫£o BotManager ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
      await this.initialize();
      
      console.log(`[BotManager] üöÄ B·∫Øt ƒë·∫ßu start bot: ${bot.name} (${bot.id})`);
      console.log(`[BotManager] üìä Bot config:`, {
        symbol: bot.config?.trading?.symbol || 'BTCUSDT',
        strategy: bot.config?.strategy?.type || 'unknown',
        positionSize: bot.config?.positionSize || 10,
        testnet: bot.config?.account?.testnet || false
      });
      
      // Ki·ªÉm tra xem bot ƒë√£ ƒëang ch·∫°y ch∆∞a
      if (this.runningBots.has(bot.id)) {
        console.log(`[BotManager] ‚ö†Ô∏è Bot ${bot.name} ƒë√£ ƒëang ch·∫°y trong memory`);
        return true;
      }

      // Ki·ªÉm tra tr·∫°ng th√°i trong database
      console.log(`[BotManager] üîç Ki·ªÉm tra tr·∫°ng th√°i bot ${bot.name} trong database...`);
      const { data: dbBot } = await this.supabaseAdmin
        .from('trading_bots')
        .select('status')
        .eq('id', bot.id)
        .single();

      if (dbBot && dbBot.status === 'running') {
        console.log(`[BotManager] ‚ö†Ô∏è Bot ${bot.name} ƒë√£ running trong database, kh√¥ng c·∫ßn start l·∫°i`);
        return true; // Bot ƒë√£ ƒëang ch·∫°y, kh√¥ng c·∫ßn start l·∫°i
      }

      // T·∫°o BotExecutor m·ªõi
      console.log(`[BotManager] üîß T·∫°o BotExecutor cho bot ${bot.name}...`);
      const executor = new BotExecutor(bot);
      
      // Kh·ªüi t·∫°o bot
      console.log(`[BotManager] üîÑ Kh·ªüi t·∫°o bot ${bot.name}...`);
      const initialized = await executor.initialize();
      if (!initialized) {
        console.error(`[BotManager] ‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o bot ${bot.name}`);
        return false;
      }
      console.log(`[BotManager] ‚úÖ Bot ${bot.name} ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng`);

      // L∆∞u executor v√†o map
      this.runningBots.set(bot.id, executor);
      console.log(`[BotManager] üìù Bot ${bot.name} ƒë√£ ƒë∆∞·ª£c th√™m v√†o runningBots map`);
      
      // Ch·∫°y bot trong background (kh√¥ng await)
      console.log(`[BotManager] üîÑ B·∫Øt ƒë·∫ßu ch·∫°y bot ${bot.name} trong background...`);
      this.runBotInBackground(bot.id, executor);
      
      console.log(`[BotManager] ‚úÖ Bot ${bot.name} ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông th√†nh c√¥ng`);
      console.log(`[BotManager] üìä T·ªïng s·ªë bot ƒëang ch·∫°y: ${this.runningBots.size}`);
      return true;
      
    } catch (error) {
      console.error(`[BotManager] ‚ùå L·ªói khi start bot ${bot.name}:`, error);
      return false;
    }
  }

  private async runBotInBackground(botId: string, executor: BotExecutor) {
    try {
      console.log(`[BotManager] üîÑ Ch·∫°y bot ${botId} trong background...`);
      
      // C·∫≠p nh·∫≠t status bot th√†nh running
      await this.updateBotStatus(botId, 'running');
      
      // Ch·∫°y bot trong background
      executor.start().catch(async (error) => {
        console.error(`[BotManager] ‚ùå Bot ${botId} g·∫∑p l·ªói:`, error);
        await this.stopBot(botId);
      });
      
    } catch (error) {
      console.error(`[BotManager] ‚ùå L·ªói khi ch·∫°y bot ${botId} trong background:`, error);
      await this.stopBot(botId);
    }
  }

  async stopBot(botId: string): Promise<boolean> {
    try {
      console.log(`[BotManager] üõë D·ª´ng bot: ${botId}`);
      
      // C·∫≠p nh·∫≠t status ngay l·∫≠p t·ª©c ƒë·ªÉ ngƒÉn ch·∫∑n giao d·ªãch m·ªõi
      await this.updateBotStatus(botId, 'stopped');
      
      const executor = this.runningBots.get(botId);
      if (!executor) {
        console.log(`[BotManager] ‚ÑπÔ∏è Bot ${botId} kh√¥ng ƒëang ch·∫°y trong memory`);
        return true;
      }

      // D·ª´ng executor
      await executor.stop();
      
      // X√≥a kh·ªèi map
      this.runningBots.delete(botId);
      
      // ƒê·∫£m b·∫£o status ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
      try {
        const { data: botStatus } = await this.supabaseAdmin
          .from('trading_bots')
          .select('status')
          .eq('id', botId)
          .single();
        
        if (botStatus && botStatus.status !== 'stopped') {
          console.log(`[BotManager] ‚ö†Ô∏è Bot ${botId} status not properly updated, forcing stop`);
          await this.updateBotStatus(botId, 'stopped');
        }
      } catch (error) {
        console.error(`[BotManager] Error verifying bot ${botId} stop status:`, error);
      }
      
      console.log(`[BotManager] ‚úÖ Bot ${botId} ƒë√£ ƒë∆∞·ª£c d·ª´ng th√†nh c√¥ng`);
      return true;
      
    } catch (error) {
      console.error(`[BotManager] ‚ùå L·ªói khi stop bot ${botId}:`, error);
      return false;
    }
  }

  async stopAllBots(): Promise<void> {
    console.log('[BotManager] üõë D·ª´ng t·∫•t c·∫£ bot...');
    
    const botIds = Array.from(this.runningBots.keys());
    console.log(`[BotManager] üìã T√¨m th·∫•y ${botIds.length} bot ƒëang ch·∫°y:`, botIds);
    
    for (const botId of botIds) {
      await this.stopBot(botId);
    }
    
    console.log('[BotManager] ‚úÖ ƒê√£ d·ª´ng t·∫•t c·∫£ bot');
  }

  isBotRunning(botId: string): boolean {
    return this.runningBots.has(botId);
  }

  getRunningBotsCount(): number {
    return this.runningBots.size;
  }

  getRunningBots(): string[] {
    return Array.from(this.runningBots.keys());
  }

  private async updateBotStatus(botId: string, status: TradingBot['status']) {
    try {
      console.log(`[BotManager] üìä C·∫≠p nh·∫≠t status bot ${botId}: ${status}`);
      
      // S·ª≠ d·ª•ng supabaseAdmin ƒë·ªÉ bypass RLS
      const { error } = await this.supabaseAdmin
        .from('trading_bots')
        .update({ 
          status,
          updated_at: new Date().toISOString(),
          ...(status === 'running' ? { last_run_at: new Date().toISOString() } : {})
        })
        .eq('id', botId);

      if (error) {
        console.error('[BotManager] ‚ùå L·ªói khi c·∫≠p nh·∫≠t status bot:', error);
      } else {
        console.log(`[BotManager] ‚úÖ ƒê√£ c·∫≠p nh·∫≠t status bot ${botId}: ${status}`);
      }
    } catch (error) {
      console.error('[BotManager] ‚ùå L·ªói khi c·∫≠p nh·∫≠t status bot:', error);
    }
  }
}

export const botManager = BotManager.getInstance(); 