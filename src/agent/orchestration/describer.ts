/**
 * Result Describer
 * 
 * Component n√†y ƒë·ªãnh d·∫°ng k·∫øt qu·∫£ c·ªßa c√¥ng c·ª• ƒë·ªÉ hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
 * theo c√°c ƒë·ªãnh d·∫°ng kh√°c nhau (markdown, plain text, etc.)
 */

/**
 * ƒê·ªãnh d·∫°ng ƒë·∫ßu ra ƒë∆∞·ª£c h·ªó tr·ª£
 */
export type OutputFormat = 'markdown' | 'plain' | 'json';

/**
 * ResultDescriber qu·∫£n l√Ω vi·ªác ƒë·ªãnh d·∫°ng k·∫øt qu·∫£ c·ªßa c√¥ng c·ª•
 */
export class ResultDescriber {
  /**
   * ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ c·ªßa c√¥ng c·ª• th√†nh chu·ªói
   */
  public formatResult(
    toolName: string, 
    result: any, 
    format: OutputFormat = 'markdown'
  ): string {
    console.log(`[ResultDescriber] ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ c·ªßa c√¥ng c·ª• "${toolName}" (${format})`);
    
    // Ki·ªÉm tra k·∫øt qu·∫£ h·ª£p l·ªá
    if (!result) {
      return this.formatError('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ c√¥ng c·ª•', format);
    }
    
    // Ki·ªÉm tra l·ªói
    if (result.error || !result.success) {
      return this.formatError(result.error || 'C√¥ng c·ª• tr·∫£ v·ªÅ l·ªói', format);
    }
    
    // ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ d·ª±a tr√™n lo·∫°i c√¥ng c·ª•
    switch (toolName) {
      case 'marketDataTool':
        return this.formatMarketData(result, format);
      
      case 'technicalAnalysisTool':
        return this.formatTechnicalAnalysis(result, format);
      
      case 'tradingTool':
        return this.formatTradingResult(result, format);
      
      case 'balanceCheckTool':
        return this.formatBalanceCheck(result, format);
      
      default:
        // ƒê·ªãnh d·∫°ng chung cho c√°c c√¥ng c·ª• kh√°c
        return this.formatGeneric(result, format);
    }
  }
  
  /**
   * ƒê·ªãnh d·∫°ng l·ªói
   */
  private formatError(errorMessage: string, format: OutputFormat): string {
    switch (format) {
      case 'markdown':
        return `**L·ªói:** ${errorMessage}`;
      
      case 'plain':
        return `L·ªói: ${errorMessage}`;
      
      case 'json':
        return JSON.stringify({ error: errorMessage });
      
      default:
        return errorMessage;
    }
  }
  
  /**
   * ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ d·ªØ li·ªáu th·ªã tr∆∞·ªùng
   */
  private formatMarketData(result: any, format: OutputFormat): string {
    const data = result.data || result;
    
    // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu
    if (data.marketData) {
      // ƒê√¢y l√† d·ªØ li·ªáu t·ªïng quan th·ªã tr∆∞·ªùng
      return this.formatMarketOverview(data.marketData, format);
    } else if (data.priceData) {
      // ƒê√¢y l√† d·ªØ li·ªáu gi√° c·ªßa m·ªôt m√£ ti·ªÅn c·ª• th·ªÉ
      return this.formatPriceData(data.priceData, format);
    }
    
    // ƒê·ªãnh d·∫°ng chung
    return this.formatGeneric(data, format);
  }
  
  /**
   * ƒê·ªãnh d·∫°ng t·ªïng quan th·ªã tr∆∞·ªùng
   */
  private formatMarketOverview(marketData: any, format: OutputFormat): string {
    if (format === 'json') {
      return JSON.stringify(marketData, null, 2);
    }
    
    if (!marketData || typeof marketData !== 'string') {
      return 'Kh√¥ng c√≥ d·ªØ li·ªáu th·ªã tr∆∞·ªùng';
    }
    
    if (format === 'markdown') {
      return `## T·ªïng quan th·ªã tr∆∞·ªùng\n\n${marketData}`;
    } else {
      return `T·ªïng quan th·ªã tr∆∞·ªùng:\n${marketData}`;
    }
  }
  
  /**
   * ƒê·ªãnh d·∫°ng d·ªØ li·ªáu gi√°
   */
  private formatPriceData(priceData: any, format: OutputFormat): string {
    if (format === 'json') {
      return JSON.stringify(priceData, null, 2);
    }
    
    if (!priceData || !priceData.symbol) {
      return 'Kh√¥ng c√≥ d·ªØ li·ªáu gi√°';
    }
    
    const { symbol, price, change24h } = priceData;
    const changeText = change24h >= 0 ? `+${change24h}%` : `${change24h}%`;
    const changeEmoji = change24h >= 0 ? 'üìà' : 'üìâ';
    
    if (format === 'markdown') {
      return `## Gi√° ${symbol}\n\n**Gi√° hi·ªán t·∫°i:** $${price}\n**Thay ƒë·ªïi 24h:** ${changeText} ${changeEmoji}`;
    } else {
      return `Gi√° ${symbol}:\nGi√° hi·ªán t·∫°i: $${price}\nThay ƒë·ªïi 24h: ${changeText}`;
    }
  }
  
  /**
   * ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ ph√¢n t√≠ch k·ªπ thu·∫≠t
   */
  private formatTechnicalAnalysis(result: any, format: OutputFormat): string {
    const data = result.data || result;
    
    if (format === 'json') {
      return JSON.stringify(data, null, 2);
    }
    
    if (!data || !data.indicators) {
      return 'Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n t√≠ch k·ªπ thu·∫≠t';
    }
    
    const { symbol, timeframe, indicators, summary } = data;
    
    // ƒê·ªãnh d·∫°ng Ichimoku Cloud n·∫øu c√≥
    let ichimokuText = '';
    if (indicators.ichimokuCloud) {
      const ic = indicators.ichimokuCloud;
      ichimokuText = format === 'markdown' 
        ? `\n\n### Ichimoku Cloud\n\n- Tenkan-sen: ${ic.tenkanSen}\n- Kijun-sen: ${ic.kijunSen}\n- Senkou Span A: ${ic.senkouSpanA}\n- Senkou Span B: ${ic.senkouSpanB}\n- Chikou Span: ${ic.chikouSpan}\n- T√≠n hi·ªáu: ${ic.signal}\n- Ph√¢n t√≠ch: ${ic.analysis}`
        : `\n\nIchimoku Cloud:\n- Tenkan-sen: ${ic.tenkanSen}\n- Kijun-sen: ${ic.kijunSen}\n- Senkou Span A: ${ic.senkouSpanA}\n- Senkou Span B: ${ic.senkouSpanB}\n- Chikou Span: ${ic.chikouSpan}\n- T√≠n hi·ªáu: ${ic.signal}\n- Ph√¢n t√≠ch: ${ic.analysis}`;
    }
    
    // ƒê·ªãnh d·∫°ng RSI n·∫øu c√≥
    let rsiText = '';
    if (indicators.RSI) {
      const rsiValue = indicators.RSI;
      let rsiSignal = 'Trung t√≠nh';
      if (rsiValue > 70) rsiSignal = 'Qu√° mua';
      else if (rsiValue < 30) rsiSignal = 'Qu√° b√°n';
      
      rsiText = format === 'markdown'
        ? `\n\n### RSI\n\n- Gi√° tr·ªã: ${rsiValue}\n- T√≠n hi·ªáu: ${rsiSignal}`
        : `\n\nRSI:\n- Gi√° tr·ªã: ${rsiValue}\n- T√≠n hi·ªáu: ${rsiSignal}`;
    }
    
    // ƒê·ªãnh d·∫°ng MACD n·∫øu c√≥
    let macdText = '';
    if (indicators.MACD) {
      const macd = indicators.MACD;
      const signal = macd.histogram > 0 ? 'T√≠n hi·ªáu tƒÉng' : 'T√≠n hi·ªáu gi·∫£m';
      
      macdText = format === 'markdown'
        ? `\n\n### MACD\n\n- ƒê∆∞·ªùng MACD: ${macd.MACD}\n- ƒê∆∞·ªùng t√≠n hi·ªáu: ${macd.signal}\n- Histogram: ${macd.histogram}\n- T√≠n hi·ªáu: ${signal}`
        : `\n\nMACD:\n- ƒê∆∞·ªùng MACD: ${macd.MACD}\n- ƒê∆∞·ªùng t√≠n hi·ªáu: ${macd.signal}\n- Histogram: ${macd.histogram}\n- T√≠n hi·ªáu: ${signal}`;
    }
    
    // ƒê·ªãnh d·∫°ng trung b√¨nh ƒë·ªông n·∫øu c√≥
    let maText = '';
    if (indicators.MA50 || indicators.ma50) {
      const ma50 = indicators.MA50 || indicators.ma50;
      const ma200 = indicators.MA200 || indicators.ma200;
      const currentPrice = indicators.currentPrice;
      
      let signal = 'Trung t√≠nh';
      if (currentPrice > ma50 && ma50 > ma200) {
        signal = 'Xu h∆∞·ªõng tƒÉng m·∫°nh';
      } else if (currentPrice > ma50) {
        signal = 'Xu h∆∞·ªõng tƒÉng ng·∫Øn h·∫°n';
      } else if (currentPrice < ma50 && ma50 < ma200) {
        signal = 'Xu h∆∞·ªõng gi·∫£m m·∫°nh';
      } else if (currentPrice < ma50) {
        signal = 'Xu h∆∞·ªõng gi·∫£m ng·∫Øn h·∫°n';
      }
      
      maText = format === 'markdown'
        ? `\n\n### Trung b√¨nh ƒë·ªông\n\n- MA50: ${ma50}\n- MA200: ${ma200}\n- Gi√° hi·ªán t·∫°i: ${currentPrice}\n- T√≠n hi·ªáu: ${signal}`
        : `\n\nTrung b√¨nh ƒë·ªông:\n- MA50: ${ma50}\n- MA200: ${ma200}\n- Gi√° hi·ªán t·∫°i: ${currentPrice}\n- T√≠n hi·ªáu: ${signal}`;
    }
    
    // ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ chung
    if (format === 'markdown') {
      return `## Ph√¢n t√≠ch k·ªπ thu·∫≠t ${symbol} (${timeframe})\n\n${summary || ''}${ichimokuText}${rsiText}${macdText}${maText}`;
    } else {
      return `Ph√¢n t√≠ch k·ªπ thu·∫≠t ${symbol} (${timeframe}):\n${summary || ''}${ichimokuText}${rsiText}${macdText}${maText}`;
    }
  }
  
  /**
   * ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ giao d·ªãch
   */
  private formatTradingResult(result: any, format: OutputFormat): string {
    const data = result.data || result;
    
    if (format === 'json') {
      return JSON.stringify(data, null, 2);
    }
    
    if (!data) {
      return 'Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch';
    }
    
    if (data.orderResult) {
      // K·∫øt qu·∫£ ƒë·∫∑t l·ªánh
      const { symbol, side, type, quantity, price, orderId, status } = data.orderResult;
      
      if (format === 'markdown') {
        return `## ƒê·∫∑t l·ªánh th√†nh c√¥ng\n\n- Symbol: ${symbol}\n- Lo·∫°i: ${type}\n- H∆∞·ªõng: ${side}\n- S·ªë l∆∞·ª£ng: ${quantity}\n- Gi√°: ${price || 'Th·ªã tr∆∞·ªùng'}\n- ID l·ªánh: ${orderId}\n- Tr·∫°ng th√°i: ${status}`;
      } else {
        return `ƒê·∫∑t l·ªánh th√†nh c√¥ng:\n- Symbol: ${symbol}\n- Lo·∫°i: ${type}\n- H∆∞·ªõng: ${side}\n- S·ªë l∆∞·ª£ng: ${quantity}\n- Gi√°: ${price || 'Th·ªã tr∆∞·ªùng'}\n- ID l·ªánh: ${orderId}\n- Tr·∫°ng th√°i: ${status}`;
      }
    }
    
    // ƒê·ªãnh d·∫°ng chung
    return this.formatGeneric(data, format);
  }
  
  /**
   * ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ ki·ªÉm tra s·ªë d∆∞
   */
  private formatBalanceCheck(result: any, format: OutputFormat): string {
    const data = result.data || result;
    
    if (format === 'json') {
      return JSON.stringify(data, null, 2);
    }
    
    if (!data || !data.balances) {
      return 'Kh√¥ng c√≥ d·ªØ li·ªáu s·ªë d∆∞';
    }
    
    const { balances, totalValue } = data;
    
    // Danh s√°ch c√°c s·ªë d∆∞
    let balanceItems = '';
    for (const [asset, info] of Object.entries(balances)) {
      const { free, locked, usdValue } = info as any;
      
      if (format === 'markdown') {
        balanceItems += `- **${asset}**: ${free} (c√≥ th·ªÉ giao d·ªãch), ${locked} (ƒëang kh√≥a), ~$${usdValue}\n`;
      } else {
        balanceItems += `- ${asset}: ${free} (c√≥ th·ªÉ giao d·ªãch), ${locked} (ƒëang kh√≥a), ~$${usdValue}\n`;
      }
    }
    
    if (format === 'markdown') {
      return `## S·ªë d∆∞ t√†i kho·∫£n\n\n${balanceItems}\n**T·ªïng gi√° tr·ªã**: ~$${totalValue}`;
    } else {
      return `S·ªë d∆∞ t√†i kho·∫£n:\n${balanceItems}\nT·ªïng gi√° tr·ªã: ~$${totalValue}`;
    }
  }
  
  /**
   * ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ chung
   */
  private formatGeneric(data: any, format: OutputFormat): string {
    if (format === 'json') {
      return JSON.stringify(data, null, 2);
    }
    
    if (typeof data === 'string') {
      return data;
    }
    
    // C·ªë g·∫Øng ƒë·ªãnh d·∫°ng d·ªØ li·ªáu th√†nh vƒÉn b·∫£n c√≥ √Ω nghƒ©a
    let result = '';
    
    if (Array.isArray(data)) {
      for (const item of data) {
        result += `- ${this.formatSimpleValue(item)}\n`;
      }
    } else if (typeof data === 'object' && data !== null) {
      for (const [key, value] of Object.entries(data)) {
        const formattedKey = key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1');
        result += `${formattedKey}: ${this.formatSimpleValue(value)}\n`;
      }
    } else {
      result = this.formatSimpleValue(data);
    }
    
    return result;
  }
  
  /**
   * ƒê·ªãnh d·∫°ng gi√° tr·ªã ƒë∆°n gi·∫£n
   */
  private formatSimpleValue(value: any): string {
    if (value === null || value === undefined) {
      return 'Kh√¥ng c√≥ d·ªØ li·ªáu';
    }
    
    if (typeof value === 'object') {
      return JSON.stringify(value);
    }
    
    return String(value);
  }
} 