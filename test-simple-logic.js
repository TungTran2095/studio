// Test script cho logic ƒë∆°n gi·∫£n: BUY = d√πng h·∫øt USDT, SELL = b√°n h·∫øt BTC
function testSimpleLogic() {
  console.log('üß™ Testing Simple Bot Logic...\n');
  
  const testCases = [
    {
      name: 'BUY Signal + No BTC',
      signal: 'buy',
      hasRealPosition: false,
      expected: 'üü¢ EXECUTE BUY - D√πng h·∫øt USDT ƒë·ªÉ mua BTC'
    },
    {
      name: 'SELL Signal + Has BTC',
      signal: 'sell',
      hasRealPosition: true,
      expected: 'üî¥ EXECUTE SELL - B√°n h·∫øt BTC ƒë·ªÉ l·∫•y USDT'
    },
    {
      name: 'BUY Signal + Has BTC (Skip)',
      signal: 'buy',
      hasRealPosition: true,
      expected: '‚è≠Ô∏è SKIP BUY - ƒê√£ c√≥ BTC, ch·ªù SELL signal'
    },
    {
      name: 'SELL Signal + No BTC (Skip)',
      signal: 'sell',
      hasRealPosition: false,
      expected: '‚è≠Ô∏è SKIP SELL - Kh√¥ng c√≥ BTC ƒë·ªÉ b√°n, ch·ªù BUY signal'
    },
    {
      name: 'No Signal',
      signal: null,
      hasRealPosition: false,
      expected: '‚è≥ WAIT - Kh√¥ng c√≥ signal, ch·ªù t√≠n hi·ªáu ti·∫øp theo'
    },
    {
      name: 'No Signal + Has BTC',
      signal: null,
      hasRealPosition: true,
      expected: '‚è≥ WAIT - Kh√¥ng c√≥ signal, ch·ªù t√≠n hi·ªáu ti·∫øp theo'
    }
  ];
  
  testCases.forEach((testCase, index) => {
    console.log(`üìã Test Case ${index + 1}: ${testCase.name}`);
    console.log(`   Signal: ${testCase.signal}`);
    console.log(`   Has Real Position: ${testCase.hasRealPosition}`);
    console.log(`   Expected: ${testCase.expected}`);
    
    // Test logic
    let result = '';
    if (testCase.signal === 'buy' && !testCase.hasRealPosition) {
      result = 'üü¢ EXECUTE BUY - D√πng h·∫øt USDT ƒë·ªÉ mua BTC';
    } else if (testCase.signal === 'sell' && testCase.hasRealPosition) {
      result = 'üî¥ EXECUTE SELL - B√°n h·∫øt BTC ƒë·ªÉ l·∫•y USDT';
    } else if (testCase.signal === 'buy' && testCase.hasRealPosition) {
      result = '‚è≠Ô∏è SKIP BUY - ƒê√£ c√≥ BTC, ch·ªù SELL signal';
    } else if (testCase.signal === 'sell' && !testCase.hasRealPosition) {
      result = '‚è≠Ô∏è SKIP SELL - Kh√¥ng c√≥ BTC ƒë·ªÉ b√°n, ch·ªù BUY signal';
    } else if (!testCase.signal) {
      result = '‚è≥ WAIT - Kh√¥ng c√≥ signal, ch·ªù t√≠n hi·ªáu ti·∫øp theo';
    } else {
      result = '‚ùì UNKNOWN - Tr∆∞·ªùng h·ª£p kh√¥ng x√°c ƒë·ªãnh';
    }
    
    console.log(`   Result: ${result}`);
    console.log(`   Status: ${result === testCase.expected ? '‚úÖ PASS' : '‚ùå FAIL'}`);
    console.log('');
  });
  
  // Summary
  console.log('üìä Summary:');
  console.log('   üü¢ BUY: Ch·ªâ khi signal=buy v√† kh√¥ng c√≥ BTC');
  console.log('   üî¥ SELL: Ch·ªâ khi signal=sell v√† c√≥ BTC');
  console.log('   ‚è≠Ô∏è SKIP: Khi signal kh√¥ng ph√π h·ª£p v·ªõi balance hi·ªán t·∫°i');
  console.log('   ‚è≥ WAIT: Khi kh√¥ng c√≥ signal');
  console.log('');
  console.log('üí° Logic n√†y ƒë∆°n gi·∫£n v√† r√µ r√†ng:');
  console.log('   - Kh√¥ng qu·∫£n l√Ω position ph·ª©c t·∫°p');
  console.log('   - Ch·ªâ BUY/SELL theo signal v√† balance');
  console.log('   - T·ª± ƒë·ªông b·ªè qua signal kh√¥ng ph√π h·ª£p');
}

// Ch·∫°y test
testSimpleLogic();
