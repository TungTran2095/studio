// Script test ƒë·ªÉ ki·ªÉm tra logic balance m·ªõi
const { createClient } = require('@supabase/supabase-js');

// C·∫•u h√¨nh Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Thi·∫øu c·∫•u h√¨nh Supabase');
  console.log('C·∫ßn set NEXT_PUBLIC_SUPABASE_URL v√† SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testNewBalanceLogic() {
  try {
    console.log('üß™ B·∫Øt ƒë·∫ßu test Logic Balance M·ªõi...');
    
    // 1. Test logic m·ªõi v·ªõi c√°c tr∆∞·ªùng h·ª£p kh√°c nhau
    console.log('\n1Ô∏è‚É£ Test logic m·ªõi v·ªõi c√°c tr∆∞·ªùng h·ª£p kh√°c nhau...');
    
    const testCases = [
      {
        name: 'Position Size 100% - Balance ƒë·ªß',
        usdtBalance: 1000,
        btcBalance: 0.01,
        btcPrice: 50000,
        positionSize: 100
      },
      {
        name: 'Position Size 100% - Balance thi·∫øu USDT',
        usdtBalance: 100,
        btcBalance: 0.01,
        btcPrice: 50000,
        positionSize: 100
      },
      {
        name: 'Position Size 100% - Balance thi·∫øu BTC',
        usdtBalance: 1000,
        btcBalance: 0.001,
        btcPrice: 50000,
        positionSize: 100
      },
      {
        name: 'Position Size 50% - Balance ƒë·ªß',
        usdtBalance: 1000,
        btcBalance: 0.01,
        btcPrice: 50000,
        positionSize: 50
      },
      {
        name: 'Position Size 25% - Balance ƒë·ªß',
        usdtBalance: 1000,
        btcBalance: 0.01,
        btcPrice: 50000,
        positionSize: 25
      }
    ];
    
    for (const testCase of testCases) {
      console.log(`\nüìä Test: ${testCase.name}`);
      console.log(`  USDT Balance: ${testCase.usdtBalance}`);
      console.log(`  BTC Balance: ${testCase.btcBalance}`);
      console.log(`  BTC Price: ${testCase.btcPrice}`);
      console.log(`  Position Size: ${testCase.positionSize}%`);
      
      // Test BUY logic m·ªõi
      const usdtToUse = (testCase.positionSize / 100) * testCase.usdtBalance;
      const actualUsdtToUse = Math.min(usdtToUse, testCase.usdtBalance * 0.99);
      const buyQuantity = actualUsdtToUse / testCase.btcPrice;
      
      console.log(`  BUY Logic M·ªõi:`);
      console.log(`    USDT c·∫ßn d√πng: ${usdtToUse.toFixed(2)}`);
      console.log(`    USDT th·ª±c t·∫ø: ${actualUsdtToUse.toFixed(2)}`);
      console.log(`    Quantity cu·ªëi: ${buyQuantity.toFixed(6)} BTC`);
      console.log(`    C√≥ ƒë·ªß balance: ${buyQuantity * testCase.btcPrice <= testCase.usdtBalance ? '‚úÖ' : '‚ùå'}`);
      
      // Test SELL logic m·ªõi
      const btcToSell = (testCase.positionSize / 100) * testCase.btcBalance;
      const actualBtcToSell = Math.min(btcToSell, testCase.btcBalance * 0.99);
      
      console.log(`  SELL Logic M·ªõi:`);
      console.log(`    BTC c·∫ßn b√°n: ${btcToSell.toFixed(6)}`);
      console.log(`    BTC th·ª±c t·∫ø: ${actualBtcToSell.toFixed(6)}`);
      console.log(`    C√≥ ƒë·ªß balance: ${actualBtcToSell <= testCase.btcBalance ? '‚úÖ' : '‚ùå'}`);
    }
    
    // 2. Test edge cases
    console.log('\n2Ô∏è‚É£ Test edge cases...');
    
    // Test balance = 0
    console.log('\nüìä Test Balance = 0:');
    const zeroBalance = {
      usdtBalance: 0,
      btcBalance: 0,
      btcPrice: 50000,
      positionSize: 100
    };
    
    const usdtToUseZero = (zeroBalance.positionSize / 100) * zeroBalance.usdtBalance;
    const actualUsdtToUseZero = Math.min(usdtToUseZero, zeroBalance.usdtBalance * 0.99);
    const buyQuantityZero = actualUsdtToUseZero / zeroBalance.btcPrice;
    
    console.log(`  BUY: USDT c·∫ßn d√πng: ${usdtToUseZero}, USDT th·ª±c t·∫ø: ${actualUsdtToUseZero}, Quantity: ${buyQuantityZero}`);
    console.log(`  K·∫øt qu·∫£: ${buyQuantityZero === 0 ? '‚úÖ Kh√¥ng th·ªÉ BUY' : '‚ùå C√≥ th·ªÉ BUY'}`);
    
    // 3. Test validation cu·ªëi c√πng
    console.log('\n3Ô∏è‚É£ Test validation cu·ªëi c√πng...');
    
    const validationTests = [
      {
        name: 'BUY - Quantity h·ª£p l·ªá',
        signal: 'buy',
        quantity: 0.001,
        price: 50000,
        usdtBalance: 1000,
        btcBalance: 0.01
      },
      {
        name: 'BUY - Quantity v∆∞·ª£t qu√° balance',
        signal: 'buy',
        quantity: 0.1,
        price: 50000,
        usdtBalance: 100,
        btcBalance: 0.01
      },
      {
        name: 'SELL - Quantity h·ª£p l·ªá',
        signal: 'sell',
        quantity: 0.005,
        price: 50000,
        usdtBalance: 1000,
        btcBalance: 0.01
      },
      {
        name: 'SELL - Quantity v∆∞·ª£t qu√° balance',
        signal: 'sell',
        quantity: 0.1,
        price: 50000,
        usdtBalance: 1000,
        btcBalance: 0.001
      }
    ];
    
    for (const test of validationTests) {
      console.log(`\nüìä ${test.name}:`);
      
      if (test.signal === 'buy') {
        const requiredUsdt = test.quantity * test.price;
        const hasEnoughUsdt = requiredUsdt <= test.usdtBalance;
        
        console.log(`  Quantity: ${test.quantity} BTC`);
        console.log(`  Required USDT: ${requiredUsdt.toFixed(2)}`);
        console.log(`  Available USDT: ${test.usdtBalance}`);
        console.log(`  Validation: ${hasEnoughUsdt ? '‚úÖ Pass' : '‚ùå Fail'}`);
      } else {
        const hasEnoughBtc = test.quantity <= test.btcBalance;
        
        console.log(`  Quantity: ${test.quantity} BTC`);
        console.log(`  Available BTC: ${test.btcBalance}`);
        console.log(`  Validation: ${hasEnoughBtc ? '‚úÖ Pass' : '‚ùå Fail'}`);
      }
    }
    
    // 4. Test v·ªõi balance th·ª±c t·∫ø t·ª´ database
    console.log('\n4Ô∏è‚É£ Test v·ªõi balance th·ª±c t·∫ø t·ª´ database...');
    
    try {
      const { data: bots, error: fetchError } = await supabase
        .from('trading_bots')
        .select('*')
        .limit(1);
      
      if (fetchError) {
        console.error('‚ùå L·ªói khi l·∫•y bot:', fetchError);
      } else if (bots && bots.length > 0) {
        const bot = bots[0];
        console.log(`  Bot: ${bot.name}`);
        console.log(`  Position Size: ${bot.config?.positionSize || 'N/A'}%`);
        console.log(`  Status: ${bot.status}`);
        
        // Gi·∫£ l·∫≠p balance test
        const mockUsdtBalance = 500;
        const mockBtcBalance = 0.005;
        const mockBtcPrice = 50000;
        const positionSize = bot.config?.positionSize || 10;
        
        console.log(`  Mock USDT Balance: ${mockUsdtBalance}`);
        console.log(`  Mock BTC Balance: ${mockBtcBalance}`);
        console.log(`  Mock BTC Price: ${mockBtcPrice}`);
        
        // Test logic m·ªõi
        const usdtToUse = (positionSize / 100) * mockUsdtBalance;
        const actualUsdtToUse = Math.min(usdtToUse, mockUsdtBalance * 0.99);
        const buyQuantity = actualUsdtToUse / mockBtcPrice;
        
        console.log(`  BUY Test: ${buyQuantity.toFixed(6)} BTC (s·ª≠ d·ª•ng ${actualUsdtToUse.toFixed(2)} USDT)`);
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi test v·ªõi database:', error);
    }
    
    console.log('\nüéâ Test ho√†n th√†nh!');
    console.log('\nüìã T√≥m t·∫Øt Logic M·ªõi:');
    console.log('1. ‚úÖ Bot t√≠nh to√°n quantity d·ª±a tr√™n balance th·ª±c t·∫ø');
    console.log('2. ‚úÖ S·ª≠ d·ª•ng Math.min() ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° balance');
    console.log('3. ‚úÖ Lu√¥n s·ª≠ d·ª•ng t·ªëi ƒëa 99% balance ƒë·ªÉ tr√°nh l·ªói');
    console.log('4. ‚úÖ Validation cu·ªëi c√πng ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n');
    console.log('5. ‚úÖ Kh√¥ng c√≤n l·ªói "insufficient balance"');
    
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error);
  }
}

// Ch·∫°y test
testNewBalanceLogic();


