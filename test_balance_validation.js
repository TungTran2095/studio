// Script test ƒë·ªÉ ki·ªÉm tra balance validation
const { createClient } = require('@supabase/supabase-js');

// C·∫•u h√¨nh Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Thi·∫øu c·∫•u h√¨nh Supabase');
  console.log('C·∫ßn set NEXT_PUBLIC_SUPABASE_URL v√† SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testBalanceValidation() {
  try {
    console.log('üß™ B·∫Øt ƒë·∫ßu test Balance Validation...');
    
    // 1. Test c√°c tr∆∞·ªùng h·ª£p balance kh√°c nhau
    console.log('\n1Ô∏è‚É£ Test c√°c tr∆∞·ªùng h·ª£p balance kh√°c nhau...');
    
    const testCases = [
      {
        name: 'Balance ƒë·ªß',
        usdtBalance: 1000,
        btcBalance: 0.01,
        btcPrice: 50000,
        positionSize: 50
      },
      {
        name: 'Balance thi·∫øu USDT',
        usdtBalance: 100,
        btcBalance: 0.01,
        btcPrice: 50000,
        positionSize: 100
      },
      {
        name: 'Balance thi·∫øu BTC',
        usdtBalance: 1000,
        btcBalance: 0.001,
        btcPrice: 50000,
        positionSize: 100
      },
      {
        name: 'Balance = 0',
        usdtBalance: 0,
        btcBalance: 0,
        btcPrice: 50000,
        positionSize: 100
      }
    ];
    
    for (const testCase of testCases) {
      console.log(`\nüìä Test: ${testCase.name}`);
      console.log(`  USDT Balance: ${testCase.usdtBalance}`);
      console.log(`  BTC Balance: ${testCase.btcBalance}`);
      console.log(`  BTC Price: ${testCase.btcPrice}`);
      console.log(`  Position Size: ${testCase.positionSize}%`);
      
      // Test BUY
      const requiredUsdt = (testCase.positionSize / 100) * testCase.usdtBalance;
      const buyQuantity = requiredUsdt / testCase.btcPrice;
      
      if (testCase.usdtBalance <= 0) {
        console.log(`  BUY: ‚ùå Kh√¥ng th·ªÉ BUY - USDT balance = 0`);
      } else if (requiredUsdt > testCase.usdtBalance) {
        console.log(`  BUY: ‚ö†Ô∏è Kh√¥ng ƒë·ªß USDT - c·∫ßn ${requiredUsdt.toFixed(2)}, c√≥ ${testCase.usdtBalance}`);
        console.log(`  BUY: üîß ƒêi·ªÅu ch·ªânh: s·ª≠ d·ª•ng ${(testCase.usdtBalance * 0.99).toFixed(2)} USDT ‚Üí ${((testCase.usdtBalance * 0.99) / testCase.btcPrice).toFixed(6)} BTC`);
      } else {
        console.log(`  BUY: ‚úÖ C√≥ th·ªÉ BUY ${buyQuantity.toFixed(6)} BTC`);
      }
      
      // Test SELL
      const sellQuantity = (testCase.positionSize / 100) * testCase.btcBalance;
      
      if (testCase.btcBalance <= 0) {
        console.log(`  SELL: ‚ùå Kh√¥ng th·ªÉ SELL - BTC balance = 0`);
      } else if (sellQuantity > testCase.btcBalance) {
        console.log(`  SELL: ‚ö†Ô∏è Kh√¥ng ƒë·ªß BTC - c·∫ßn b√°n ${sellQuantity.toFixed(6)}, c√≥ ${testCase.btcBalance}`);
        console.log(`  SELL: üîß ƒêi·ªÅu ch·ªânh: b√°n ${(testCase.btcBalance * 0.99).toFixed(6)} BTC`);
      } else {
        console.log(`  SELL: ‚úÖ C√≥ th·ªÉ SELL ${sellQuantity.toFixed(6)} BTC`);
      }
    }
    
    // 2. Test edge cases
    console.log('\n2Ô∏è‚É£ Test edge cases...');
    
    // Test Position Size = 100% v·ªõi balance nh·ªè
    console.log('\nüìä Test Position Size = 100% v·ªõi balance nh·ªè:');
    const smallUsdtBalance = 10; // 10 USDT
    const smallBtcBalance = 0.0001; // 0.0001 BTC
    const btcPrice = 50000;
    
    const usdtNeeded = (100 / 100) * smallUsdtBalance;
    const btcNeeded = (100 / 100) * smallBtcBalance;
    
    console.log(`  USDT Balance: ${smallUsdtBalance}`);
    console.log(`  BTC Balance: ${smallBtcBalance}`);
    console.log(`  BTC Price: ${btcPrice}`);
    console.log(`  BUY: ${usdtNeeded} USDT ‚Üí ${(usdtNeeded / btcPrice).toFixed(8)} BTC`);
    console.log(`  SELL: ${btcNeeded.toFixed(8)} BTC`);
    
    // 3. Test validation logic
    console.log('\n3Ô∏è‚É£ Test validation logic...');
    
    console.log('\nüìä Test quantity validation:');
    const testQuantities = [0, -1, NaN, 0.000001, 1, 100];
    
    for (const qty of testQuantities) {
      const isValid = qty > 0 && !isNaN(qty);
      console.log(`  Quantity ${qty}: ${isValid ? '‚úÖ H·ª£p l·ªá' : '‚ùå Kh√¥ng h·ª£p l·ªá'}`);
    }
    
    // 4. Test balance check tr∆∞·ªõc order
    console.log('\n4Ô∏è‚É£ Test balance check tr∆∞·ªõc order...');
    
    const finalTestCases = [
      {
        name: 'BUY - ƒê·ªß balance',
        signal: 'buy',
        quantity: 0.001,
        price: 50000,
        usdtBalance: 1000,
        btcBalance: 0.01
      },
      {
        name: 'BUY - Thi·∫øu balance',
        signal: 'buy',
        quantity: 0.1,
        price: 50000,
        usdtBalance: 100,
        btcBalance: 0.01
      },
      {
        name: 'SELL - ƒê·ªß balance',
        signal: 'sell',
        quantity: 0.005,
        price: 50000,
        usdtBalance: 1000,
        btcBalance: 0.01
      },
      {
        name: 'SELL - Thi·∫øu balance',
        signal: 'sell',
        quantity: 0.1,
        price: 50000,
        usdtBalance: 1000,
        btcBalance: 0.001
      }
    ];
    
    for (const testCase of finalTestCases) {
      console.log(`\nüìä ${testCase.name}:`);
      
      if (testCase.signal === 'buy') {
        const requiredUsdt = testCase.quantity * testCase.price;
        const hasEnoughUsdt = requiredUsdt <= testCase.usdtBalance;
        
        console.log(`  Quantity: ${testCase.quantity} BTC`);
        console.log(`  Price: ${testCase.price} USDT`);
        console.log(`  Required USDT: ${requiredUsdt.toFixed(2)}`);
        console.log(`  Available USDT: ${testCase.usdtBalance}`);
        console.log(`  Result: ${hasEnoughUsdt ? '‚úÖ C√≥ th·ªÉ BUY' : '‚ùå Kh√¥ng ƒë·ªß USDT'}`);
      } else {
        const hasEnoughBtc = testCase.quantity <= testCase.btcBalance;
        
        console.log(`  Quantity: ${testCase.quantity} BTC`);
        console.log(`  Available BTC: ${testCase.btcBalance}`);
        console.log(`  Result: ${hasEnoughBtc ? '‚úÖ C√≥ th·ªÉ SELL' : '‚ùå Kh√¥ng ƒë·ªß BTC'}`);
      }
    }
    
    console.log('\nüéâ Test ho√†n th√†nh!');
    console.log('\nüìã H∆∞·ªõng d·∫´n ki·ªÉm tra:');
    console.log('1. V√†o ·ª©ng d·ª•ng v√† test Position Size = 100%');
    console.log('2. Ki·ªÉm tra xem c√≥ l·ªói "insufficient balance" kh√¥ng');
    console.log('3. Xem console log ƒë·ªÉ ƒë·∫£m b·∫£o bot t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh quantity');
    console.log('4. Ki·ªÉm tra c·∫£nh b√°o v·ªÅ balance trong frontend');
    
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error);
  }
}

// Ch·∫°y test
testBalanceValidation();

