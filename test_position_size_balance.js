// Script test ƒë·ªÉ ki·ªÉm tra balance v√† Position Size
const { createClient } = require('@supabase/supabase-js');

// C·∫•u h√¨nh Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Thi·∫øu c·∫•u h√¨nh Supabase');
  console.log('C·∫ßn set NEXT_PUBLIC_SUPABASE_URL v√† SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testPositionSizeBalance() {
  try {
    console.log('üß™ B·∫Øt ƒë·∫ßu test Position Size v√† Balance...');
    
    // 1. L·∫•y danh s√°ch bot
    console.log('\n1Ô∏è‚É£ L·∫•y danh s√°ch bot...');
    const { data: bots, error: fetchError } = await supabase
      .from('trading_bots')
      .select('*')
      .limit(3);
    
    if (fetchError) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch bot:', fetchError);
      return;
    }
    
    if (!bots || bots.length === 0) {
      console.log('‚ÑπÔ∏è Kh√¥ng c√≥ bot n√†o trong database');
      return;
    }
    
    console.log(`‚úÖ T√¨m th·∫•y ${bots.length} bot:`);
    bots.forEach(bot => {
      console.log(`  - ${bot.name} (ID: ${bot.id})`);
      console.log(`    Status: ${bot.status}`);
      console.log(`    Position Size: ${bot.config?.positionSize || 'N/A'}%`);
      console.log(`    Account: ${bot.config?.account?.testnet ? 'Testnet' : 'Live'}`);
    });
    
    // 2. Test c√°c Position Size kh√°c nhau
    console.log('\n2Ô∏è‚É£ Test c√°c Position Size kh√°c nhau...');
    
    const testPositionSizes = [10, 25, 50, 80, 100];
    
    for (const positionSize of testPositionSizes) {
      console.log(`\nüìä Test Position Size: ${positionSize}%`);
      
      // Gi·∫£ l·∫≠p balance
      const mockUsdtBalance = 1000; // 1000 USDT
      const mockBtcBalance = 0.01; // 0.01 BTC
      const mockBtcPrice = 50000; // 50,000 USDT/BTC
      
      // T√≠nh to√°n quantity
      const usdtToUse = (positionSize / 100) * mockUsdtBalance;
      const buyQuantity = usdtToUse / mockBtcPrice;
      const sellQuantity = (positionSize / 100) * mockBtcBalance;
      
      console.log(`  USDT Balance: ${mockUsdtBalance}`);
      console.log(`  BTC Balance: ${mockBtcBalance}`);
      console.log(`  BTC Price: ${mockBtcPrice}`);
      console.log(`  Buy: S·ª≠ d·ª•ng ${usdtToUse} USDT ‚Üí ${buyQuantity.toFixed(6)} BTC`);
      console.log(`  Sell: B√°n ${sellQuantity.toFixed(6)} BTC`);
      
      // Ki·ªÉm tra r·ªßi ro
      if (positionSize > 80) {
        console.log(`  ‚ö†Ô∏è  C·∫¢NH B√ÅO: Position Size ${positionSize}% r·∫•t cao!`);
      }
    }
    
    // 3. Test edge cases
    console.log('\n3Ô∏è‚É£ Test edge cases...');
    
    // Test balance = 0
    console.log('\nüìä Test Balance = 0:');
    const zeroUsdtBalance = 0;
    const zeroBtcBalance = 0;
    const btcPrice = 50000;
    
    const buyQuantityZero = (100 / 100) * zeroUsdtBalance / btcPrice;
    const sellQuantityZero = (100 / 100) * zeroBtcBalance;
    
    console.log(`  USDT Balance: ${zeroUsdtBalance}`);
    console.log(`  BTC Balance: ${zeroBtcBalance}`);
    console.log(`  Buy Quantity (100%): ${buyQuantityZero}`);
    console.log(`  Sell Quantity (100%): ${sellQuantityZero}`);
    console.log(`  ‚ö†Ô∏è  K·∫øt qu·∫£: Kh√¥ng th·ªÉ trade v·ªõi balance = 0`);
    
    // 4. Test validation
    console.log('\n4Ô∏è‚É£ Test validation...');
    
    const invalidPositionSizes = [-1, 0, 101, 150];
    
    for (const invalidSize of invalidPositionSizes) {
      console.log(`  Position Size ${invalidSize}%: ${invalidSize < 1 || invalidSize > 100 ? '‚ùå Kh√¥ng h·ª£p l·ªá' : '‚úÖ H·ª£p l·ªá'}`);
    }
    
    // 5. Test c·∫≠p nh·∫≠t config
    if (bots.length > 0) {
      const testBot = bots[0];
      console.log(`\n5Ô∏è‚É£ Test c·∫≠p nh·∫≠t Position Size cho bot: ${testBot.name}`);
      
      const newPositionSize = 75;
      console.log(`  C·∫≠p nh·∫≠t Position Size t·ª´ ${testBot.config?.positionSize || 'N/A'}% ‚Üí ${newPositionSize}%`);
      
      // Gi·∫£ l·∫≠p c·∫≠p nh·∫≠t config
      const updatedConfig = {
        ...testBot.config,
        positionSize: newPositionSize
      };
      
      console.log(`  Config m·ªõi:`, JSON.stringify(updatedConfig, null, 2));
      
      if (newPositionSize > 80) {
        console.log(`  ‚ö†Ô∏è  C·∫¢NH B√ÅO: Position Size ${newPositionSize}% r·∫•t cao!`);
      }
    }
    
    console.log('\nüéâ Test ho√†n th√†nh!');
    console.log('\nüìã H∆∞·ªõng d·∫´n ki·ªÉm tra:');
    console.log('1. V√†o ·ª©ng d·ª•ng v√† test Position Size = 100%');
    console.log('2. Ki·ªÉm tra xem c√≥ l·ªói "Quantity kh√¥ng h·ª£p l·ªá: 0" kh√¥ng');
    console.log('3. Xem console log ƒë·ªÉ ƒë·∫£m b·∫£o bot x·ª≠ l√Ω balance = 0 ƒë√∫ng c√°ch');
    console.log('4. Ki·ªÉm tra c·∫£nh b√°o khi Position Size > 80%');
    
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error);
  }
}

// Ch·∫°y test
testPositionSizeBalance();

